=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProductUpdate
    # Defines product id that has to be updated
    attr_accessor :id

    # Defines product model that has to be updated
    attr_accessor :model

    # Defines new product's sku
    attr_accessor :sku

    # Defines product's name that has to be updated
    attr_accessor :name

    # Defines new product's description
    attr_accessor :description

    # Defines short description
    attr_accessor :short_description

    # Defines new product's price
    attr_accessor :price

    # Defines product's old price
    attr_accessor :old_price

    # Defines new product's special price
    attr_accessor :special_price

    # Defines the date of special price creation
    attr_accessor :sprice_create

    # Defines the term of special price offer duration
    attr_accessor :sprice_expire

    # Defines new product's cost price
    attr_accessor :cost_price

    # Specifies product's fixed cost shipping price
    attr_accessor :fixed_cost_shipping_price

    # Defines new product's retail price
    attr_accessor :retail_price

    # Defines product's tier prices
    attr_accessor :tier_prices

    # Defines reserve price value
    attr_accessor :reserve_price

    # Defines buy it now value
    attr_accessor :buyitnow_price

    # Specifies whether a tax is charged
    attr_accessor :taxable

    # Defines tax classes where entity has to be added
    attr_accessor :tax_class_id

    # Defines product's type
    attr_accessor :type

    # Defines product's status
    attr_accessor :status

    # The human-readable label for the condition (e.g., \"New\").
    attr_accessor :condition

    # Set visibility status
    attr_accessor :visible

    # Set stock status
    attr_accessor :in_stock

    # Defines category's visibility status
    attr_accessor :avail

    # Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.
    attr_accessor :avail_from

    # A categorization for the product
    attr_accessor :product_class

    # Retrieves brands specified by brand name
    attr_accessor :brand_name

    # Specifies the set of visible/invisible products for users
    attr_accessor :available_for_view

    # Assign product to the stores that is specified by comma-separated stores' id
    attr_accessor :stores_ids

    # Defines store id where the product should be found
    attr_accessor :store_id

    # Language id
    attr_accessor :lang_id

    # Defines new product's quantity
    attr_accessor :quantity

    # This parameter allows to reserve/unreserve product quantity.
    attr_accessor :reserve_quantity

    # Defines inventory tracking for product
    attr_accessor :manage_stock

    # Set backorder status
    attr_accessor :backorder_status

    # Defines the incremental changes in product quantity
    attr_accessor :increase_quantity

    # Defines the decrement changes in product quantity
    attr_accessor :reduce_quantity

    # Specify the quantity threshold below which the product is considered low in stock
    attr_accessor :low_stock_threshold

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Weight
    attr_accessor :weight

    # Weight Unit
    attr_accessor :weight_unit

    # Defines product's height
    attr_accessor :height

    # Defines product's length
    attr_accessor :length

    # Defines product's width
    attr_accessor :width

    # Weight Unit
    attr_accessor :dimensions_unit

    # Defines whether the product is virtual
    attr_accessor :is_virtual

    # Specifies product free shipping flag that has to be updated
    attr_accessor :is_free_shipping

    # Global Trade Item Number. An GTIN is an identifier for trade items.
    attr_accessor :gtin

    # Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
    attr_accessor :upc

    # Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
    attr_accessor :mpn

    # European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
    attr_accessor :ean

    # International Standard Book Number. An ISBN is a unique identifier for books.
    attr_accessor :isbn

    # A barcode is a unique code composed of numbers used as a product identifier.
    attr_accessor :barcode

    # Defines product's manufacturer
    attr_accessor :manufacturer

    # Defines product's manufacturer by manufacturer_id
    attr_accessor :manufacturer_id

    # Defines product add that is specified by comma-separated categories id
    attr_accessor :categories_ids

    # Defines product related products ids that has to be updated
    attr_accessor :related_products_ids

    # Defines product up-sell products ids that has to be updated
    attr_accessor :up_sell_products_ids

    # Defines product cross-sells products ids that has to be updated
    attr_accessor :cross_sell_products_ids

    # Defines unique meta title for each entity
    attr_accessor :meta_title

    # Defines unique meta keywords for each entity
    attr_accessor :meta_keywords

    # Defines unique meta description of a entity
    attr_accessor :meta_description

    # Defines unique URL for SEO
    attr_accessor :seo_url

    # Defines unique search keywords
    attr_accessor :search_keywords

    # Product tags
    attr_accessor :tags

    # The delivery promise that applies to offer
    attr_accessor :delivery_code

    attr_accessor :package_details

    # The country where the inventory item was made
    attr_accessor :country_of_origin

    # Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
    attr_accessor :harmonized_system_code

    # The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field shipping_zones[]->id.
    attr_accessor :shipping_template_id

    # The numeric ID of the processing profile (readiness state) for physical products in Etsy. You can find possible values in the \"cart.info\" API method response, in the field processing_profiles[]->readiness_state_id.
    attr_accessor :processing_profile_id

    # An enumerated string for the era in which the maker made the product.
    attr_accessor :when_made

    # If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.
    attr_accessor :is_supply

    # Defines whether the product is downloadable
    attr_accessor :downloadable

    # A list of material strings for materials used in the product.
    attr_accessor :materials

    # When true, automatically renews a listing upon its expiration.
    attr_accessor :auto_renew

    # Set whether the product on sale
    attr_accessor :on_sale

    # Defines product production partner ids that has to be updated
    attr_accessor :production_partner_ids

    attr_accessor :manufacturer_info

    # Report request id
    attr_accessor :report_request_id

    # Disable report cache for current request
    attr_accessor :disable_report_cache

    # Is reindex required
    attr_accessor :reindex

    # Is cache clear required
    attr_accessor :clear_cache

    # Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.
    attr_accessor :check_process_status

    # An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields->product_specifics).         <b>The structure of the parameter is different for specific platforms.</b>
    attr_accessor :specifics

    # Add Shop Section Id
    attr_accessor :shop_section_id

    attr_accessor :personalization_details

    # External product link
    attr_accessor :external_product_link

    # String containing the JSON representation of the supplied data
    attr_accessor :marketplace_item_properties

    # The minimum quantity an order must contain, to be eligible to purchase this product.
    attr_accessor :min_order_quantity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'model' => :'model',
        :'sku' => :'sku',
        :'name' => :'name',
        :'description' => :'description',
        :'short_description' => :'short_description',
        :'price' => :'price',
        :'old_price' => :'old_price',
        :'special_price' => :'special_price',
        :'sprice_create' => :'sprice_create',
        :'sprice_expire' => :'sprice_expire',
        :'cost_price' => :'cost_price',
        :'fixed_cost_shipping_price' => :'fixed_cost_shipping_price',
        :'retail_price' => :'retail_price',
        :'tier_prices' => :'tier_prices',
        :'reserve_price' => :'reserve_price',
        :'buyitnow_price' => :'buyitnow_price',
        :'taxable' => :'taxable',
        :'tax_class_id' => :'tax_class_id',
        :'type' => :'type',
        :'status' => :'status',
        :'condition' => :'condition',
        :'visible' => :'visible',
        :'in_stock' => :'in_stock',
        :'avail' => :'avail',
        :'avail_from' => :'avail_from',
        :'product_class' => :'product_class',
        :'brand_name' => :'brand_name',
        :'available_for_view' => :'available_for_view',
        :'stores_ids' => :'stores_ids',
        :'store_id' => :'store_id',
        :'lang_id' => :'lang_id',
        :'quantity' => :'quantity',
        :'reserve_quantity' => :'reserve_quantity',
        :'manage_stock' => :'manage_stock',
        :'backorder_status' => :'backorder_status',
        :'increase_quantity' => :'increase_quantity',
        :'reduce_quantity' => :'reduce_quantity',
        :'low_stock_threshold' => :'low_stock_threshold',
        :'warehouse_id' => :'warehouse_id',
        :'weight' => :'weight',
        :'weight_unit' => :'weight_unit',
        :'height' => :'height',
        :'length' => :'length',
        :'width' => :'width',
        :'dimensions_unit' => :'dimensions_unit',
        :'is_virtual' => :'is_virtual',
        :'is_free_shipping' => :'is_free_shipping',
        :'gtin' => :'gtin',
        :'upc' => :'upc',
        :'mpn' => :'mpn',
        :'ean' => :'ean',
        :'isbn' => :'isbn',
        :'barcode' => :'barcode',
        :'manufacturer' => :'manufacturer',
        :'manufacturer_id' => :'manufacturer_id',
        :'categories_ids' => :'categories_ids',
        :'related_products_ids' => :'related_products_ids',
        :'up_sell_products_ids' => :'up_sell_products_ids',
        :'cross_sell_products_ids' => :'cross_sell_products_ids',
        :'meta_title' => :'meta_title',
        :'meta_keywords' => :'meta_keywords',
        :'meta_description' => :'meta_description',
        :'seo_url' => :'seo_url',
        :'search_keywords' => :'search_keywords',
        :'tags' => :'tags',
        :'delivery_code' => :'delivery_code',
        :'package_details' => :'package_details',
        :'country_of_origin' => :'country_of_origin',
        :'harmonized_system_code' => :'harmonized_system_code',
        :'shipping_template_id' => :'shipping_template_id',
        :'processing_profile_id' => :'processing_profile_id',
        :'when_made' => :'when_made',
        :'is_supply' => :'is_supply',
        :'downloadable' => :'downloadable',
        :'materials' => :'materials',
        :'auto_renew' => :'auto_renew',
        :'on_sale' => :'on_sale',
        :'production_partner_ids' => :'production_partner_ids',
        :'manufacturer_info' => :'manufacturer_info',
        :'report_request_id' => :'report_request_id',
        :'disable_report_cache' => :'disable_report_cache',
        :'reindex' => :'reindex',
        :'clear_cache' => :'clear_cache',
        :'check_process_status' => :'check_process_status',
        :'specifics' => :'specifics',
        :'shop_section_id' => :'shop_section_id',
        :'personalization_details' => :'personalization_details',
        :'external_product_link' => :'external_product_link',
        :'marketplace_item_properties' => :'marketplace_item_properties',
        :'min_order_quantity' => :'min_order_quantity'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'model' => :'String',
        :'sku' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'short_description' => :'String',
        :'price' => :'Float',
        :'old_price' => :'Float',
        :'special_price' => :'Float',
        :'sprice_create' => :'String',
        :'sprice_expire' => :'String',
        :'cost_price' => :'Float',
        :'fixed_cost_shipping_price' => :'Float',
        :'retail_price' => :'Float',
        :'tier_prices' => :'Array<ProductAddTierPricesInner>',
        :'reserve_price' => :'Float',
        :'buyitnow_price' => :'Float',
        :'taxable' => :'Boolean',
        :'tax_class_id' => :'String',
        :'type' => :'String',
        :'status' => :'String',
        :'condition' => :'String',
        :'visible' => :'String',
        :'in_stock' => :'Boolean',
        :'avail' => :'Boolean',
        :'avail_from' => :'String',
        :'product_class' => :'String',
        :'brand_name' => :'String',
        :'available_for_view' => :'Boolean',
        :'stores_ids' => :'String',
        :'store_id' => :'String',
        :'lang_id' => :'String',
        :'quantity' => :'Float',
        :'reserve_quantity' => :'Float',
        :'manage_stock' => :'Boolean',
        :'backorder_status' => :'String',
        :'increase_quantity' => :'Float',
        :'reduce_quantity' => :'Float',
        :'low_stock_threshold' => :'Float',
        :'warehouse_id' => :'String',
        :'weight' => :'Float',
        :'weight_unit' => :'String',
        :'height' => :'Float',
        :'length' => :'Float',
        :'width' => :'Float',
        :'dimensions_unit' => :'String',
        :'is_virtual' => :'Boolean',
        :'is_free_shipping' => :'Boolean',
        :'gtin' => :'String',
        :'upc' => :'String',
        :'mpn' => :'String',
        :'ean' => :'String',
        :'isbn' => :'String',
        :'barcode' => :'String',
        :'manufacturer' => :'String',
        :'manufacturer_id' => :'String',
        :'categories_ids' => :'String',
        :'related_products_ids' => :'String',
        :'up_sell_products_ids' => :'String',
        :'cross_sell_products_ids' => :'String',
        :'meta_title' => :'String',
        :'meta_keywords' => :'String',
        :'meta_description' => :'String',
        :'seo_url' => :'String',
        :'search_keywords' => :'String',
        :'tags' => :'String',
        :'delivery_code' => :'String',
        :'package_details' => :'ProductAddPackageDetails',
        :'country_of_origin' => :'String',
        :'harmonized_system_code' => :'String',
        :'shipping_template_id' => :'Integer',
        :'processing_profile_id' => :'Integer',
        :'when_made' => :'String',
        :'is_supply' => :'Boolean',
        :'downloadable' => :'Boolean',
        :'materials' => :'Array<String>',
        :'auto_renew' => :'Boolean',
        :'on_sale' => :'Boolean',
        :'production_partner_ids' => :'String',
        :'manufacturer_info' => :'ProductAddManufacturerInfo',
        :'report_request_id' => :'String',
        :'disable_report_cache' => :'Boolean',
        :'reindex' => :'Boolean',
        :'clear_cache' => :'Boolean',
        :'check_process_status' => :'Boolean',
        :'specifics' => :'Array<ProductAddSpecificsInner>',
        :'shop_section_id' => :'Integer',
        :'personalization_details' => :'ProductAddPersonalizationDetails',
        :'external_product_link' => :'String',
        :'marketplace_item_properties' => :'String',
        :'min_order_quantity' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProductUpdate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProductUpdate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'old_price')
        self.old_price = attributes[:'old_price']
      end

      if attributes.key?(:'special_price')
        self.special_price = attributes[:'special_price']
      end

      if attributes.key?(:'sprice_create')
        self.sprice_create = attributes[:'sprice_create']
      end

      if attributes.key?(:'sprice_expire')
        self.sprice_expire = attributes[:'sprice_expire']
      end

      if attributes.key?(:'cost_price')
        self.cost_price = attributes[:'cost_price']
      end

      if attributes.key?(:'fixed_cost_shipping_price')
        self.fixed_cost_shipping_price = attributes[:'fixed_cost_shipping_price']
      end

      if attributes.key?(:'retail_price')
        self.retail_price = attributes[:'retail_price']
      end

      if attributes.key?(:'tier_prices')
        if (value = attributes[:'tier_prices']).is_a?(Array)
          self.tier_prices = value
        end
      end

      if attributes.key?(:'reserve_price')
        self.reserve_price = attributes[:'reserve_price']
      end

      if attributes.key?(:'buyitnow_price')
        self.buyitnow_price = attributes[:'buyitnow_price']
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.key?(:'tax_class_id')
        self.tax_class_id = attributes[:'tax_class_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'visible')
        self.visible = attributes[:'visible']
      end

      if attributes.key?(:'in_stock')
        self.in_stock = attributes[:'in_stock']
      end

      if attributes.key?(:'avail')
        self.avail = attributes[:'avail']
      else
        self.avail = true
      end

      if attributes.key?(:'avail_from')
        self.avail_from = attributes[:'avail_from']
      end

      if attributes.key?(:'product_class')
        self.product_class = attributes[:'product_class']
      end

      if attributes.key?(:'brand_name')
        self.brand_name = attributes[:'brand_name']
      end

      if attributes.key?(:'available_for_view')
        self.available_for_view = attributes[:'available_for_view']
      end

      if attributes.key?(:'stores_ids')
        self.stores_ids = attributes[:'stores_ids']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'lang_id')
        self.lang_id = attributes[:'lang_id']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'reserve_quantity')
        self.reserve_quantity = attributes[:'reserve_quantity']
      end

      if attributes.key?(:'manage_stock')
        self.manage_stock = attributes[:'manage_stock']
      end

      if attributes.key?(:'backorder_status')
        self.backorder_status = attributes[:'backorder_status']
      end

      if attributes.key?(:'increase_quantity')
        self.increase_quantity = attributes[:'increase_quantity']
      end

      if attributes.key?(:'reduce_quantity')
        self.reduce_quantity = attributes[:'reduce_quantity']
      end

      if attributes.key?(:'low_stock_threshold')
        self.low_stock_threshold = attributes[:'low_stock_threshold']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'dimensions_unit')
        self.dimensions_unit = attributes[:'dimensions_unit']
      end

      if attributes.key?(:'is_virtual')
        self.is_virtual = attributes[:'is_virtual']
      else
        self.is_virtual = false
      end

      if attributes.key?(:'is_free_shipping')
        self.is_free_shipping = attributes[:'is_free_shipping']
      end

      if attributes.key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

      if attributes.key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.key?(:'mpn')
        self.mpn = attributes[:'mpn']
      end

      if attributes.key?(:'ean')
        self.ean = attributes[:'ean']
      end

      if attributes.key?(:'isbn')
        self.isbn = attributes[:'isbn']
      end

      if attributes.key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'manufacturer_id')
        self.manufacturer_id = attributes[:'manufacturer_id']
      end

      if attributes.key?(:'categories_ids')
        self.categories_ids = attributes[:'categories_ids']
      end

      if attributes.key?(:'related_products_ids')
        self.related_products_ids = attributes[:'related_products_ids']
      end

      if attributes.key?(:'up_sell_products_ids')
        self.up_sell_products_ids = attributes[:'up_sell_products_ids']
      end

      if attributes.key?(:'cross_sell_products_ids')
        self.cross_sell_products_ids = attributes[:'cross_sell_products_ids']
      end

      if attributes.key?(:'meta_title')
        self.meta_title = attributes[:'meta_title']
      end

      if attributes.key?(:'meta_keywords')
        self.meta_keywords = attributes[:'meta_keywords']
      end

      if attributes.key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.key?(:'seo_url')
        self.seo_url = attributes[:'seo_url']
      end

      if attributes.key?(:'search_keywords')
        self.search_keywords = attributes[:'search_keywords']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'delivery_code')
        self.delivery_code = attributes[:'delivery_code']
      end

      if attributes.key?(:'package_details')
        self.package_details = attributes[:'package_details']
      end

      if attributes.key?(:'country_of_origin')
        self.country_of_origin = attributes[:'country_of_origin']
      end

      if attributes.key?(:'harmonized_system_code')
        self.harmonized_system_code = attributes[:'harmonized_system_code']
      end

      if attributes.key?(:'shipping_template_id')
        self.shipping_template_id = attributes[:'shipping_template_id']
      else
        self.shipping_template_id = 0
      end

      if attributes.key?(:'processing_profile_id')
        self.processing_profile_id = attributes[:'processing_profile_id']
      end

      if attributes.key?(:'when_made')
        self.when_made = attributes[:'when_made']
      else
        self.when_made = 'made_to_order'
      end

      if attributes.key?(:'is_supply')
        self.is_supply = attributes[:'is_supply']
      else
        self.is_supply = true
      end

      if attributes.key?(:'downloadable')
        self.downloadable = attributes[:'downloadable']
      else
        self.downloadable = false
      end

      if attributes.key?(:'materials')
        if (value = attributes[:'materials']).is_a?(Array)
          self.materials = value
        end
      end

      if attributes.key?(:'auto_renew')
        self.auto_renew = attributes[:'auto_renew']
      else
        self.auto_renew = false
      end

      if attributes.key?(:'on_sale')
        self.on_sale = attributes[:'on_sale']
      else
        self.on_sale = false
      end

      if attributes.key?(:'production_partner_ids')
        self.production_partner_ids = attributes[:'production_partner_ids']
      end

      if attributes.key?(:'manufacturer_info')
        self.manufacturer_info = attributes[:'manufacturer_info']
      end

      if attributes.key?(:'report_request_id')
        self.report_request_id = attributes[:'report_request_id']
      end

      if attributes.key?(:'disable_report_cache')
        self.disable_report_cache = attributes[:'disable_report_cache']
      else
        self.disable_report_cache = false
      end

      if attributes.key?(:'reindex')
        self.reindex = attributes[:'reindex']
      else
        self.reindex = true
      end

      if attributes.key?(:'clear_cache')
        self.clear_cache = attributes[:'clear_cache']
      else
        self.clear_cache = true
      end

      if attributes.key?(:'check_process_status')
        self.check_process_status = attributes[:'check_process_status']
      else
        self.check_process_status = false
      end

      if attributes.key?(:'specifics')
        if (value = attributes[:'specifics']).is_a?(Array)
          self.specifics = value
        end
      end

      if attributes.key?(:'shop_section_id')
        self.shop_section_id = attributes[:'shop_section_id']
      end

      if attributes.key?(:'personalization_details')
        self.personalization_details = attributes[:'personalization_details']
      end

      if attributes.key?(:'external_product_link')
        self.external_product_link = attributes[:'external_product_link']
      end

      if attributes.key?(:'marketplace_item_properties')
        self.marketplace_item_properties = attributes[:'marketplace_item_properties']
      end

      if attributes.key?(:'min_order_quantity')
        self.min_order_quantity = attributes[:'min_order_quantity']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          model == o.model &&
          sku == o.sku &&
          name == o.name &&
          description == o.description &&
          short_description == o.short_description &&
          price == o.price &&
          old_price == o.old_price &&
          special_price == o.special_price &&
          sprice_create == o.sprice_create &&
          sprice_expire == o.sprice_expire &&
          cost_price == o.cost_price &&
          fixed_cost_shipping_price == o.fixed_cost_shipping_price &&
          retail_price == o.retail_price &&
          tier_prices == o.tier_prices &&
          reserve_price == o.reserve_price &&
          buyitnow_price == o.buyitnow_price &&
          taxable == o.taxable &&
          tax_class_id == o.tax_class_id &&
          type == o.type &&
          status == o.status &&
          condition == o.condition &&
          visible == o.visible &&
          in_stock == o.in_stock &&
          avail == o.avail &&
          avail_from == o.avail_from &&
          product_class == o.product_class &&
          brand_name == o.brand_name &&
          available_for_view == o.available_for_view &&
          stores_ids == o.stores_ids &&
          store_id == o.store_id &&
          lang_id == o.lang_id &&
          quantity == o.quantity &&
          reserve_quantity == o.reserve_quantity &&
          manage_stock == o.manage_stock &&
          backorder_status == o.backorder_status &&
          increase_quantity == o.increase_quantity &&
          reduce_quantity == o.reduce_quantity &&
          low_stock_threshold == o.low_stock_threshold &&
          warehouse_id == o.warehouse_id &&
          weight == o.weight &&
          weight_unit == o.weight_unit &&
          height == o.height &&
          length == o.length &&
          width == o.width &&
          dimensions_unit == o.dimensions_unit &&
          is_virtual == o.is_virtual &&
          is_free_shipping == o.is_free_shipping &&
          gtin == o.gtin &&
          upc == o.upc &&
          mpn == o.mpn &&
          ean == o.ean &&
          isbn == o.isbn &&
          barcode == o.barcode &&
          manufacturer == o.manufacturer &&
          manufacturer_id == o.manufacturer_id &&
          categories_ids == o.categories_ids &&
          related_products_ids == o.related_products_ids &&
          up_sell_products_ids == o.up_sell_products_ids &&
          cross_sell_products_ids == o.cross_sell_products_ids &&
          meta_title == o.meta_title &&
          meta_keywords == o.meta_keywords &&
          meta_description == o.meta_description &&
          seo_url == o.seo_url &&
          search_keywords == o.search_keywords &&
          tags == o.tags &&
          delivery_code == o.delivery_code &&
          package_details == o.package_details &&
          country_of_origin == o.country_of_origin &&
          harmonized_system_code == o.harmonized_system_code &&
          shipping_template_id == o.shipping_template_id &&
          processing_profile_id == o.processing_profile_id &&
          when_made == o.when_made &&
          is_supply == o.is_supply &&
          downloadable == o.downloadable &&
          materials == o.materials &&
          auto_renew == o.auto_renew &&
          on_sale == o.on_sale &&
          production_partner_ids == o.production_partner_ids &&
          manufacturer_info == o.manufacturer_info &&
          report_request_id == o.report_request_id &&
          disable_report_cache == o.disable_report_cache &&
          reindex == o.reindex &&
          clear_cache == o.clear_cache &&
          check_process_status == o.check_process_status &&
          specifics == o.specifics &&
          shop_section_id == o.shop_section_id &&
          personalization_details == o.personalization_details &&
          external_product_link == o.external_product_link &&
          marketplace_item_properties == o.marketplace_item_properties &&
          min_order_quantity == o.min_order_quantity
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, model, sku, name, description, short_description, price, old_price, special_price, sprice_create, sprice_expire, cost_price, fixed_cost_shipping_price, retail_price, tier_prices, reserve_price, buyitnow_price, taxable, tax_class_id, type, status, condition, visible, in_stock, avail, avail_from, product_class, brand_name, available_for_view, stores_ids, store_id, lang_id, quantity, reserve_quantity, manage_stock, backorder_status, increase_quantity, reduce_quantity, low_stock_threshold, warehouse_id, weight, weight_unit, height, length, width, dimensions_unit, is_virtual, is_free_shipping, gtin, upc, mpn, ean, isbn, barcode, manufacturer, manufacturer_id, categories_ids, related_products_ids, up_sell_products_ids, cross_sell_products_ids, meta_title, meta_keywords, meta_description, seo_url, search_keywords, tags, delivery_code, package_details, country_of_origin, harmonized_system_code, shipping_template_id, processing_profile_id, when_made, is_supply, downloadable, materials, auto_renew, on_sale, production_partner_ids, manufacturer_info, report_request_id, disable_report_cache, reindex, clear_cache, check_process_status, specifics, shop_section_id, personalization_details, external_product_link, marketplace_item_properties, min_order_quantity].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
