=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class CartStoreInfo
    attr_accessor :store_id

    attr_accessor :name

    attr_accessor :language

    attr_accessor :store_languages

    attr_accessor :currency

    attr_accessor :store_currencies

    attr_accessor :timezone

    attr_accessor :country

    attr_accessor :root_category_id

    attr_accessor :multi_store_url

    attr_accessor :active

    attr_accessor :weight_unit

    attr_accessor :dimension_unit

    attr_accessor :prices_include_tax

    attr_accessor :carrier_info

    attr_accessor :store_owner_info

    attr_accessor :default_warehouse_id

    attr_accessor :channels

    attr_accessor :additional_fields

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'store_id' => :'store_id',
        :'name' => :'name',
        :'language' => :'language',
        :'store_languages' => :'store_languages',
        :'currency' => :'currency',
        :'store_currencies' => :'store_currencies',
        :'timezone' => :'timezone',
        :'country' => :'country',
        :'root_category_id' => :'root_category_id',
        :'multi_store_url' => :'multi_store_url',
        :'active' => :'active',
        :'weight_unit' => :'weight_unit',
        :'dimension_unit' => :'dimension_unit',
        :'prices_include_tax' => :'prices_include_tax',
        :'carrier_info' => :'carrier_info',
        :'store_owner_info' => :'store_owner_info',
        :'default_warehouse_id' => :'default_warehouse_id',
        :'channels' => :'channels',
        :'additional_fields' => :'additional_fields',
        :'custom_fields' => :'custom_fields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'store_id' => :'String',
        :'name' => :'String',
        :'language' => :'String',
        :'store_languages' => :'Array<Language>',
        :'currency' => :'Currency',
        :'store_currencies' => :'Array<Currency>',
        :'timezone' => :'String',
        :'country' => :'String',
        :'root_category_id' => :'String',
        :'multi_store_url' => :'String',
        :'active' => :'Boolean',
        :'weight_unit' => :'String',
        :'dimension_unit' => :'String',
        :'prices_include_tax' => :'Boolean',
        :'carrier_info' => :'Array<Carrier>',
        :'store_owner_info' => :'Info',
        :'default_warehouse_id' => :'String',
        :'channels' => :'Array<CartChannel>',
        :'additional_fields' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CartStoreInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CartStoreInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'language')
        self.language = attributes[:'language']
      end

      if attributes.key?(:'store_languages')
        if (value = attributes[:'store_languages']).is_a?(Array)
          self.store_languages = value
        end
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'store_currencies')
        if (value = attributes[:'store_currencies']).is_a?(Array)
          self.store_currencies = value
        end
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'root_category_id')
        self.root_category_id = attributes[:'root_category_id']
      end

      if attributes.key?(:'multi_store_url')
        self.multi_store_url = attributes[:'multi_store_url']
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

      if attributes.key?(:'dimension_unit')
        self.dimension_unit = attributes[:'dimension_unit']
      end

      if attributes.key?(:'prices_include_tax')
        self.prices_include_tax = attributes[:'prices_include_tax']
      end

      if attributes.key?(:'carrier_info')
        if (value = attributes[:'carrier_info']).is_a?(Array)
          self.carrier_info = value
        end
      end

      if attributes.key?(:'store_owner_info')
        self.store_owner_info = attributes[:'store_owner_info']
      end

      if attributes.key?(:'default_warehouse_id')
        self.default_warehouse_id = attributes[:'default_warehouse_id']
      end

      if attributes.key?(:'channels')
        if (value = attributes[:'channels']).is_a?(Array)
          self.channels = value
        end
      end

      if attributes.key?(:'additional_fields')
        self.additional_fields = attributes[:'additional_fields']
      end

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          store_id == o.store_id &&
          name == o.name &&
          language == o.language &&
          store_languages == o.store_languages &&
          currency == o.currency &&
          store_currencies == o.store_currencies &&
          timezone == o.timezone &&
          country == o.country &&
          root_category_id == o.root_category_id &&
          multi_store_url == o.multi_store_url &&
          active == o.active &&
          weight_unit == o.weight_unit &&
          dimension_unit == o.dimension_unit &&
          prices_include_tax == o.prices_include_tax &&
          carrier_info == o.carrier_info &&
          store_owner_info == o.store_owner_info &&
          default_warehouse_id == o.default_warehouse_id &&
          channels == o.channels &&
          additional_fields == o.additional_fields &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [store_id, name, language, store_languages, currency, store_currencies, timezone, country, root_category_id, multi_store_url, active, weight_unit, dimension_unit, prices_include_tax, carrier_info, store_owner_info, default_warehouse_id, channels, additional_fields, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
