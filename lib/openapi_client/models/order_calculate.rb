=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderCalculate
    # Defines the customer specified by email for whom the order needs to be calculated
    attr_accessor :customer_email

    # Currency Id
    attr_accessor :currency_id

    # Store Id
    attr_accessor :store_id

    # Coupons that will be applied to order. If the order isn't eligible for any given discount code or there is no discount with such a code it will be skipped during calculation
    attr_accessor :coupons

    # Specifies shipping first name
    attr_accessor :shipp_first_name

    # Specifies shipping last name
    attr_accessor :shipp_last_name

    # Specifies first shipping address
    attr_accessor :shipp_address_1

    # Specifies second address line of a shipping street address
    attr_accessor :shipp_address_2

    # Specifies shipping city
    attr_accessor :shipp_city

    # Specifies shipping postcode
    attr_accessor :shipp_postcode

    # Specifies shipping state code
    attr_accessor :shipp_state

    # Specifies shipping country code
    attr_accessor :shipp_country

    # Specifies shipping company
    attr_accessor :shipp_company

    # Specifies shipping phone
    attr_accessor :shipp_phone

    # Specifies billing first name
    attr_accessor :bill_first_name

    # Specifies billing last name
    attr_accessor :bill_last_name

    # Specifies first billing address
    attr_accessor :bill_address_1

    # Specifies second billing address
    attr_accessor :bill_address_2

    # Specifies billing city
    attr_accessor :bill_city

    # Specifies billing postcode
    attr_accessor :bill_postcode

    # Specifies billing state code
    attr_accessor :bill_state

    # Specifies billing country code
    attr_accessor :bill_country

    # Specifies billing company
    attr_accessor :bill_company

    # Specifies billing phone
    attr_accessor :bill_phone

    # Set this parameter in order to choose which entity fields you want to retrieve
    attr_accessor :response_fields

    attr_accessor :order_item

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'customer_email' => :'customer_email',
        :'currency_id' => :'currency_id',
        :'store_id' => :'store_id',
        :'coupons' => :'coupons',
        :'shipp_first_name' => :'shipp_first_name',
        :'shipp_last_name' => :'shipp_last_name',
        :'shipp_address_1' => :'shipp_address_1',
        :'shipp_address_2' => :'shipp_address_2',
        :'shipp_city' => :'shipp_city',
        :'shipp_postcode' => :'shipp_postcode',
        :'shipp_state' => :'shipp_state',
        :'shipp_country' => :'shipp_country',
        :'shipp_company' => :'shipp_company',
        :'shipp_phone' => :'shipp_phone',
        :'bill_first_name' => :'bill_first_name',
        :'bill_last_name' => :'bill_last_name',
        :'bill_address_1' => :'bill_address_1',
        :'bill_address_2' => :'bill_address_2',
        :'bill_city' => :'bill_city',
        :'bill_postcode' => :'bill_postcode',
        :'bill_state' => :'bill_state',
        :'bill_country' => :'bill_country',
        :'bill_company' => :'bill_company',
        :'bill_phone' => :'bill_phone',
        :'response_fields' => :'response_fields',
        :'order_item' => :'order_item'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'customer_email' => :'String',
        :'currency_id' => :'String',
        :'store_id' => :'String',
        :'coupons' => :'Array<String>',
        :'shipp_first_name' => :'String',
        :'shipp_last_name' => :'String',
        :'shipp_address_1' => :'String',
        :'shipp_address_2' => :'String',
        :'shipp_city' => :'String',
        :'shipp_postcode' => :'String',
        :'shipp_state' => :'String',
        :'shipp_country' => :'String',
        :'shipp_company' => :'String',
        :'shipp_phone' => :'String',
        :'bill_first_name' => :'String',
        :'bill_last_name' => :'String',
        :'bill_address_1' => :'String',
        :'bill_address_2' => :'String',
        :'bill_city' => :'String',
        :'bill_postcode' => :'String',
        :'bill_state' => :'String',
        :'bill_country' => :'String',
        :'bill_company' => :'String',
        :'bill_phone' => :'String',
        :'response_fields' => :'String',
        :'order_item' => :'Array<OrderCalculateOrderItemInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderCalculate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderCalculate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'customer_email')
        self.customer_email = attributes[:'customer_email']
      else
        self.customer_email = nil
      end

      if attributes.key?(:'currency_id')
        self.currency_id = attributes[:'currency_id']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'coupons')
        if (value = attributes[:'coupons']).is_a?(Array)
          self.coupons = value
        end
      end

      if attributes.key?(:'shipp_first_name')
        self.shipp_first_name = attributes[:'shipp_first_name']
      else
        self.shipp_first_name = nil
      end

      if attributes.key?(:'shipp_last_name')
        self.shipp_last_name = attributes[:'shipp_last_name']
      else
        self.shipp_last_name = nil
      end

      if attributes.key?(:'shipp_address_1')
        self.shipp_address_1 = attributes[:'shipp_address_1']
      else
        self.shipp_address_1 = nil
      end

      if attributes.key?(:'shipp_address_2')
        self.shipp_address_2 = attributes[:'shipp_address_2']
      end

      if attributes.key?(:'shipp_city')
        self.shipp_city = attributes[:'shipp_city']
      else
        self.shipp_city = nil
      end

      if attributes.key?(:'shipp_postcode')
        self.shipp_postcode = attributes[:'shipp_postcode']
      else
        self.shipp_postcode = nil
      end

      if attributes.key?(:'shipp_state')
        self.shipp_state = attributes[:'shipp_state']
      end

      if attributes.key?(:'shipp_country')
        self.shipp_country = attributes[:'shipp_country']
      else
        self.shipp_country = nil
      end

      if attributes.key?(:'shipp_company')
        self.shipp_company = attributes[:'shipp_company']
      end

      if attributes.key?(:'shipp_phone')
        self.shipp_phone = attributes[:'shipp_phone']
      end

      if attributes.key?(:'bill_first_name')
        self.bill_first_name = attributes[:'bill_first_name']
      end

      if attributes.key?(:'bill_last_name')
        self.bill_last_name = attributes[:'bill_last_name']
      end

      if attributes.key?(:'bill_address_1')
        self.bill_address_1 = attributes[:'bill_address_1']
      end

      if attributes.key?(:'bill_address_2')
        self.bill_address_2 = attributes[:'bill_address_2']
      end

      if attributes.key?(:'bill_city')
        self.bill_city = attributes[:'bill_city']
      end

      if attributes.key?(:'bill_postcode')
        self.bill_postcode = attributes[:'bill_postcode']
      end

      if attributes.key?(:'bill_state')
        self.bill_state = attributes[:'bill_state']
      end

      if attributes.key?(:'bill_country')
        self.bill_country = attributes[:'bill_country']
      end

      if attributes.key?(:'bill_company')
        self.bill_company = attributes[:'bill_company']
      end

      if attributes.key?(:'bill_phone')
        self.bill_phone = attributes[:'bill_phone']
      end

      if attributes.key?(:'response_fields')
        self.response_fields = attributes[:'response_fields']
      end

      if attributes.key?(:'order_item')
        if (value = attributes[:'order_item']).is_a?(Array)
          self.order_item = value
        end
      else
        self.order_item = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @customer_email.nil?
        invalid_properties.push('invalid value for "customer_email", customer_email cannot be nil.')
      end

      if !@coupons.nil? && @coupons.length < 1
        invalid_properties.push('invalid value for "coupons", number of items must be greater than or equal to 1.')
      end

      if @shipp_first_name.nil?
        invalid_properties.push('invalid value for "shipp_first_name", shipp_first_name cannot be nil.')
      end

      if @shipp_last_name.nil?
        invalid_properties.push('invalid value for "shipp_last_name", shipp_last_name cannot be nil.')
      end

      if @shipp_address_1.nil?
        invalid_properties.push('invalid value for "shipp_address_1", shipp_address_1 cannot be nil.')
      end

      if @shipp_city.nil?
        invalid_properties.push('invalid value for "shipp_city", shipp_city cannot be nil.')
      end

      if @shipp_postcode.nil?
        invalid_properties.push('invalid value for "shipp_postcode", shipp_postcode cannot be nil.')
      end

      if @shipp_country.nil?
        invalid_properties.push('invalid value for "shipp_country", shipp_country cannot be nil.')
      end

      if @order_item.nil?
        invalid_properties.push('invalid value for "order_item", order_item cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @customer_email.nil?
      return false if !@coupons.nil? && @coupons.length < 1
      return false if @shipp_first_name.nil?
      return false if @shipp_last_name.nil?
      return false if @shipp_address_1.nil?
      return false if @shipp_city.nil?
      return false if @shipp_postcode.nil?
      return false if @shipp_country.nil?
      return false if @order_item.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] coupons Value to be assigned
    def coupons=(coupons)
      if coupons.nil?
        fail ArgumentError, 'coupons cannot be nil'
      end

      if coupons.length < 1
        fail ArgumentError, 'invalid value for "coupons", number of items must be greater than or equal to 1.'
      end

      @coupons = coupons
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          customer_email == o.customer_email &&
          currency_id == o.currency_id &&
          store_id == o.store_id &&
          coupons == o.coupons &&
          shipp_first_name == o.shipp_first_name &&
          shipp_last_name == o.shipp_last_name &&
          shipp_address_1 == o.shipp_address_1 &&
          shipp_address_2 == o.shipp_address_2 &&
          shipp_city == o.shipp_city &&
          shipp_postcode == o.shipp_postcode &&
          shipp_state == o.shipp_state &&
          shipp_country == o.shipp_country &&
          shipp_company == o.shipp_company &&
          shipp_phone == o.shipp_phone &&
          bill_first_name == o.bill_first_name &&
          bill_last_name == o.bill_last_name &&
          bill_address_1 == o.bill_address_1 &&
          bill_address_2 == o.bill_address_2 &&
          bill_city == o.bill_city &&
          bill_postcode == o.bill_postcode &&
          bill_state == o.bill_state &&
          bill_country == o.bill_country &&
          bill_company == o.bill_company &&
          bill_phone == o.bill_phone &&
          response_fields == o.response_fields &&
          order_item == o.order_item
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [customer_email, currency_id, store_id, coupons, shipp_first_name, shipp_last_name, shipp_address_1, shipp_address_2, shipp_city, shipp_postcode, shipp_state, shipp_country, shipp_company, shipp_phone, bill_first_name, bill_last_name, bill_address_1, bill_address_2, bill_city, bill_postcode, bill_state, bill_country, bill_company, bill_phone, response_fields, order_item].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
