=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderShipmentAdd
    # Defines the order for which the shipment will be created
    attr_accessor :order_id

    # Store Id
    attr_accessor :store_id

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Defines company name that provide tracking of shipment
    attr_accessor :shipment_provider

    # Define shipping method
    attr_accessor :shipping_method

    # Defines items in the order that will be shipped
    attr_accessor :items

    # Send notifications to customer after shipment was created
    attr_accessor :send_notifications

    # Defines shipment's tracking numbers that have to be added</br> How set tracking numbers to appropriate carrier:<ul><li>tracking_numbers[]=a2c.demo1,a2c.demo2 - set default carrier</li><li>tracking_numbers[<b>carrier_id</b>]=a2c.demo - set appropriate carrier</li></ul>To get the list of carriers IDs that are available in your store, use the <a href = \"https://api2cart.com/docs/#/cart/CartInfo\">cart.info</a > method
    attr_accessor :tracking_numbers

    # This parameter is used for adjust stock.
    attr_accessor :adjust_stock

    # If the value is 'true' and order exist in our cache, we will use order.info from cache to prepare shipment items.
    attr_accessor :enable_cache

    # Defines custom tracking link
    attr_accessor :tracking_link

    # Defines shipment's status
    attr_accessor :is_shipped

    # Disable or enable check process status. Please note that the response will be slower due to additional requests to the store.
    attr_accessor :check_process_status

    # Use the latest platform API version
    attr_accessor :use_latest_api_version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_id' => :'order_id',
        :'store_id' => :'store_id',
        :'warehouse_id' => :'warehouse_id',
        :'shipment_provider' => :'shipment_provider',
        :'shipping_method' => :'shipping_method',
        :'items' => :'items',
        :'send_notifications' => :'send_notifications',
        :'tracking_numbers' => :'tracking_numbers',
        :'adjust_stock' => :'adjust_stock',
        :'enable_cache' => :'enable_cache',
        :'tracking_link' => :'tracking_link',
        :'is_shipped' => :'is_shipped',
        :'check_process_status' => :'check_process_status',
        :'use_latest_api_version' => :'use_latest_api_version'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'order_id' => :'String',
        :'store_id' => :'String',
        :'warehouse_id' => :'String',
        :'shipment_provider' => :'String',
        :'shipping_method' => :'String',
        :'items' => :'Array<OrderShipmentAddItemsInner>',
        :'send_notifications' => :'Boolean',
        :'tracking_numbers' => :'Array<OrderShipmentAddTrackingNumbersInner>',
        :'adjust_stock' => :'Boolean',
        :'enable_cache' => :'Boolean',
        :'tracking_link' => :'String',
        :'is_shipped' => :'Boolean',
        :'check_process_status' => :'Boolean',
        :'use_latest_api_version' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderShipmentAdd` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderShipmentAdd`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'shipment_provider')
        self.shipment_provider = attributes[:'shipment_provider']
      end

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'send_notifications')
        self.send_notifications = attributes[:'send_notifications']
      else
        self.send_notifications = false
      end

      if attributes.key?(:'tracking_numbers')
        if (value = attributes[:'tracking_numbers']).is_a?(Array)
          self.tracking_numbers = value
        end
      end

      if attributes.key?(:'adjust_stock')
        self.adjust_stock = attributes[:'adjust_stock']
      else
        self.adjust_stock = false
      end

      if attributes.key?(:'enable_cache')
        self.enable_cache = attributes[:'enable_cache']
      else
        self.enable_cache = false
      end

      if attributes.key?(:'tracking_link')
        self.tracking_link = attributes[:'tracking_link']
      end

      if attributes.key?(:'is_shipped')
        self.is_shipped = attributes[:'is_shipped']
      else
        self.is_shipped = true
      end

      if attributes.key?(:'check_process_status')
        self.check_process_status = attributes[:'check_process_status']
      else
        self.check_process_status = false
      end

      if attributes.key?(:'use_latest_api_version')
        self.use_latest_api_version = attributes[:'use_latest_api_version']
      else
        self.use_latest_api_version = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_id == o.order_id &&
          store_id == o.store_id &&
          warehouse_id == o.warehouse_id &&
          shipment_provider == o.shipment_provider &&
          shipping_method == o.shipping_method &&
          items == o.items &&
          send_notifications == o.send_notifications &&
          tracking_numbers == o.tracking_numbers &&
          adjust_stock == o.adjust_stock &&
          enable_cache == o.enable_cache &&
          tracking_link == o.tracking_link &&
          is_shipped == o.is_shipped &&
          check_process_status == o.check_process_status &&
          use_latest_api_version == o.use_latest_api_version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_id, store_id, warehouse_id, shipment_provider, shipping_method, items, send_notifications, tracking_numbers, adjust_stock, enable_cache, tracking_link, is_shipped, check_process_status, use_latest_api_version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
