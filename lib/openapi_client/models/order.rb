=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Order
    attr_accessor :id

    attr_accessor :order_id

    attr_accessor :basket_id

    attr_accessor :channel_id

    attr_accessor :customer

    attr_accessor :create_at

    attr_accessor :currency

    attr_accessor :shipping_address

    attr_accessor :billing_address

    attr_accessor :payment_method

    attr_accessor :shipping_method

    attr_accessor :shipping_methods

    attr_accessor :status

    attr_accessor :totals

    attr_accessor :total

    attr_accessor :discounts

    attr_accessor :order_products

    attr_accessor :bundles

    attr_accessor :modified_at

    attr_accessor :finished_time

    attr_accessor :comment

    attr_accessor :store_id

    attr_accessor :warehouses_ids

    attr_accessor :refunds

    attr_accessor :gift_message

    attr_accessor :order_details_url

    attr_accessor :additional_fields

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'order_id' => :'order_id',
        :'basket_id' => :'basket_id',
        :'channel_id' => :'channel_id',
        :'customer' => :'customer',
        :'create_at' => :'create_at',
        :'currency' => :'currency',
        :'shipping_address' => :'shipping_address',
        :'billing_address' => :'billing_address',
        :'payment_method' => :'payment_method',
        :'shipping_method' => :'shipping_method',
        :'shipping_methods' => :'shipping_methods',
        :'status' => :'status',
        :'totals' => :'totals',
        :'total' => :'total',
        :'discounts' => :'discounts',
        :'order_products' => :'order_products',
        :'bundles' => :'bundles',
        :'modified_at' => :'modified_at',
        :'finished_time' => :'finished_time',
        :'comment' => :'comment',
        :'store_id' => :'store_id',
        :'warehouses_ids' => :'warehouses_ids',
        :'refunds' => :'refunds',
        :'gift_message' => :'gift_message',
        :'order_details_url' => :'order_details_url',
        :'additional_fields' => :'additional_fields',
        :'custom_fields' => :'custom_fields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'order_id' => :'String',
        :'basket_id' => :'String',
        :'channel_id' => :'String',
        :'customer' => :'BaseCustomer',
        :'create_at' => :'A2CDateTime',
        :'currency' => :'Currency',
        :'shipping_address' => :'CustomerAddress',
        :'billing_address' => :'CustomerAddress',
        :'payment_method' => :'OrderPaymentMethod',
        :'shipping_method' => :'OrderShippingMethod',
        :'shipping_methods' => :'Array<OrderShippingMethod>',
        :'status' => :'OrderStatus',
        :'totals' => :'OrderTotals',
        :'total' => :'OrderTotal',
        :'discounts' => :'Array<OrderTotalsNewDiscount>',
        :'order_products' => :'Array<OrderItem>',
        :'bundles' => :'Array<OrderItem>',
        :'modified_at' => :'A2CDateTime',
        :'finished_time' => :'A2CDateTime',
        :'comment' => :'String',
        :'store_id' => :'String',
        :'warehouses_ids' => :'Array<String>',
        :'refunds' => :'Array<OrderRefund>',
        :'gift_message' => :'String',
        :'order_details_url' => :'String',
        :'additional_fields' => :'Object',
        :'custom_fields' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Order` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Order`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'basket_id')
        self.basket_id = attributes[:'basket_id']
      end

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.key?(:'create_at')
        self.create_at = attributes[:'create_at']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'shipping_address')
        self.shipping_address = attributes[:'shipping_address']
      end

      if attributes.key?(:'billing_address')
        self.billing_address = attributes[:'billing_address']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'shipping_method')
        self.shipping_method = attributes[:'shipping_method']
      end

      if attributes.key?(:'shipping_methods')
        if (value = attributes[:'shipping_methods']).is_a?(Array)
          self.shipping_methods = value
        end
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'totals')
        self.totals = attributes[:'totals']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'discounts')
        if (value = attributes[:'discounts']).is_a?(Array)
          self.discounts = value
        end
      end

      if attributes.key?(:'order_products')
        if (value = attributes[:'order_products']).is_a?(Array)
          self.order_products = value
        end
      end

      if attributes.key?(:'bundles')
        if (value = attributes[:'bundles']).is_a?(Array)
          self.bundles = value
        end
      end

      if attributes.key?(:'modified_at')
        self.modified_at = attributes[:'modified_at']
      end

      if attributes.key?(:'finished_time')
        self.finished_time = attributes[:'finished_time']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'warehouses_ids')
        if (value = attributes[:'warehouses_ids']).is_a?(Array)
          self.warehouses_ids = value
        end
      end

      if attributes.key?(:'refunds')
        if (value = attributes[:'refunds']).is_a?(Array)
          self.refunds = value
        end
      end

      if attributes.key?(:'gift_message')
        self.gift_message = attributes[:'gift_message']
      end

      if attributes.key?(:'order_details_url')
        self.order_details_url = attributes[:'order_details_url']
      end

      if attributes.key?(:'additional_fields')
        self.additional_fields = attributes[:'additional_fields']
      end

      if attributes.key?(:'custom_fields')
        self.custom_fields = attributes[:'custom_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          order_id == o.order_id &&
          basket_id == o.basket_id &&
          channel_id == o.channel_id &&
          customer == o.customer &&
          create_at == o.create_at &&
          currency == o.currency &&
          shipping_address == o.shipping_address &&
          billing_address == o.billing_address &&
          payment_method == o.payment_method &&
          shipping_method == o.shipping_method &&
          shipping_methods == o.shipping_methods &&
          status == o.status &&
          totals == o.totals &&
          total == o.total &&
          discounts == o.discounts &&
          order_products == o.order_products &&
          bundles == o.bundles &&
          modified_at == o.modified_at &&
          finished_time == o.finished_time &&
          comment == o.comment &&
          store_id == o.store_id &&
          warehouses_ids == o.warehouses_ids &&
          refunds == o.refunds &&
          gift_message == o.gift_message &&
          order_details_url == o.order_details_url &&
          additional_fields == o.additional_fields &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, order_id, basket_id, channel_id, customer, create_at, currency, shipping_address, billing_address, payment_method, shipping_method, shipping_methods, status, totals, total, discounts, order_products, bundles, modified_at, finished_time, comment, store_id, warehouses_ids, refunds, gift_message, order_details_url, additional_fields, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
