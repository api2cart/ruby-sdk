=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderAdd
    # Defines order's id
    attr_accessor :id

    # Defines the order id if it is supported by the cart
    attr_accessor :order_id

    # Defines store id where the order should be assigned
    attr_accessor :store_id

    # Channel ID
    attr_accessor :channel_id

    # Defines order status.
    attr_accessor :order_status

    # Create order with fulfillment status
    attr_accessor :fulfillment_status

    # Create order with financial status
    attr_accessor :financial_status

    # Defines the customer specified by email for whom order has to be created
    attr_accessor :customer_email

    # Specifies customer's first name
    attr_accessor :customer_first_name

    # Specifies customer’s last name
    attr_accessor :customer_last_name

    # Specifies customer’s phone
    attr_accessor :customer_phone

    # Specifies customer's address ISO code or name of country
    attr_accessor :customer_country

    # Specifies customer’s birthday
    attr_accessor :customer_birthday

    # Specifies customer’s fax
    attr_accessor :customer_fax

    # Defines order payment method.<br/>Setting order_payment_method on Shopify will also change financial_status field value to 'paid'
    attr_accessor :order_payment_method

    # Payment transaction id
    attr_accessor :transaction_id

    # Currency code of order
    attr_accessor :currency

    # Specifies an order creation date in format Y-m-d H:i:s
    attr_accessor :date

    # Specifies order's  modification date
    attr_accessor :date_modified

    # Specifies order's  finished date
    attr_accessor :date_finished

    # Specifies billing first name
    attr_accessor :bill_first_name

    # Specifies billing last name
    attr_accessor :bill_last_name

    # Specifies first billing address
    attr_accessor :bill_address_1

    # Specifies second billing address
    attr_accessor :bill_address_2

    # Specifies billing city
    attr_accessor :bill_city

    # Specifies billing postcode
    attr_accessor :bill_postcode

    # Specifies billing state code
    attr_accessor :bill_state

    # Specifies billing country code
    attr_accessor :bill_country

    # Specifies billing company
    attr_accessor :bill_company

    # Specifies billing phone
    attr_accessor :bill_phone

    # Specifies billing fax
    attr_accessor :bill_fax

    # Specifies shipping first name
    attr_accessor :shipp_first_name

    # Specifies shipping last name
    attr_accessor :shipp_last_name

    # Specifies first shipping address
    attr_accessor :shipp_address_1

    # Specifies second address line of a shipping street address
    attr_accessor :shipp_address_2

    # Specifies shipping city
    attr_accessor :shipp_city

    # Specifies shipping postcode
    attr_accessor :shipp_postcode

    # Specifies shipping state code
    attr_accessor :shipp_state

    # Specifies shipping country code
    attr_accessor :shipp_country

    # Specifies shipping company
    attr_accessor :shipp_company

    # Specifies shipping phone
    attr_accessor :shipp_phone

    # Specifies shipping fax
    attr_accessor :shipp_fax

    # Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts
    attr_accessor :subtotal_price

    # The value of tax cost for order
    attr_accessor :tax_price

    # Defines order's total price
    attr_accessor :total_price

    # Defines total paid amount for the order
    attr_accessor :total_paid

    # Defines the sum of all line item weights in grams for the order
    attr_accessor :total_weight

    # Indicates whether prices and subtotal includes tax.
    attr_accessor :prices_inc_tax

    # Specifies order's shipping price
    attr_accessor :shipping_price

    # Specifies order's shipping price tax
    attr_accessor :shipping_tax

    # Specifies order's discount
    attr_accessor :discount

    # Specifies order's coupon discount
    attr_accessor :coupon_discount

    # Discounts for order with gift certificates
    attr_accessor :gift_certificate_discount

    # Defines order shipping method
    attr_accessor :order_shipping_method

    # Defines tracking carrier id
    attr_accessor :carrier_id

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Coupons that will be applied to order
    attr_accessor :coupons

    # Order tags
    attr_accessor :tags

    # Specifies order comment
    attr_accessor :comment

    # Specifies admin's order comment
    attr_accessor :admin_comment

    # Specifies private admin's order comment
    attr_accessor :admin_private_comment

    # Send notifications to customer after order was created
    attr_accessor :send_notifications

    # Notify admin when new order was created.
    attr_accessor :send_admin_notifications

    # Identifying the system used to generate the order
    attr_accessor :external_source

    # The behaviour to use when updating inventory.<hr><div style=\"font-style:normal\">Values description:<div style=\"margin-left: 2%; padding-top: 2%\"><div style=\"font-size:85%\"><b>bypass</b> = Do not claim inventory </br></br><b>decrement_ignoring_policy</b> = Ignore the product's </br> inventory policy and claim amounts</br></br><b>decrement_obeying_policy</b> =  Obey the product's </br> inventory policy.</br></br></div></div></div>
    attr_accessor :inventory_behaviour

    # Defines whether the invoice is created automatically along with the order
    attr_accessor :create_invoice

    # Defines note attributes
    attr_accessor :note_attributes

    # Is cache clear required
    attr_accessor :clear_cache

    # The source of the order
    attr_accessor :origin

    attr_accessor :order_item

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'order_id' => :'order_id',
        :'store_id' => :'store_id',
        :'channel_id' => :'channel_id',
        :'order_status' => :'order_status',
        :'fulfillment_status' => :'fulfillment_status',
        :'financial_status' => :'financial_status',
        :'customer_email' => :'customer_email',
        :'customer_first_name' => :'customer_first_name',
        :'customer_last_name' => :'customer_last_name',
        :'customer_phone' => :'customer_phone',
        :'customer_country' => :'customer_country',
        :'customer_birthday' => :'customer_birthday',
        :'customer_fax' => :'customer_fax',
        :'order_payment_method' => :'order_payment_method',
        :'transaction_id' => :'transaction_id',
        :'currency' => :'currency',
        :'date' => :'date',
        :'date_modified' => :'date_modified',
        :'date_finished' => :'date_finished',
        :'bill_first_name' => :'bill_first_name',
        :'bill_last_name' => :'bill_last_name',
        :'bill_address_1' => :'bill_address_1',
        :'bill_address_2' => :'bill_address_2',
        :'bill_city' => :'bill_city',
        :'bill_postcode' => :'bill_postcode',
        :'bill_state' => :'bill_state',
        :'bill_country' => :'bill_country',
        :'bill_company' => :'bill_company',
        :'bill_phone' => :'bill_phone',
        :'bill_fax' => :'bill_fax',
        :'shipp_first_name' => :'shipp_first_name',
        :'shipp_last_name' => :'shipp_last_name',
        :'shipp_address_1' => :'shipp_address_1',
        :'shipp_address_2' => :'shipp_address_2',
        :'shipp_city' => :'shipp_city',
        :'shipp_postcode' => :'shipp_postcode',
        :'shipp_state' => :'shipp_state',
        :'shipp_country' => :'shipp_country',
        :'shipp_company' => :'shipp_company',
        :'shipp_phone' => :'shipp_phone',
        :'shipp_fax' => :'shipp_fax',
        :'subtotal_price' => :'subtotal_price',
        :'tax_price' => :'tax_price',
        :'total_price' => :'total_price',
        :'total_paid' => :'total_paid',
        :'total_weight' => :'total_weight',
        :'prices_inc_tax' => :'prices_inc_tax',
        :'shipping_price' => :'shipping_price',
        :'shipping_tax' => :'shipping_tax',
        :'discount' => :'discount',
        :'coupon_discount' => :'coupon_discount',
        :'gift_certificate_discount' => :'gift_certificate_discount',
        :'order_shipping_method' => :'order_shipping_method',
        :'carrier_id' => :'carrier_id',
        :'warehouse_id' => :'warehouse_id',
        :'coupons' => :'coupons',
        :'tags' => :'tags',
        :'comment' => :'comment',
        :'admin_comment' => :'admin_comment',
        :'admin_private_comment' => :'admin_private_comment',
        :'send_notifications' => :'send_notifications',
        :'send_admin_notifications' => :'send_admin_notifications',
        :'external_source' => :'external_source',
        :'inventory_behaviour' => :'inventory_behaviour',
        :'create_invoice' => :'create_invoice',
        :'note_attributes' => :'note_attributes',
        :'clear_cache' => :'clear_cache',
        :'origin' => :'origin',
        :'order_item' => :'order_item'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'order_id' => :'String',
        :'store_id' => :'String',
        :'channel_id' => :'String',
        :'order_status' => :'String',
        :'fulfillment_status' => :'String',
        :'financial_status' => :'String',
        :'customer_email' => :'String',
        :'customer_first_name' => :'String',
        :'customer_last_name' => :'String',
        :'customer_phone' => :'String',
        :'customer_country' => :'String',
        :'customer_birthday' => :'String',
        :'customer_fax' => :'String',
        :'order_payment_method' => :'String',
        :'transaction_id' => :'String',
        :'currency' => :'String',
        :'date' => :'String',
        :'date_modified' => :'String',
        :'date_finished' => :'String',
        :'bill_first_name' => :'String',
        :'bill_last_name' => :'String',
        :'bill_address_1' => :'String',
        :'bill_address_2' => :'String',
        :'bill_city' => :'String',
        :'bill_postcode' => :'String',
        :'bill_state' => :'String',
        :'bill_country' => :'String',
        :'bill_company' => :'String',
        :'bill_phone' => :'String',
        :'bill_fax' => :'String',
        :'shipp_first_name' => :'String',
        :'shipp_last_name' => :'String',
        :'shipp_address_1' => :'String',
        :'shipp_address_2' => :'String',
        :'shipp_city' => :'String',
        :'shipp_postcode' => :'String',
        :'shipp_state' => :'String',
        :'shipp_country' => :'String',
        :'shipp_company' => :'String',
        :'shipp_phone' => :'String',
        :'shipp_fax' => :'String',
        :'subtotal_price' => :'Float',
        :'tax_price' => :'Float',
        :'total_price' => :'Float',
        :'total_paid' => :'Float',
        :'total_weight' => :'Integer',
        :'prices_inc_tax' => :'Boolean',
        :'shipping_price' => :'Float',
        :'shipping_tax' => :'Float',
        :'discount' => :'Float',
        :'coupon_discount' => :'Float',
        :'gift_certificate_discount' => :'Float',
        :'order_shipping_method' => :'String',
        :'carrier_id' => :'String',
        :'warehouse_id' => :'String',
        :'coupons' => :'Array<String>',
        :'tags' => :'String',
        :'comment' => :'String',
        :'admin_comment' => :'String',
        :'admin_private_comment' => :'String',
        :'send_notifications' => :'Boolean',
        :'send_admin_notifications' => :'Boolean',
        :'external_source' => :'String',
        :'inventory_behaviour' => :'String',
        :'create_invoice' => :'Boolean',
        :'note_attributes' => :'Array<OrderAddNoteAttributesInner>',
        :'clear_cache' => :'Boolean',
        :'origin' => :'String',
        :'order_item' => :'Array<OrderAddOrderItemInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderAdd` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderAdd`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'order_status')
        self.order_status = attributes[:'order_status']
      else
        self.order_status = nil
      end

      if attributes.key?(:'fulfillment_status')
        self.fulfillment_status = attributes[:'fulfillment_status']
      end

      if attributes.key?(:'financial_status')
        self.financial_status = attributes[:'financial_status']
      end

      if attributes.key?(:'customer_email')
        self.customer_email = attributes[:'customer_email']
      else
        self.customer_email = nil
      end

      if attributes.key?(:'customer_first_name')
        self.customer_first_name = attributes[:'customer_first_name']
      end

      if attributes.key?(:'customer_last_name')
        self.customer_last_name = attributes[:'customer_last_name']
      end

      if attributes.key?(:'customer_phone')
        self.customer_phone = attributes[:'customer_phone']
      end

      if attributes.key?(:'customer_country')
        self.customer_country = attributes[:'customer_country']
      end

      if attributes.key?(:'customer_birthday')
        self.customer_birthday = attributes[:'customer_birthday']
      end

      if attributes.key?(:'customer_fax')
        self.customer_fax = attributes[:'customer_fax']
      end

      if attributes.key?(:'order_payment_method')
        self.order_payment_method = attributes[:'order_payment_method']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'date_modified')
        self.date_modified = attributes[:'date_modified']
      end

      if attributes.key?(:'date_finished')
        self.date_finished = attributes[:'date_finished']
      end

      if attributes.key?(:'bill_first_name')
        self.bill_first_name = attributes[:'bill_first_name']
      else
        self.bill_first_name = nil
      end

      if attributes.key?(:'bill_last_name')
        self.bill_last_name = attributes[:'bill_last_name']
      else
        self.bill_last_name = nil
      end

      if attributes.key?(:'bill_address_1')
        self.bill_address_1 = attributes[:'bill_address_1']
      else
        self.bill_address_1 = nil
      end

      if attributes.key?(:'bill_address_2')
        self.bill_address_2 = attributes[:'bill_address_2']
      end

      if attributes.key?(:'bill_city')
        self.bill_city = attributes[:'bill_city']
      else
        self.bill_city = nil
      end

      if attributes.key?(:'bill_postcode')
        self.bill_postcode = attributes[:'bill_postcode']
      else
        self.bill_postcode = nil
      end

      if attributes.key?(:'bill_state')
        self.bill_state = attributes[:'bill_state']
      else
        self.bill_state = nil
      end

      if attributes.key?(:'bill_country')
        self.bill_country = attributes[:'bill_country']
      else
        self.bill_country = nil
      end

      if attributes.key?(:'bill_company')
        self.bill_company = attributes[:'bill_company']
      end

      if attributes.key?(:'bill_phone')
        self.bill_phone = attributes[:'bill_phone']
      end

      if attributes.key?(:'bill_fax')
        self.bill_fax = attributes[:'bill_fax']
      end

      if attributes.key?(:'shipp_first_name')
        self.shipp_first_name = attributes[:'shipp_first_name']
      end

      if attributes.key?(:'shipp_last_name')
        self.shipp_last_name = attributes[:'shipp_last_name']
      end

      if attributes.key?(:'shipp_address_1')
        self.shipp_address_1 = attributes[:'shipp_address_1']
      end

      if attributes.key?(:'shipp_address_2')
        self.shipp_address_2 = attributes[:'shipp_address_2']
      end

      if attributes.key?(:'shipp_city')
        self.shipp_city = attributes[:'shipp_city']
      end

      if attributes.key?(:'shipp_postcode')
        self.shipp_postcode = attributes[:'shipp_postcode']
      end

      if attributes.key?(:'shipp_state')
        self.shipp_state = attributes[:'shipp_state']
      end

      if attributes.key?(:'shipp_country')
        self.shipp_country = attributes[:'shipp_country']
      end

      if attributes.key?(:'shipp_company')
        self.shipp_company = attributes[:'shipp_company']
      end

      if attributes.key?(:'shipp_phone')
        self.shipp_phone = attributes[:'shipp_phone']
      end

      if attributes.key?(:'shipp_fax')
        self.shipp_fax = attributes[:'shipp_fax']
      end

      if attributes.key?(:'subtotal_price')
        self.subtotal_price = attributes[:'subtotal_price']
      end

      if attributes.key?(:'tax_price')
        self.tax_price = attributes[:'tax_price']
      else
        self.tax_price = 0
      end

      if attributes.key?(:'total_price')
        self.total_price = attributes[:'total_price']
      end

      if attributes.key?(:'total_paid')
        self.total_paid = attributes[:'total_paid']
      end

      if attributes.key?(:'total_weight')
        self.total_weight = attributes[:'total_weight']
      end

      if attributes.key?(:'prices_inc_tax')
        self.prices_inc_tax = attributes[:'prices_inc_tax']
      else
        self.prices_inc_tax = false
      end

      if attributes.key?(:'shipping_price')
        self.shipping_price = attributes[:'shipping_price']
      else
        self.shipping_price = 0
      end

      if attributes.key?(:'shipping_tax')
        self.shipping_tax = attributes[:'shipping_tax']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'coupon_discount')
        self.coupon_discount = attributes[:'coupon_discount']
      end

      if attributes.key?(:'gift_certificate_discount')
        self.gift_certificate_discount = attributes[:'gift_certificate_discount']
      end

      if attributes.key?(:'order_shipping_method')
        self.order_shipping_method = attributes[:'order_shipping_method']
      end

      if attributes.key?(:'carrier_id')
        self.carrier_id = attributes[:'carrier_id']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'coupons')
        if (value = attributes[:'coupons']).is_a?(Array)
          self.coupons = value
        end
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'admin_comment')
        self.admin_comment = attributes[:'admin_comment']
      end

      if attributes.key?(:'admin_private_comment')
        self.admin_private_comment = attributes[:'admin_private_comment']
      end

      if attributes.key?(:'send_notifications')
        self.send_notifications = attributes[:'send_notifications']
      else
        self.send_notifications = false
      end

      if attributes.key?(:'send_admin_notifications')
        self.send_admin_notifications = attributes[:'send_admin_notifications']
      else
        self.send_admin_notifications = false
      end

      if attributes.key?(:'external_source')
        self.external_source = attributes[:'external_source']
      end

      if attributes.key?(:'inventory_behaviour')
        self.inventory_behaviour = attributes[:'inventory_behaviour']
      else
        self.inventory_behaviour = 'bypass'
      end

      if attributes.key?(:'create_invoice')
        self.create_invoice = attributes[:'create_invoice']
      else
        self.create_invoice = false
      end

      if attributes.key?(:'note_attributes')
        if (value = attributes[:'note_attributes']).is_a?(Array)
          self.note_attributes = value
        end
      end

      if attributes.key?(:'clear_cache')
        self.clear_cache = attributes[:'clear_cache']
      else
        self.clear_cache = true
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'order_item')
        if (value = attributes[:'order_item']).is_a?(Array)
          self.order_item = value
        end
      else
        self.order_item = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @order_status.nil?
        invalid_properties.push('invalid value for "order_status", order_status cannot be nil.')
      end

      if @customer_email.nil?
        invalid_properties.push('invalid value for "customer_email", customer_email cannot be nil.')
      end

      if @bill_first_name.nil?
        invalid_properties.push('invalid value for "bill_first_name", bill_first_name cannot be nil.')
      end

      if @bill_last_name.nil?
        invalid_properties.push('invalid value for "bill_last_name", bill_last_name cannot be nil.')
      end

      if @bill_address_1.nil?
        invalid_properties.push('invalid value for "bill_address_1", bill_address_1 cannot be nil.')
      end

      if @bill_city.nil?
        invalid_properties.push('invalid value for "bill_city", bill_city cannot be nil.')
      end

      if @bill_postcode.nil?
        invalid_properties.push('invalid value for "bill_postcode", bill_postcode cannot be nil.')
      end

      if @bill_state.nil?
        invalid_properties.push('invalid value for "bill_state", bill_state cannot be nil.')
      end

      if @bill_country.nil?
        invalid_properties.push('invalid value for "bill_country", bill_country cannot be nil.')
      end

      if !@coupons.nil? && @coupons.length < 1
        invalid_properties.push('invalid value for "coupons", number of items must be greater than or equal to 1.')
      end

      if @order_item.nil?
        invalid_properties.push('invalid value for "order_item", order_item cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @order_status.nil?
      return false if @customer_email.nil?
      return false if @bill_first_name.nil?
      return false if @bill_last_name.nil?
      return false if @bill_address_1.nil?
      return false if @bill_city.nil?
      return false if @bill_postcode.nil?
      return false if @bill_state.nil?
      return false if @bill_country.nil?
      return false if !@coupons.nil? && @coupons.length < 1
      return false if @order_item.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] coupons Value to be assigned
    def coupons=(coupons)
      if coupons.nil?
        fail ArgumentError, 'coupons cannot be nil'
      end

      if coupons.length < 1
        fail ArgumentError, 'invalid value for "coupons", number of items must be greater than or equal to 1.'
      end

      @coupons = coupons
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          order_id == o.order_id &&
          store_id == o.store_id &&
          channel_id == o.channel_id &&
          order_status == o.order_status &&
          fulfillment_status == o.fulfillment_status &&
          financial_status == o.financial_status &&
          customer_email == o.customer_email &&
          customer_first_name == o.customer_first_name &&
          customer_last_name == o.customer_last_name &&
          customer_phone == o.customer_phone &&
          customer_country == o.customer_country &&
          customer_birthday == o.customer_birthday &&
          customer_fax == o.customer_fax &&
          order_payment_method == o.order_payment_method &&
          transaction_id == o.transaction_id &&
          currency == o.currency &&
          date == o.date &&
          date_modified == o.date_modified &&
          date_finished == o.date_finished &&
          bill_first_name == o.bill_first_name &&
          bill_last_name == o.bill_last_name &&
          bill_address_1 == o.bill_address_1 &&
          bill_address_2 == o.bill_address_2 &&
          bill_city == o.bill_city &&
          bill_postcode == o.bill_postcode &&
          bill_state == o.bill_state &&
          bill_country == o.bill_country &&
          bill_company == o.bill_company &&
          bill_phone == o.bill_phone &&
          bill_fax == o.bill_fax &&
          shipp_first_name == o.shipp_first_name &&
          shipp_last_name == o.shipp_last_name &&
          shipp_address_1 == o.shipp_address_1 &&
          shipp_address_2 == o.shipp_address_2 &&
          shipp_city == o.shipp_city &&
          shipp_postcode == o.shipp_postcode &&
          shipp_state == o.shipp_state &&
          shipp_country == o.shipp_country &&
          shipp_company == o.shipp_company &&
          shipp_phone == o.shipp_phone &&
          shipp_fax == o.shipp_fax &&
          subtotal_price == o.subtotal_price &&
          tax_price == o.tax_price &&
          total_price == o.total_price &&
          total_paid == o.total_paid &&
          total_weight == o.total_weight &&
          prices_inc_tax == o.prices_inc_tax &&
          shipping_price == o.shipping_price &&
          shipping_tax == o.shipping_tax &&
          discount == o.discount &&
          coupon_discount == o.coupon_discount &&
          gift_certificate_discount == o.gift_certificate_discount &&
          order_shipping_method == o.order_shipping_method &&
          carrier_id == o.carrier_id &&
          warehouse_id == o.warehouse_id &&
          coupons == o.coupons &&
          tags == o.tags &&
          comment == o.comment &&
          admin_comment == o.admin_comment &&
          admin_private_comment == o.admin_private_comment &&
          send_notifications == o.send_notifications &&
          send_admin_notifications == o.send_admin_notifications &&
          external_source == o.external_source &&
          inventory_behaviour == o.inventory_behaviour &&
          create_invoice == o.create_invoice &&
          note_attributes == o.note_attributes &&
          clear_cache == o.clear_cache &&
          origin == o.origin &&
          order_item == o.order_item
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, order_id, store_id, channel_id, order_status, fulfillment_status, financial_status, customer_email, customer_first_name, customer_last_name, customer_phone, customer_country, customer_birthday, customer_fax, order_payment_method, transaction_id, currency, date, date_modified, date_finished, bill_first_name, bill_last_name, bill_address_1, bill_address_2, bill_city, bill_postcode, bill_state, bill_country, bill_company, bill_phone, bill_fax, shipp_first_name, shipp_last_name, shipp_address_1, shipp_address_2, shipp_city, shipp_postcode, shipp_state, shipp_country, shipp_company, shipp_phone, shipp_fax, subtotal_price, tax_price, total_price, total_paid, total_weight, prices_inc_tax, shipping_price, shipping_tax, discount, coupon_discount, gift_certificate_discount, order_shipping_method, carrier_id, warehouse_id, coupons, tags, comment, admin_comment, admin_private_comment, send_notifications, send_admin_notifications, external_source, inventory_behaviour, create_invoice, note_attributes, clear_cache, origin, order_item].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
