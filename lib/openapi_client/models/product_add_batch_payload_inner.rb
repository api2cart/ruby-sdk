=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProductAddBatchPayloadInner
    attr_accessor :name

    attr_accessor :description

    attr_accessor :short_description

    attr_accessor :sku

    attr_accessor :model

    attr_accessor :asin

    attr_accessor :upc

    attr_accessor :ean

    attr_accessor :gtin

    attr_accessor :mpn

    attr_accessor :barcode

    attr_accessor :price

    attr_accessor :old_price

    attr_accessor :cost_price

    attr_accessor :special_price

    attr_accessor :sprice_create

    attr_accessor :sprice_expire

    attr_accessor :advanced_prices

    attr_accessor :fixed_cost_shipping_price

    attr_accessor :quantity

    attr_accessor :manage_stock

    attr_accessor :product_type

    attr_accessor :marketplace_item_properties

    attr_accessor :is_free_shipping

    attr_accessor :taxable

    attr_accessor :status

    attr_accessor :condition

    attr_accessor :visible

    attr_accessor :available_for_view

    attr_accessor :available_for_sale

    attr_accessor :is_virtual

    attr_accessor :in_stock

    attr_accessor :type

    attr_accessor :downloadable

    attr_accessor :weight

    attr_accessor :length

    attr_accessor :width

    attr_accessor :height

    attr_accessor :weight_unit

    attr_accessor :dimensions_unit

    attr_accessor :store_id

    attr_accessor :lang_id

    attr_accessor :category_id

    attr_accessor :warehouse_id

    attr_accessor :categories_ids

    attr_accessor :related_products_ids

    attr_accessor :up_sell_products_ids

    attr_accessor :cross_sell_products_ids

    attr_accessor :stores_ids

    attr_accessor :tax_class_id

    attr_accessor :meta_title

    attr_accessor :meta_description

    attr_accessor :meta_keywords

    attr_accessor :search_keywords

    attr_accessor :harmonized_system_code

    attr_accessor :url

    attr_accessor :seo_url

    attr_accessor :manufacturer

    attr_accessor :manufacturer_id

    attr_accessor :backorder_status

    attr_accessor :images

    attr_accessor :tags

    attr_accessor :files

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'description' => :'description',
        :'short_description' => :'short_description',
        :'sku' => :'sku',
        :'model' => :'model',
        :'asin' => :'asin',
        :'upc' => :'upc',
        :'ean' => :'ean',
        :'gtin' => :'gtin',
        :'mpn' => :'mpn',
        :'barcode' => :'barcode',
        :'price' => :'price',
        :'old_price' => :'old_price',
        :'cost_price' => :'cost_price',
        :'special_price' => :'special_price',
        :'sprice_create' => :'sprice_create',
        :'sprice_expire' => :'sprice_expire',
        :'advanced_prices' => :'advanced_prices',
        :'fixed_cost_shipping_price' => :'fixed_cost_shipping_price',
        :'quantity' => :'quantity',
        :'manage_stock' => :'manage_stock',
        :'product_type' => :'product_type',
        :'marketplace_item_properties' => :'marketplace_item_properties',
        :'is_free_shipping' => :'is_free_shipping',
        :'taxable' => :'taxable',
        :'status' => :'status',
        :'condition' => :'condition',
        :'visible' => :'visible',
        :'available_for_view' => :'available_for_view',
        :'available_for_sale' => :'available_for_sale',
        :'is_virtual' => :'is_virtual',
        :'in_stock' => :'in_stock',
        :'type' => :'type',
        :'downloadable' => :'downloadable',
        :'weight' => :'weight',
        :'length' => :'length',
        :'width' => :'width',
        :'height' => :'height',
        :'weight_unit' => :'weight_unit',
        :'dimensions_unit' => :'dimensions_unit',
        :'store_id' => :'store_id',
        :'lang_id' => :'lang_id',
        :'category_id' => :'category_id',
        :'warehouse_id' => :'warehouse_id',
        :'categories_ids' => :'categories_ids',
        :'related_products_ids' => :'related_products_ids',
        :'up_sell_products_ids' => :'up_sell_products_ids',
        :'cross_sell_products_ids' => :'cross_sell_products_ids',
        :'stores_ids' => :'stores_ids',
        :'tax_class_id' => :'tax_class_id',
        :'meta_title' => :'meta_title',
        :'meta_description' => :'meta_description',
        :'meta_keywords' => :'meta_keywords',
        :'search_keywords' => :'search_keywords',
        :'harmonized_system_code' => :'harmonized_system_code',
        :'url' => :'url',
        :'seo_url' => :'seo_url',
        :'manufacturer' => :'manufacturer',
        :'manufacturer_id' => :'manufacturer_id',
        :'backorder_status' => :'backorder_status',
        :'images' => :'images',
        :'tags' => :'tags',
        :'files' => :'files'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'description' => :'String',
        :'short_description' => :'String',
        :'sku' => :'String',
        :'model' => :'String',
        :'asin' => :'String',
        :'upc' => :'String',
        :'ean' => :'String',
        :'gtin' => :'String',
        :'mpn' => :'String',
        :'barcode' => :'String',
        :'price' => :'Float',
        :'old_price' => :'Float',
        :'cost_price' => :'Float',
        :'special_price' => :'Float',
        :'sprice_create' => :'String',
        :'sprice_expire' => :'String',
        :'advanced_prices' => :'Array<ProductAddBatchPayloadInnerAdvancedPricesInner>',
        :'fixed_cost_shipping_price' => :'Float',
        :'quantity' => :'Float',
        :'manage_stock' => :'Boolean',
        :'product_type' => :'String',
        :'marketplace_item_properties' => :'Object',
        :'is_free_shipping' => :'Boolean',
        :'taxable' => :'Boolean',
        :'status' => :'String',
        :'condition' => :'String',
        :'visible' => :'String',
        :'available_for_view' => :'Boolean',
        :'available_for_sale' => :'Boolean',
        :'is_virtual' => :'Boolean',
        :'in_stock' => :'Boolean',
        :'type' => :'String',
        :'downloadable' => :'Boolean',
        :'weight' => :'Float',
        :'length' => :'Float',
        :'width' => :'Float',
        :'height' => :'Float',
        :'weight_unit' => :'String',
        :'dimensions_unit' => :'String',
        :'store_id' => :'String',
        :'lang_id' => :'String',
        :'category_id' => :'String',
        :'warehouse_id' => :'String',
        :'categories_ids' => :'Array<String>',
        :'related_products_ids' => :'Array<String>',
        :'up_sell_products_ids' => :'Array<String>',
        :'cross_sell_products_ids' => :'Array<String>',
        :'stores_ids' => :'Array<String>',
        :'tax_class_id' => :'String',
        :'meta_title' => :'String',
        :'meta_description' => :'String',
        :'meta_keywords' => :'Array<String>',
        :'search_keywords' => :'Array<String>',
        :'harmonized_system_code' => :'String',
        :'url' => :'String',
        :'seo_url' => :'String',
        :'manufacturer' => :'String',
        :'manufacturer_id' => :'String',
        :'backorder_status' => :'String',
        :'images' => :'Array<ProductAddBatchPayloadInnerImagesInner>',
        :'tags' => :'Array<String>',
        :'files' => :'Array<ProductAddFilesInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProductAddBatchPayloadInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProductAddBatchPayloadInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'asin')
        self.asin = attributes[:'asin']
      end

      if attributes.key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.key?(:'ean')
        self.ean = attributes[:'ean']
      end

      if attributes.key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

      if attributes.key?(:'mpn')
        self.mpn = attributes[:'mpn']
      end

      if attributes.key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'old_price')
        self.old_price = attributes[:'old_price']
      end

      if attributes.key?(:'cost_price')
        self.cost_price = attributes[:'cost_price']
      end

      if attributes.key?(:'special_price')
        self.special_price = attributes[:'special_price']
      end

      if attributes.key?(:'sprice_create')
        self.sprice_create = attributes[:'sprice_create']
      end

      if attributes.key?(:'sprice_expire')
        self.sprice_expire = attributes[:'sprice_expire']
      end

      if attributes.key?(:'advanced_prices')
        if (value = attributes[:'advanced_prices']).is_a?(Array)
          self.advanced_prices = value
        end
      end

      if attributes.key?(:'fixed_cost_shipping_price')
        self.fixed_cost_shipping_price = attributes[:'fixed_cost_shipping_price']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'manage_stock')
        self.manage_stock = attributes[:'manage_stock']
      end

      if attributes.key?(:'product_type')
        self.product_type = attributes[:'product_type']
      end

      if attributes.key?(:'marketplace_item_properties')
        self.marketplace_item_properties = attributes[:'marketplace_item_properties']
      end

      if attributes.key?(:'is_free_shipping')
        self.is_free_shipping = attributes[:'is_free_shipping']
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.key?(:'visible')
        self.visible = attributes[:'visible']
      end

      if attributes.key?(:'available_for_view')
        self.available_for_view = attributes[:'available_for_view']
      end

      if attributes.key?(:'available_for_sale')
        self.available_for_sale = attributes[:'available_for_sale']
      end

      if attributes.key?(:'is_virtual')
        self.is_virtual = attributes[:'is_virtual']
      end

      if attributes.key?(:'in_stock')
        self.in_stock = attributes[:'in_stock']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'downloadable')
        self.downloadable = attributes[:'downloadable']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

      if attributes.key?(:'dimensions_unit')
        self.dimensions_unit = attributes[:'dimensions_unit']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'lang_id')
        self.lang_id = attributes[:'lang_id']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'categories_ids')
        if (value = attributes[:'categories_ids']).is_a?(Array)
          self.categories_ids = value
        end
      end

      if attributes.key?(:'related_products_ids')
        if (value = attributes[:'related_products_ids']).is_a?(Array)
          self.related_products_ids = value
        end
      end

      if attributes.key?(:'up_sell_products_ids')
        if (value = attributes[:'up_sell_products_ids']).is_a?(Array)
          self.up_sell_products_ids = value
        end
      end

      if attributes.key?(:'cross_sell_products_ids')
        if (value = attributes[:'cross_sell_products_ids']).is_a?(Array)
          self.cross_sell_products_ids = value
        end
      end

      if attributes.key?(:'stores_ids')
        if (value = attributes[:'stores_ids']).is_a?(Array)
          self.stores_ids = value
        end
      end

      if attributes.key?(:'tax_class_id')
        self.tax_class_id = attributes[:'tax_class_id']
      end

      if attributes.key?(:'meta_title')
        self.meta_title = attributes[:'meta_title']
      end

      if attributes.key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.key?(:'meta_keywords')
        if (value = attributes[:'meta_keywords']).is_a?(Array)
          self.meta_keywords = value
        end
      end

      if attributes.key?(:'search_keywords')
        if (value = attributes[:'search_keywords']).is_a?(Array)
          self.search_keywords = value
        end
      end

      if attributes.key?(:'harmonized_system_code')
        self.harmonized_system_code = attributes[:'harmonized_system_code']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'seo_url')
        self.seo_url = attributes[:'seo_url']
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'manufacturer_id')
        self.manufacturer_id = attributes[:'manufacturer_id']
      end

      if attributes.key?(:'backorder_status')
        self.backorder_status = attributes[:'backorder_status']
      end

      if attributes.key?(:'images')
        if (value = attributes[:'images']).is_a?(Array)
          self.images = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@categories_ids.nil? && @categories_ids.length < 1
        invalid_properties.push('invalid value for "categories_ids", number of items must be greater than or equal to 1.')
      end

      if !@related_products_ids.nil? && @related_products_ids.length < 1
        invalid_properties.push('invalid value for "related_products_ids", number of items must be greater than or equal to 1.')
      end

      if !@up_sell_products_ids.nil? && @up_sell_products_ids.length < 1
        invalid_properties.push('invalid value for "up_sell_products_ids", number of items must be greater than or equal to 1.')
      end

      if !@cross_sell_products_ids.nil? && @cross_sell_products_ids.length < 1
        invalid_properties.push('invalid value for "cross_sell_products_ids", number of items must be greater than or equal to 1.')
      end

      if !@stores_ids.nil? && @stores_ids.length < 1
        invalid_properties.push('invalid value for "stores_ids", number of items must be greater than or equal to 1.')
      end

      if !@meta_keywords.nil? && @meta_keywords.length < 1
        invalid_properties.push('invalid value for "meta_keywords", number of items must be greater than or equal to 1.')
      end

      if !@search_keywords.nil? && @search_keywords.length < 1
        invalid_properties.push('invalid value for "search_keywords", number of items must be greater than or equal to 1.')
      end

      if !@images.nil? && @images.length < 1
        invalid_properties.push('invalid value for "images", number of items must be greater than or equal to 1.')
      end

      if !@tags.nil? && @tags.length < 1
        invalid_properties.push('invalid value for "tags", number of items must be greater than or equal to 1.')
      end

      if !@files.nil? && @files.length < 1
        invalid_properties.push('invalid value for "files", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@categories_ids.nil? && @categories_ids.length < 1
      return false if !@related_products_ids.nil? && @related_products_ids.length < 1
      return false if !@up_sell_products_ids.nil? && @up_sell_products_ids.length < 1
      return false if !@cross_sell_products_ids.nil? && @cross_sell_products_ids.length < 1
      return false if !@stores_ids.nil? && @stores_ids.length < 1
      return false if !@meta_keywords.nil? && @meta_keywords.length < 1
      return false if !@search_keywords.nil? && @search_keywords.length < 1
      return false if !@images.nil? && @images.length < 1
      return false if !@tags.nil? && @tags.length < 1
      return false if !@files.nil? && @files.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] categories_ids Value to be assigned
    def categories_ids=(categories_ids)
      if categories_ids.nil?
        fail ArgumentError, 'categories_ids cannot be nil'
      end

      if categories_ids.length < 1
        fail ArgumentError, 'invalid value for "categories_ids", number of items must be greater than or equal to 1.'
      end

      @categories_ids = categories_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] related_products_ids Value to be assigned
    def related_products_ids=(related_products_ids)
      if related_products_ids.nil?
        fail ArgumentError, 'related_products_ids cannot be nil'
      end

      if related_products_ids.length < 1
        fail ArgumentError, 'invalid value for "related_products_ids", number of items must be greater than or equal to 1.'
      end

      @related_products_ids = related_products_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] up_sell_products_ids Value to be assigned
    def up_sell_products_ids=(up_sell_products_ids)
      if up_sell_products_ids.nil?
        fail ArgumentError, 'up_sell_products_ids cannot be nil'
      end

      if up_sell_products_ids.length < 1
        fail ArgumentError, 'invalid value for "up_sell_products_ids", number of items must be greater than or equal to 1.'
      end

      @up_sell_products_ids = up_sell_products_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] cross_sell_products_ids Value to be assigned
    def cross_sell_products_ids=(cross_sell_products_ids)
      if cross_sell_products_ids.nil?
        fail ArgumentError, 'cross_sell_products_ids cannot be nil'
      end

      if cross_sell_products_ids.length < 1
        fail ArgumentError, 'invalid value for "cross_sell_products_ids", number of items must be greater than or equal to 1.'
      end

      @cross_sell_products_ids = cross_sell_products_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] stores_ids Value to be assigned
    def stores_ids=(stores_ids)
      if stores_ids.nil?
        fail ArgumentError, 'stores_ids cannot be nil'
      end

      if stores_ids.length < 1
        fail ArgumentError, 'invalid value for "stores_ids", number of items must be greater than or equal to 1.'
      end

      @stores_ids = stores_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] meta_keywords Value to be assigned
    def meta_keywords=(meta_keywords)
      if meta_keywords.nil?
        fail ArgumentError, 'meta_keywords cannot be nil'
      end

      if meta_keywords.length < 1
        fail ArgumentError, 'invalid value for "meta_keywords", number of items must be greater than or equal to 1.'
      end

      @meta_keywords = meta_keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] search_keywords Value to be assigned
    def search_keywords=(search_keywords)
      if search_keywords.nil?
        fail ArgumentError, 'search_keywords cannot be nil'
      end

      if search_keywords.length < 1
        fail ArgumentError, 'invalid value for "search_keywords", number of items must be greater than or equal to 1.'
      end

      @search_keywords = search_keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] images Value to be assigned
    def images=(images)
      if images.nil?
        fail ArgumentError, 'images cannot be nil'
      end

      if images.length < 1
        fail ArgumentError, 'invalid value for "images", number of items must be greater than or equal to 1.'
      end

      @images = images
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if tags.nil?
        fail ArgumentError, 'tags cannot be nil'
      end

      if tags.length < 1
        fail ArgumentError, 'invalid value for "tags", number of items must be greater than or equal to 1.'
      end

      @tags = tags
    end

    # Custom attribute writer method with validation
    # @param [Object] files Value to be assigned
    def files=(files)
      if files.nil?
        fail ArgumentError, 'files cannot be nil'
      end

      if files.length < 1
        fail ArgumentError, 'invalid value for "files", number of items must be greater than or equal to 1.'
      end

      @files = files
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          description == o.description &&
          short_description == o.short_description &&
          sku == o.sku &&
          model == o.model &&
          asin == o.asin &&
          upc == o.upc &&
          ean == o.ean &&
          gtin == o.gtin &&
          mpn == o.mpn &&
          barcode == o.barcode &&
          price == o.price &&
          old_price == o.old_price &&
          cost_price == o.cost_price &&
          special_price == o.special_price &&
          sprice_create == o.sprice_create &&
          sprice_expire == o.sprice_expire &&
          advanced_prices == o.advanced_prices &&
          fixed_cost_shipping_price == o.fixed_cost_shipping_price &&
          quantity == o.quantity &&
          manage_stock == o.manage_stock &&
          product_type == o.product_type &&
          marketplace_item_properties == o.marketplace_item_properties &&
          is_free_shipping == o.is_free_shipping &&
          taxable == o.taxable &&
          status == o.status &&
          condition == o.condition &&
          visible == o.visible &&
          available_for_view == o.available_for_view &&
          available_for_sale == o.available_for_sale &&
          is_virtual == o.is_virtual &&
          in_stock == o.in_stock &&
          type == o.type &&
          downloadable == o.downloadable &&
          weight == o.weight &&
          length == o.length &&
          width == o.width &&
          height == o.height &&
          weight_unit == o.weight_unit &&
          dimensions_unit == o.dimensions_unit &&
          store_id == o.store_id &&
          lang_id == o.lang_id &&
          category_id == o.category_id &&
          warehouse_id == o.warehouse_id &&
          categories_ids == o.categories_ids &&
          related_products_ids == o.related_products_ids &&
          up_sell_products_ids == o.up_sell_products_ids &&
          cross_sell_products_ids == o.cross_sell_products_ids &&
          stores_ids == o.stores_ids &&
          tax_class_id == o.tax_class_id &&
          meta_title == o.meta_title &&
          meta_description == o.meta_description &&
          meta_keywords == o.meta_keywords &&
          search_keywords == o.search_keywords &&
          harmonized_system_code == o.harmonized_system_code &&
          url == o.url &&
          seo_url == o.seo_url &&
          manufacturer == o.manufacturer &&
          manufacturer_id == o.manufacturer_id &&
          backorder_status == o.backorder_status &&
          images == o.images &&
          tags == o.tags &&
          files == o.files
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, description, short_description, sku, model, asin, upc, ean, gtin, mpn, barcode, price, old_price, cost_price, special_price, sprice_create, sprice_expire, advanced_prices, fixed_cost_shipping_price, quantity, manage_stock, product_type, marketplace_item_properties, is_free_shipping, taxable, status, condition, visible, available_for_view, available_for_sale, is_virtual, in_stock, type, downloadable, weight, length, width, height, weight_unit, dimensions_unit, store_id, lang_id, category_id, warehouse_id, categories_ids, related_products_ids, up_sell_products_ids, cross_sell_products_ids, stores_ids, tax_class_id, meta_title, meta_description, meta_keywords, search_keywords, harmonized_system_code, url, seo_url, manufacturer, manufacturer_id, backorder_status, images, tags, files].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
