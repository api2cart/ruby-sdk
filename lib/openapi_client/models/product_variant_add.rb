=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProductVariantAdd
    # Defines product's id where the variant has to be added
    attr_accessor :product_id

    # Defines variant's name that has to be added
    attr_accessor :name

    # Specifies variant's model that has to be added
    attr_accessor :model

    # Defines variant's sku that has to be added
    attr_accessor :sku

    # A barcode is a unique code composed of numbers used as a product identifier.
    attr_accessor :barcode

    # Global Trade Item Number. An GTIN is an identifier for trade items.
    attr_accessor :gtin

    # Defines new product's variant price
    attr_accessor :price

    # Defines product's old price
    attr_accessor :old_price

    # Defines new product's cost price
    attr_accessor :cost_price

    # Specifies fixed cost shipping price
    attr_accessor :fixed_cost_shipping_price

    # Defines variant's attributes list
    attr_accessor :attributes

    # Specifies variant's description
    attr_accessor :description

    # Specifies variant's model that has to be added
    attr_accessor :special_price

    # Defines the date of special price creation
    attr_accessor :sprice_create

    # Defines the date of special price modification
    attr_accessor :sprice_modified

    # Defines the term of special price offer duration
    attr_accessor :sprice_expire

    # Specifies the set of visible/invisible product's variants for users
    attr_accessor :available_for_view

    # Specifies the set of visible/invisible product's variants for sale
    attr_accessor :available_for_sale

    # Weight
    attr_accessor :weight

    # Defines product's width
    attr_accessor :width

    # Defines product's height
    attr_accessor :height

    # Defines product's length
    attr_accessor :length

    # Weight Unit
    attr_accessor :weight_unit

    # Defines short description
    attr_accessor :short_description

    # This parameter is used for selecting a warehouse where you need to set/modify a product quantity.
    attr_accessor :warehouse_id

    # Defines product variant's quantity that has to be added
    attr_accessor :quantity

    # Defines the date of entity creation
    attr_accessor :created_at

    # Specifies the product variant's manufacturer
    attr_accessor :manufacturer

    # Defines tax classes where entity has to be added
    attr_accessor :tax_class_id

    # Defines unique meta title for each entity
    attr_accessor :meta_title

    # Defines unique meta keywords for each entity
    attr_accessor :meta_keywords

    # Defines unique meta description of a entity
    attr_accessor :meta_description

    # Defines unique product variant's URL
    attr_accessor :url

    # Add variants specified by store id
    attr_accessor :store_id

    # Language id
    attr_accessor :lang_id

    # Is cache clear required
    attr_accessor :clear_cache

    # Specifies whether a tax is charged
    attr_accessor :taxable

    # Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes
    attr_accessor :harmonized_system_code

    # The country where the inventory item was made
    attr_accessor :country_of_origin

    # Defines inventory tracking for product variant
    attr_accessor :manage_stock

    # Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.
    attr_accessor :upc

    # Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.
    attr_accessor :mpn

    # European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.
    attr_accessor :ean

    # International Standard Book Number. An ISBN is a unique identifier for books.
    attr_accessor :isbn

    # Assign variant to the stores that is specified by comma-separated stores' id
    attr_accessor :stores_ids

    # Defines as a default variant
    attr_accessor :is_default

    # Specifies variant's free shipping flag that has to be added
    attr_accessor :is_free_shipping

    # String containing the JSON representation of the supplied data
    attr_accessor :marketplace_item_properties

    # Set stock status
    attr_accessor :in_stock

    # Set backorder status
    attr_accessor :backorder_status

    # Defines product's tier prices
    attr_accessor :tier_prices

    # Defines whether the product is virtual
    attr_accessor :is_virtual

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_id' => :'product_id',
        :'name' => :'name',
        :'model' => :'model',
        :'sku' => :'sku',
        :'barcode' => :'barcode',
        :'gtin' => :'gtin',
        :'price' => :'price',
        :'old_price' => :'old_price',
        :'cost_price' => :'cost_price',
        :'fixed_cost_shipping_price' => :'fixed_cost_shipping_price',
        :'attributes' => :'attributes',
        :'description' => :'description',
        :'special_price' => :'special_price',
        :'sprice_create' => :'sprice_create',
        :'sprice_modified' => :'sprice_modified',
        :'sprice_expire' => :'sprice_expire',
        :'available_for_view' => :'available_for_view',
        :'available_for_sale' => :'available_for_sale',
        :'weight' => :'weight',
        :'width' => :'width',
        :'height' => :'height',
        :'length' => :'length',
        :'weight_unit' => :'weight_unit',
        :'short_description' => :'short_description',
        :'warehouse_id' => :'warehouse_id',
        :'quantity' => :'quantity',
        :'created_at' => :'created_at',
        :'manufacturer' => :'manufacturer',
        :'tax_class_id' => :'tax_class_id',
        :'meta_title' => :'meta_title',
        :'meta_keywords' => :'meta_keywords',
        :'meta_description' => :'meta_description',
        :'url' => :'url',
        :'store_id' => :'store_id',
        :'lang_id' => :'lang_id',
        :'clear_cache' => :'clear_cache',
        :'taxable' => :'taxable',
        :'harmonized_system_code' => :'harmonized_system_code',
        :'country_of_origin' => :'country_of_origin',
        :'manage_stock' => :'manage_stock',
        :'upc' => :'upc',
        :'mpn' => :'mpn',
        :'ean' => :'ean',
        :'isbn' => :'isbn',
        :'stores_ids' => :'stores_ids',
        :'is_default' => :'is_default',
        :'is_free_shipping' => :'is_free_shipping',
        :'marketplace_item_properties' => :'marketplace_item_properties',
        :'in_stock' => :'in_stock',
        :'backorder_status' => :'backorder_status',
        :'tier_prices' => :'tier_prices',
        :'is_virtual' => :'is_virtual'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_id' => :'String',
        :'name' => :'String',
        :'model' => :'String',
        :'sku' => :'String',
        :'barcode' => :'String',
        :'gtin' => :'String',
        :'price' => :'Float',
        :'old_price' => :'Float',
        :'cost_price' => :'Float',
        :'fixed_cost_shipping_price' => :'Float',
        :'attributes' => :'Array<ProductVariantAddAttributesInner>',
        :'description' => :'String',
        :'special_price' => :'Float',
        :'sprice_create' => :'String',
        :'sprice_modified' => :'String',
        :'sprice_expire' => :'String',
        :'available_for_view' => :'Boolean',
        :'available_for_sale' => :'Boolean',
        :'weight' => :'Float',
        :'width' => :'Float',
        :'height' => :'Float',
        :'length' => :'Float',
        :'weight_unit' => :'String',
        :'short_description' => :'String',
        :'warehouse_id' => :'String',
        :'quantity' => :'Float',
        :'created_at' => :'String',
        :'manufacturer' => :'String',
        :'tax_class_id' => :'String',
        :'meta_title' => :'String',
        :'meta_keywords' => :'String',
        :'meta_description' => :'String',
        :'url' => :'String',
        :'store_id' => :'String',
        :'lang_id' => :'String',
        :'clear_cache' => :'Boolean',
        :'taxable' => :'Boolean',
        :'harmonized_system_code' => :'String',
        :'country_of_origin' => :'String',
        :'manage_stock' => :'Boolean',
        :'upc' => :'String',
        :'mpn' => :'String',
        :'ean' => :'String',
        :'isbn' => :'String',
        :'stores_ids' => :'String',
        :'is_default' => :'Boolean',
        :'is_free_shipping' => :'Boolean',
        :'marketplace_item_properties' => :'String',
        :'in_stock' => :'Boolean',
        :'backorder_status' => :'String',
        :'tier_prices' => :'Array<ProductAddTierPricesInner>',
        :'is_virtual' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProductVariantAdd` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProductVariantAdd`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      else
        self.model = nil
      end

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.key?(:'gtin')
        self.gtin = attributes[:'gtin']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'old_price')
        self.old_price = attributes[:'old_price']
      end

      if attributes.key?(:'cost_price')
        self.cost_price = attributes[:'cost_price']
      end

      if attributes.key?(:'fixed_cost_shipping_price')
        self.fixed_cost_shipping_price = attributes[:'fixed_cost_shipping_price']
      end

      if attributes.key?(:'attributes')
        if (value = attributes[:'attributes']).is_a?(Array)
          self.attributes = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'special_price')
        self.special_price = attributes[:'special_price']
      end

      if attributes.key?(:'sprice_create')
        self.sprice_create = attributes[:'sprice_create']
      end

      if attributes.key?(:'sprice_modified')
        self.sprice_modified = attributes[:'sprice_modified']
      end

      if attributes.key?(:'sprice_expire')
        self.sprice_expire = attributes[:'sprice_expire']
      end

      if attributes.key?(:'available_for_view')
        self.available_for_view = attributes[:'available_for_view']
      else
        self.available_for_view = true
      end

      if attributes.key?(:'available_for_sale')
        self.available_for_sale = attributes[:'available_for_sale']
      else
        self.available_for_sale = true
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      else
        self.weight = 0
      end

      if attributes.key?(:'width')
        self.width = attributes[:'width']
      end

      if attributes.key?(:'height')
        self.height = attributes[:'height']
      end

      if attributes.key?(:'length')
        self.length = attributes[:'length']
      end

      if attributes.key?(:'weight_unit')
        self.weight_unit = attributes[:'weight_unit']
      end

      if attributes.key?(:'short_description')
        self.short_description = attributes[:'short_description']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      else
        self.quantity = 0
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'tax_class_id')
        self.tax_class_id = attributes[:'tax_class_id']
      end

      if attributes.key?(:'meta_title')
        self.meta_title = attributes[:'meta_title']
      end

      if attributes.key?(:'meta_keywords')
        self.meta_keywords = attributes[:'meta_keywords']
      end

      if attributes.key?(:'meta_description')
        self.meta_description = attributes[:'meta_description']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'lang_id')
        self.lang_id = attributes[:'lang_id']
      end

      if attributes.key?(:'clear_cache')
        self.clear_cache = attributes[:'clear_cache']
      else
        self.clear_cache = true
      end

      if attributes.key?(:'taxable')
        self.taxable = attributes[:'taxable']
      else
        self.taxable = true
      end

      if attributes.key?(:'harmonized_system_code')
        self.harmonized_system_code = attributes[:'harmonized_system_code']
      end

      if attributes.key?(:'country_of_origin')
        self.country_of_origin = attributes[:'country_of_origin']
      end

      if attributes.key?(:'manage_stock')
        self.manage_stock = attributes[:'manage_stock']
      end

      if attributes.key?(:'upc')
        self.upc = attributes[:'upc']
      end

      if attributes.key?(:'mpn')
        self.mpn = attributes[:'mpn']
      end

      if attributes.key?(:'ean')
        self.ean = attributes[:'ean']
      end

      if attributes.key?(:'isbn')
        self.isbn = attributes[:'isbn']
      end

      if attributes.key?(:'stores_ids')
        self.stores_ids = attributes[:'stores_ids']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'is_free_shipping')
        self.is_free_shipping = attributes[:'is_free_shipping']
      end

      if attributes.key?(:'marketplace_item_properties')
        self.marketplace_item_properties = attributes[:'marketplace_item_properties']
      end

      if attributes.key?(:'in_stock')
        self.in_stock = attributes[:'in_stock']
      end

      if attributes.key?(:'backorder_status')
        self.backorder_status = attributes[:'backorder_status']
      end

      if attributes.key?(:'tier_prices')
        if (value = attributes[:'tier_prices']).is_a?(Array)
          self.tier_prices = value
        end
      end

      if attributes.key?(:'is_virtual')
        self.is_virtual = attributes[:'is_virtual']
      else
        self.is_virtual = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @model.nil?
        invalid_properties.push('invalid value for "model", model cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @model.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_id == o.product_id &&
          name == o.name &&
          model == o.model &&
          sku == o.sku &&
          barcode == o.barcode &&
          gtin == o.gtin &&
          price == o.price &&
          old_price == o.old_price &&
          cost_price == o.cost_price &&
          fixed_cost_shipping_price == o.fixed_cost_shipping_price &&
          attributes == o.attributes &&
          description == o.description &&
          special_price == o.special_price &&
          sprice_create == o.sprice_create &&
          sprice_modified == o.sprice_modified &&
          sprice_expire == o.sprice_expire &&
          available_for_view == o.available_for_view &&
          available_for_sale == o.available_for_sale &&
          weight == o.weight &&
          width == o.width &&
          height == o.height &&
          length == o.length &&
          weight_unit == o.weight_unit &&
          short_description == o.short_description &&
          warehouse_id == o.warehouse_id &&
          quantity == o.quantity &&
          created_at == o.created_at &&
          manufacturer == o.manufacturer &&
          tax_class_id == o.tax_class_id &&
          meta_title == o.meta_title &&
          meta_keywords == o.meta_keywords &&
          meta_description == o.meta_description &&
          url == o.url &&
          store_id == o.store_id &&
          lang_id == o.lang_id &&
          clear_cache == o.clear_cache &&
          taxable == o.taxable &&
          harmonized_system_code == o.harmonized_system_code &&
          country_of_origin == o.country_of_origin &&
          manage_stock == o.manage_stock &&
          upc == o.upc &&
          mpn == o.mpn &&
          ean == o.ean &&
          isbn == o.isbn &&
          stores_ids == o.stores_ids &&
          is_default == o.is_default &&
          is_free_shipping == o.is_free_shipping &&
          marketplace_item_properties == o.marketplace_item_properties &&
          in_stock == o.in_stock &&
          backorder_status == o.backorder_status &&
          tier_prices == o.tier_prices &&
          is_virtual == o.is_virtual
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_id, name, model, sku, barcode, gtin, price, old_price, cost_price, fixed_cost_shipping_price, attributes, description, special_price, sprice_create, sprice_modified, sprice_expire, available_for_view, available_for_sale, weight, width, height, length, weight_unit, short_description, warehouse_id, quantity, created_at, manufacturer, tax_class_id, meta_title, meta_keywords, meta_description, url, store_id, lang_id, clear_cache, taxable, harmonized_system_code, country_of_origin, manage_stock, upc, mpn, ean, isbn, stores_ids, is_default, is_free_shipping, marketplace_item_properties, in_stock, backorder_status, tier_prices, is_virtual].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
