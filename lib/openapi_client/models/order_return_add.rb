=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module OpenapiClient
  class OrderReturnAdd
    # Defines the order id
    attr_accessor :order_id

    # Store Id
    attr_accessor :store_id

    # Defines return request status
    attr_accessor :return_status_id

    # Defines return request action
    attr_accessor :return_action_id

    # Defines return request reason
    attr_accessor :return_reason_id

    # Defines return request reason
    attr_accessor :return_reason

    # Boolean, whether or not to add the line items back to the store inventory.
    attr_accessor :item_restock

    # Specifies staff note
    attr_accessor :staff_note

    # Specifies return comment
    attr_accessor :comment

    # Send notifications to customer after order was created
    attr_accessor :send_notifications

    # Defines return reject reason
    attr_accessor :reject_reason

    attr_accessor :order_products

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_id' => :'order_id',
        :'store_id' => :'store_id',
        :'return_status_id' => :'return_status_id',
        :'return_action_id' => :'return_action_id',
        :'return_reason_id' => :'return_reason_id',
        :'return_reason' => :'return_reason',
        :'item_restock' => :'item_restock',
        :'staff_note' => :'staff_note',
        :'comment' => :'comment',
        :'send_notifications' => :'send_notifications',
        :'reject_reason' => :'reject_reason',
        :'order_products' => :'order_products'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'order_id' => :'String',
        :'store_id' => :'String',
        :'return_status_id' => :'String',
        :'return_action_id' => :'String',
        :'return_reason_id' => :'String',
        :'return_reason' => :'String',
        :'item_restock' => :'Boolean',
        :'staff_note' => :'String',
        :'comment' => :'String',
        :'send_notifications' => :'Boolean',
        :'reject_reason' => :'String',
        :'order_products' => :'Array<OrderReturnAddOrderProductsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::OrderReturnAdd` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::OrderReturnAdd`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'order_id')
        self.order_id = attributes[:'order_id']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'return_status_id')
        self.return_status_id = attributes[:'return_status_id']
      else
        self.return_status_id = nil
      end

      if attributes.key?(:'return_action_id')
        self.return_action_id = attributes[:'return_action_id']
      else
        self.return_action_id = nil
      end

      if attributes.key?(:'return_reason_id')
        self.return_reason_id = attributes[:'return_reason_id']
      else
        self.return_reason_id = nil
      end

      if attributes.key?(:'return_reason')
        self.return_reason = attributes[:'return_reason']
      end

      if attributes.key?(:'item_restock')
        self.item_restock = attributes[:'item_restock']
      else
        self.item_restock = false
      end

      if attributes.key?(:'staff_note')
        self.staff_note = attributes[:'staff_note']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'send_notifications')
        self.send_notifications = attributes[:'send_notifications']
      else
        self.send_notifications = false
      end

      if attributes.key?(:'reject_reason')
        self.reject_reason = attributes[:'reject_reason']
      end

      if attributes.key?(:'order_products')
        if (value = attributes[:'order_products']).is_a?(Array)
          self.order_products = value
        end
      else
        self.order_products = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @return_status_id.nil?
        invalid_properties.push('invalid value for "return_status_id", return_status_id cannot be nil.')
      end

      if @return_action_id.nil?
        invalid_properties.push('invalid value for "return_action_id", return_action_id cannot be nil.')
      end

      if @return_reason_id.nil?
        invalid_properties.push('invalid value for "return_reason_id", return_reason_id cannot be nil.')
      end

      if @order_products.nil?
        invalid_properties.push('invalid value for "order_products", order_products cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @return_status_id.nil?
      return false if @return_action_id.nil?
      return false if @return_reason_id.nil?
      return false if @order_products.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_id == o.order_id &&
          store_id == o.store_id &&
          return_status_id == o.return_status_id &&
          return_action_id == o.return_action_id &&
          return_reason_id == o.return_reason_id &&
          return_reason == o.return_reason &&
          item_restock == o.item_restock &&
          staff_note == o.staff_note &&
          comment == o.comment &&
          send_notifications == o.send_notifications &&
          reject_reason == o.reject_reason &&
          order_products == o.order_products
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_id, store_id, return_status_id, return_action_id, return_reason_id, return_reason, item_restock, staff_note, comment, send_notifications, reject_reason, order_products].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
