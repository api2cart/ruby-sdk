=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class ReturnApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # return.action.list
    # Retrieve list of return actions
    # @param [Hash] opts the optional parameters
    # @return [ReturnActionList200Response]
    def return_action_list(opts = {})
      data, _status_code, _headers = return_action_list_with_http_info(opts)
      data
    end

    # return.action.list
    # Retrieve list of return actions
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnActionList200Response, Integer, Hash)>] ReturnActionList200Response data, response status code and response headers
    def return_action_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_action_list ...'
      end
      # resource path
      local_var_path = '/return.action.list.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnActionList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_action_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_action_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return.count
    # Count returns in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_ids Counts return requests specified by order ids
    # @option opts [String] :customer_id Counts return requests quantity specified by customer id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :return_type Retrieves returns specified by return type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [ReturnCount200Response]
    def return_count(opts = {})
      data, _status_code, _headers = return_count_with_http_info(opts)
      data
    end

    # return.count
    # Count returns in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_ids Counts return requests specified by order ids
    # @option opts [String] :customer_id Counts return requests quantity specified by customer id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :return_type Retrieves returns specified by return type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [Array<(ReturnCount200Response, Integer, Hash)>] ReturnCount200Response data, response status code and response headers
    def return_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_count ...'
      end
      # resource path
      local_var_path = '/return.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'return_type'] = opts[:'return_type'] if !opts[:'return_type'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return.info
    # Retrieve return information.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id Defines the order id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_products')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [ReturnInfo200Response]
    def return_info(id, opts = {})
      data, _status_code, _headers = return_info_with_http_info(id, opts)
      data
    end

    # return.info
    # Retrieve return information.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id Defines the order id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_products')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [Array<(ReturnInfo200Response, Integer, Hash)>] ReturnInfo200Response data, response status code and response headers
    def return_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReturnApi.return_info"
      end
      # resource path
      local_var_path = '/return.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return.list
    # Get list of return requests from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_products')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :order_id Defines the order id
    # @option opts [String] :order_ids Retrieves return requests specified by order ids
    # @option opts [String] :customer_id Retrieves return requests specified by customer id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :return_type Retrieves returns specified by return type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [ModelResponseReturnList]
    def return_list(opts = {})
      data, _status_code, _headers = return_list_with_http_info(opts)
      data
    end

    # return.list
    # Get list of return requests from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_products')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :order_id Defines the order id
    # @option opts [String] :order_ids Retrieves return requests specified by order ids
    # @option opts [String] :customer_id Retrieves return requests specified by customer id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :return_type Retrieves returns specified by return type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [Array<(ModelResponseReturnList, Integer, Hash)>] ModelResponseReturnList data, response status code and response headers
    def return_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_list ...'
      end
      # resource path
      local_var_path = '/return.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'return_type'] = opts[:'return_type'] if !opts[:'return_type'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseReturnList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return.reason.list
    # Retrieve list of return reasons
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [ReturnReasonList200Response]
    def return_reason_list(opts = {})
      data, _status_code, _headers = return_reason_list_with_http_info(opts)
      data
    end

    # return.reason.list
    # Retrieve list of return reasons
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(ReturnReasonList200Response, Integer, Hash)>] ReturnReasonList200Response data, response status code and response headers
    def return_reason_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_reason_list ...'
      end
      # resource path
      local_var_path = '/return.reason.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnReasonList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_reason_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_reason_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # return.status.list
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @return [ReturnStatusList200Response]
    def return_status_list(opts = {})
      data, _status_code, _headers = return_status_list_with_http_info(opts)
      data
    end

    # return.status.list
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReturnStatusList200Response, Integer, Hash)>] ReturnStatusList200Response data, response status code and response headers
    def return_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnApi.return_status_list ...'
      end
      # resource path
      local_var_path = '/return.status.list.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReturnStatusList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ReturnApi.return_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnApi#return_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
