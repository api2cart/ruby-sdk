=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class TaxApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # tax.class.info
    # Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer's address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
    # @param tax_class_id [String] Retrieves taxes specified by class id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'tax_class_id,name,avail')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseTaxClassInfo]
    def tax_class_info(tax_class_id, opts = {})
      data, _status_code, _headers = tax_class_info_with_http_info(tax_class_id, opts)
      data
    end

    # tax.class.info
    # Use this method to get information about a tax class and its rates. It allows you to calculate the tax percentage for a specific customer&#39;s address. This information contains relatively static data that rarely changes, so API2Cart may cache certain data to reduce the load on the store and speed up request execution. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, use the cart.validate method.
    # @param tax_class_id [String] Retrieves taxes specified by class id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'tax_class_id,name,avail')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseTaxClassInfo, Integer, Hash)>] ModelResponseTaxClassInfo data, response status code and response headers
    def tax_class_info_with_http_info(tax_class_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxApi.tax_class_info ...'
      end
      # verify the required parameter 'tax_class_id' is set
      if @api_client.config.client_side_validation && tax_class_id.nil?
        fail ArgumentError, "Missing the required parameter 'tax_class_id' when calling TaxApi.tax_class_info"
      end
      # resource path
      local_var_path = '/tax.class.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tax_class_id'] = tax_class_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseTaxClassInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"TaxApi.tax_class_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxApi#tax_class_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # tax.class.list
    # Get list of tax classes from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Tax class search that is specified by field
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [ModelResponseTaxClassList]
    def tax_class_list(opts = {})
      data, _status_code, _headers = tax_class_list_with_http_info(opts)
      data
    end

    # tax.class.list
    # Get list of tax classes from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Tax class search that is specified by field
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [Array<(ModelResponseTaxClassList, Integer, Hash)>] ModelResponseTaxClassList data, response status code and response headers
    def tax_class_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxApi.tax_class_list ...'
      end
      # resource path
      local_var_path = '/tax.class.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseTaxClassList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"TaxApi.tax_class_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxApi#tax_class_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
