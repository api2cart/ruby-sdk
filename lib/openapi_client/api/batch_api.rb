=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class BatchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # batch.job.list
    # Get list of recent jobs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :processed_from Retrieve entities according to their processing datetime
    # @option opts [String] :processed_to Retrieve entities according to their processing datetime
    # @option opts [String] :ids Filter batch jobs by ids
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [ModelResponseBatchJobList]
    def batch_job_list(opts = {})
      data, _status_code, _headers = batch_job_list_with_http_info(opts)
      data
    end

    # batch.job.list
    # Get list of recent jobs
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :processed_from Retrieve entities according to their processing datetime
    # @option opts [String] :processed_to Retrieve entities according to their processing datetime
    # @option opts [String] :ids Filter batch jobs by ids
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [Array<(ModelResponseBatchJobList, Integer, Hash)>] ModelResponseBatchJobList data, response status code and response headers
    def batch_job_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchApi.batch_job_list ...'
      end
      # resource path
      local_var_path = '/batch.job.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'processed_from'] = opts[:'processed_from'] if !opts[:'processed_from'].nil?
      query_params[:'processed_to'] = opts[:'processed_to'] if !opts[:'processed_to'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseBatchJobList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BatchApi.batch_job_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchApi#batch_job_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # batch.job.result
    # Get job result data
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @return [ResponseBatchJobResult]
    def batch_job_result(id, opts = {})
      data, _status_code, _headers = batch_job_result_with_http_info(id, opts)
      data
    end

    # batch.job.result
    # Get job result data
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseBatchJobResult, Integer, Hash)>] ResponseBatchJobResult data, response status code and response headers
    def batch_job_result_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchApi.batch_job_result ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BatchApi.batch_job_result"
      end
      # resource path
      local_var_path = '/batch.job.result.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResponseBatchJobResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BatchApi.batch_job_result",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchApi#batch_job_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
