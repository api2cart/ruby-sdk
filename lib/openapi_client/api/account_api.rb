=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class AccountApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # account.cart.add
    # Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
    # @param account_cart_add [AccountCartAdd] 
    # @param [Hash] opts the optional parameters
    # @return [AccountCartAdd200Response]
    def account_cart_add(account_cart_add, opts = {})
      data, _status_code, _headers = account_cart_add_with_http_info(account_cart_add, opts)
      data
    end

    # account.cart.add
    # Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
    # @param account_cart_add [AccountCartAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountCartAdd200Response, Integer, Hash)>] AccountCartAdd200Response data, response status code and response headers
    def account_cart_add_with_http_info(account_cart_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.account_cart_add ...'
      end
      # verify the required parameter 'account_cart_add' is set
      if @api_client.config.client_side_validation && account_cart_add.nil?
        fail ArgumentError, "Missing the required parameter 'account_cart_add' when calling AccountApi.account_cart_add"
      end
      # resource path
      local_var_path = '/account.cart.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_cart_add)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountCartAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.account_cart_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_cart_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # account.cart.list
    # This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_url A web address of a store
    # @option opts [String] :store_key Find store by store key
    # @option opts [String] :request_from_date Retrieve entities from their creation date
    # @option opts [String] :request_to_date Retrieve entities to their creation date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [AccountCartList200Response]
    def account_cart_list(opts = {})
      data, _status_code, _headers = account_cart_list_with_http_info(opts)
      data
    end

    # account.cart.list
    # This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_url A web address of a store
    # @option opts [String] :store_key Find store by store key
    # @option opts [String] :request_from_date Retrieve entities from their creation date
    # @option opts [String] :request_to_date Retrieve entities to their creation date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(AccountCartList200Response, Integer, Hash)>] AccountCartList200Response data, response status code and response headers
    def account_cart_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.account_cart_list ...'
      end
      # resource path
      local_var_path = '/account.cart.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_url'] = opts[:'store_url'] if !opts[:'store_url'].nil?
      query_params[:'store_key'] = opts[:'store_key'] if !opts[:'store_key'].nil?
      query_params[:'request_from_date'] = opts[:'request_from_date'] if !opts[:'request_from_date'].nil?
      query_params[:'request_to_date'] = opts[:'request_to_date'] if !opts[:'request_to_date'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountCartList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.account_cart_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_cart_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # account.config.update
    # Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replace_parameters Identifies if there is a necessity to replace parameters
    # @option opts [String] :new_store_url The web address of the store you want to update to connect to API2Cart
    # @option opts [String] :new_store_key Update store key
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :db_tables_prefix DB tables prefix
    # @option opts [String] :user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.
    # @option opts [String] :_3dcart_private_key 3DCart Private Key
    # @option opts [String] :_3dcart_access_token 3DCart Token
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_sp_client_id Amazon SP API app client id
    # @option opts [String] :amazon_sp_client_secret Amazon SP API app client secret
    # @option opts [String] :amazon_sp_refresh_token Amazon SP API OAuth refresh token
    # @option opts [String] :amazon_sp_aws_region Amazon AWS Region
    # @option opts [String] :amazon_sp_api_environment Amazon SP API environment (default to 'production')
    # @option opts [String] :amazon_seller_id Amazon Seller ID (Merchant token)
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :bol_api_key Bol API Key
    # @option opts [String] :bol_api_secret Bol API Secret
    # @option opts [Integer] :bol_retailer_id Bol Retailer ID
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment
    # @option opts [Integer] :ebay_site_id eBay global ID (default to 0)
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :lazada_app_id Lazada App ID
    # @option opts [String] :lazada_app_secret Lazada App Secret
    # @option opts [String] :lazada_refresh_token Lazada Refresh Token
    # @option opts [String] :lazada_region Lazada API endpoint Region
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_client_id Etsy Client Id
    # @option opts [String] :etsy_refresh_token Etsy Refresh token
    # @option opts [String] :facebook_app_id Facebook App ID
    # @option opts [String] :facebook_app_secret Facebook App Secret
    # @option opts [String] :facebook_access_token Facebook Access Token
    # @option opts [String] :facebook_business_id Facebook Business ID
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopline_access_token Shopline APP Key
    # @option opts [String] :shopline_app_key Shopline APP Key
    # @option opts [String] :shopline_app_secret Shopline App Secret
    # @option opts [String] :shopline_shared_secret Shopline Shared Secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shoplazza_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :shoplazza_shared_secret Shared secret
    # @option opts [String] :miva_access_token Miva access token
    # @option opts [String] :miva_signature Miva signature
    # @option opts [String] :shopware_access_key Shopware access key
    # @option opts [String] :shopware_api_key Shopware api key
    # @option opts [String] :shopware_api_secret Shopware client secret access key
    # @option opts [String] :bigcartel_user_name Subdomain of store
    # @option opts [String] :bigcartel_password BigCartel account password
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID
    # @option opts [String] :walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key
    # @option opts [String] :walmart_environment Walmart environment (default to 'production')
    # @option opts [String] :walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header
    # @option opts [String] :walmart_region Walmart region (default to 'us')
    # @option opts [String] :square_client_id Square (Weebly) Client ID
    # @option opts [String] :square_client_secret Square (Weebly) Client Secret
    # @option opts [String] :square_refresh_token Square (Weebly) Refresh Token
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @option opts [String] :squarespace_client_id Squarespace Connector Client ID
    # @option opts [String] :squarespace_client_secret Squarespace Connector Client Secret
    # @option opts [String] :squarespace_access_token Squarespace access token
    # @option opts [String] :squarespace_refresh_token Squarespace refresh token
    # @option opts [String] :hybris_client_id Omni Commerce Connector Client ID
    # @option opts [String] :hybris_client_secret Omni Commerce Connector Client Secret
    # @option opts [String] :hybris_username User Name
    # @option opts [String] :hybris_password User password
    # @option opts [Array<String>] :hybris_websites Websites to stores mapping data
    # @option opts [String] :lightspeed_api_key LightSpeed api key
    # @option opts [String] :lightspeed_api_secret LightSpeed api secret
    # @option opts [String] :commercehq_api_key CommerceHQ api key
    # @option opts [String] :commercehq_api_password CommerceHQ api password
    # @option opts [String] :wc_consumer_key Woocommerce consumer key
    # @option opts [String] :wc_consumer_secret Woocommerce consumer secret
    # @option opts [String] :magento_consumer_key Magento Consumer Key
    # @option opts [String] :magento_consumer_secret Magento Consumer Secret
    # @option opts [String] :magento_access_token Magento Access Token
    # @option opts [String] :magento_token_secret Magento Token Secret
    # @option opts [String] :prestashop_webservice_key Prestashop webservice key
    # @option opts [String] :wix_app_id Wix App ID
    # @option opts [String] :wix_app_secret_key Wix App Secret Key
    # @option opts [String] :wix_instance_id Wix Instance ID
    # @option opts [String] :wix_refresh_token Wix refresh token
    # @option opts [String] :mercado_libre_app_id Mercado Libre App ID
    # @option opts [String] :mercado_libre_app_secret_key Mercado Libre App Secret Key
    # @option opts [String] :mercado_libre_refresh_token Mercado Libre Refresh Token
    # @option opts [Integer] :zid_client_id Zid Client ID
    # @option opts [String] :zid_client_secret Zid Client Secret
    # @option opts [String] :zid_access_token Zid Access Token
    # @option opts [String] :zid_authorization Zid Authorization
    # @option opts [String] :zid_refresh_token Zid refresh token
    # @option opts [String] :flipkart_client_id Flipkart Client ID
    # @option opts [String] :flipkart_client_secret Flipkart Client Secret
    # @option opts [String] :allegro_client_id Allegro Client ID
    # @option opts [String] :allegro_client_secret Allegro Client Secret
    # @option opts [String] :allegro_access_token Allegro Access Token
    # @option opts [String] :allegro_refresh_token Allegro Refresh Token
    # @option opts [String] :allegro_environment Allegro Environment (default to 'production')
    # @option opts [String] :zoho_client_id Zoho Client ID
    # @option opts [String] :zoho_client_secret Zoho Client Secret
    # @option opts [String] :zoho_refresh_token Zoho Refresh Token
    # @option opts [String] :zoho_region Zoho API endpoint Region
    # @option opts [Integer] :tiendanube_user_id Tiendanube User ID
    # @option opts [String] :tiendanube_access_token Tiendanube Access Token
    # @option opts [String] :tiendanube_client_secret Tiendanube Client Secret
    # @option opts [String] :otto_client_id Otto Client ID
    # @option opts [String] :otto_client_secret Otto Client Secret
    # @option opts [String] :otto_app_id Otto App ID
    # @option opts [String] :otto_refresh_token Otto Refresh Token
    # @option opts [String] :otto_environment Otto Environment
    # @option opts [String] :otto_access_token Otto Access Token
    # @option opts [String] :tiktokshop_app_key TikTok Shop App Key
    # @option opts [String] :tiktokshop_app_secret TikTok Shop App Secret
    # @option opts [String] :tiktokshop_refresh_token TikTok Shop Refresh Token
    # @option opts [String] :tiktokshop_access_token TikTok Shop Access Token
    # @option opts [String] :salla_client_id Salla Client ID
    # @option opts [String] :salla_client_secret Salla Client Secret
    # @option opts [String] :salla_refresh_token Salla Refresh Token
    # @option opts [String] :salla_access_token Salla Access Token
    # @return [AccountConfigUpdate200Response]
    def account_config_update(opts = {})
      data, _status_code, _headers = account_config_update_with_http_info(opts)
      data
    end

    # account.config.update
    # Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replace_parameters Identifies if there is a necessity to replace parameters
    # @option opts [String] :new_store_url The web address of the store you want to update to connect to API2Cart
    # @option opts [String] :new_store_key Update store key
    # @option opts [String] :bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
    # @option opts [String] :store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
    # @option opts [String] :db_tables_prefix DB tables prefix
    # @option opts [String] :user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.
    # @option opts [String] :_3dcart_private_key 3DCart Private Key
    # @option opts [String] :_3dcart_access_token 3DCart Token
    # @option opts [String] :_3dcartapi_api_key 3DCart API Key
    # @option opts [String] :amazon_sp_client_id Amazon SP API app client id
    # @option opts [String] :amazon_sp_client_secret Amazon SP API app client secret
    # @option opts [String] :amazon_sp_refresh_token Amazon SP API OAuth refresh token
    # @option opts [String] :amazon_sp_aws_region Amazon AWS Region
    # @option opts [String] :amazon_sp_api_environment Amazon SP API environment (default to 'production')
    # @option opts [String] :amazon_seller_id Amazon Seller ID (Merchant token)
    # @option opts [String] :aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available
    # @option opts [String] :aspdotnetstorefront_api_pass AspDotNetStorefront API Password
    # @option opts [String] :bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled
    # @option opts [String] :bigcommerceapi_api_path BigCommerce API URL
    # @option opts [String] :bigcommerceapi_api_key Bigcommerce API Key
    # @option opts [String] :bigcommerceapi_client_id Client ID of the requesting app
    # @option opts [String] :bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :bigcommerceapi_context API Path section unique to the store
    # @option opts [String] :bol_api_key Bol API Key
    # @option opts [String] :bol_api_secret Bol API Secret
    # @option opts [Integer] :bol_retailer_id Bol Retailer ID
    # @option opts [String] :demandware_client_id Demandware client id
    # @option opts [String] :demandware_api_password Demandware api password
    # @option opts [String] :demandware_user_name Demandware user name
    # @option opts [String] :demandware_user_password Demandware user password
    # @option opts [String] :ebay_client_id Application ID (AppID).
    # @option opts [String] :ebay_client_secret Shared Secret from eBay application
    # @option opts [String] :ebay_runame The RuName value that eBay assigns to your application.
    # @option opts [String] :ebay_access_token Used to authenticate API requests.
    # @option opts [String] :ebay_refresh_token Used to renew the access token.
    # @option opts [String] :ebay_environment eBay environment
    # @option opts [Integer] :ebay_site_id eBay global ID (default to 0)
    # @option opts [String] :ecwid_acess_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :ecwid_store_id Store Id
    # @option opts [String] :lazada_app_id Lazada App ID
    # @option opts [String] :lazada_app_secret Lazada App Secret
    # @option opts [String] :lazada_refresh_token Lazada Refresh Token
    # @option opts [String] :lazada_region Lazada API endpoint Region
    # @option opts [String] :etsy_keystring Etsy keystring
    # @option opts [String] :etsy_shared_secret Etsy shared secret
    # @option opts [String] :etsy_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_token_secret Secret token authorizing the app to access resources on behalf of a user
    # @option opts [String] :etsy_client_id Etsy Client Id
    # @option opts [String] :etsy_refresh_token Etsy Refresh token
    # @option opts [String] :facebook_app_id Facebook App ID
    # @option opts [String] :facebook_app_secret Facebook App Secret
    # @option opts [String] :facebook_access_token Facebook Access Token
    # @option opts [String] :facebook_business_id Facebook Business ID
    # @option opts [String] :neto_api_key Neto API Key
    # @option opts [String] :neto_api_username Neto User Name
    # @option opts [String] :shopline_access_token Shopline APP Key
    # @option opts [String] :shopline_app_key Shopline APP Key
    # @option opts [String] :shopline_app_secret Shopline App Secret
    # @option opts [String] :shopline_shared_secret Shopline Shared Secret
    # @option opts [String] :shopify_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :shopify_api_key Shopify API Key
    # @option opts [String] :shopify_api_password Shopify API Password
    # @option opts [String] :shopify_shared_secret Shared secret
    # @option opts [String] :shoplazza_access_token Access token authorizing the app to access resources on behalf of a user
    # @option opts [String] :shoplazza_shared_secret Shared secret
    # @option opts [String] :miva_access_token Miva access token
    # @option opts [String] :miva_signature Miva signature
    # @option opts [String] :shopware_access_key Shopware access key
    # @option opts [String] :shopware_api_key Shopware api key
    # @option opts [String] :shopware_api_secret Shopware client secret access key
    # @option opts [String] :bigcartel_user_name Subdomain of store
    # @option opts [String] :bigcartel_password BigCartel account password
    # @option opts [String] :volusion_login It&#39;s a Volusion account for which API is enabled
    # @option opts [String] :volusion_password Volusion API Password
    # @option opts [String] :walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID
    # @option opts [String] :walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key
    # @option opts [String] :walmart_environment Walmart environment (default to 'production')
    # @option opts [String] :walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header
    # @option opts [String] :walmart_region Walmart region (default to 'us')
    # @option opts [String] :square_client_id Square (Weebly) Client ID
    # @option opts [String] :square_client_secret Square (Weebly) Client Secret
    # @option opts [String] :square_refresh_token Square (Weebly) Refresh Token
    # @option opts [String] :squarespace_api_key Squarespace API Key
    # @option opts [String] :squarespace_client_id Squarespace Connector Client ID
    # @option opts [String] :squarespace_client_secret Squarespace Connector Client Secret
    # @option opts [String] :squarespace_access_token Squarespace access token
    # @option opts [String] :squarespace_refresh_token Squarespace refresh token
    # @option opts [String] :hybris_client_id Omni Commerce Connector Client ID
    # @option opts [String] :hybris_client_secret Omni Commerce Connector Client Secret
    # @option opts [String] :hybris_username User Name
    # @option opts [String] :hybris_password User password
    # @option opts [Array<String>] :hybris_websites Websites to stores mapping data
    # @option opts [String] :lightspeed_api_key LightSpeed api key
    # @option opts [String] :lightspeed_api_secret LightSpeed api secret
    # @option opts [String] :commercehq_api_key CommerceHQ api key
    # @option opts [String] :commercehq_api_password CommerceHQ api password
    # @option opts [String] :wc_consumer_key Woocommerce consumer key
    # @option opts [String] :wc_consumer_secret Woocommerce consumer secret
    # @option opts [String] :magento_consumer_key Magento Consumer Key
    # @option opts [String] :magento_consumer_secret Magento Consumer Secret
    # @option opts [String] :magento_access_token Magento Access Token
    # @option opts [String] :magento_token_secret Magento Token Secret
    # @option opts [String] :prestashop_webservice_key Prestashop webservice key
    # @option opts [String] :wix_app_id Wix App ID
    # @option opts [String] :wix_app_secret_key Wix App Secret Key
    # @option opts [String] :wix_instance_id Wix Instance ID
    # @option opts [String] :wix_refresh_token Wix refresh token
    # @option opts [String] :mercado_libre_app_id Mercado Libre App ID
    # @option opts [String] :mercado_libre_app_secret_key Mercado Libre App Secret Key
    # @option opts [String] :mercado_libre_refresh_token Mercado Libre Refresh Token
    # @option opts [Integer] :zid_client_id Zid Client ID
    # @option opts [String] :zid_client_secret Zid Client Secret
    # @option opts [String] :zid_access_token Zid Access Token
    # @option opts [String] :zid_authorization Zid Authorization
    # @option opts [String] :zid_refresh_token Zid refresh token
    # @option opts [String] :flipkart_client_id Flipkart Client ID
    # @option opts [String] :flipkart_client_secret Flipkart Client Secret
    # @option opts [String] :allegro_client_id Allegro Client ID
    # @option opts [String] :allegro_client_secret Allegro Client Secret
    # @option opts [String] :allegro_access_token Allegro Access Token
    # @option opts [String] :allegro_refresh_token Allegro Refresh Token
    # @option opts [String] :allegro_environment Allegro Environment (default to 'production')
    # @option opts [String] :zoho_client_id Zoho Client ID
    # @option opts [String] :zoho_client_secret Zoho Client Secret
    # @option opts [String] :zoho_refresh_token Zoho Refresh Token
    # @option opts [String] :zoho_region Zoho API endpoint Region
    # @option opts [Integer] :tiendanube_user_id Tiendanube User ID
    # @option opts [String] :tiendanube_access_token Tiendanube Access Token
    # @option opts [String] :tiendanube_client_secret Tiendanube Client Secret
    # @option opts [String] :otto_client_id Otto Client ID
    # @option opts [String] :otto_client_secret Otto Client Secret
    # @option opts [String] :otto_app_id Otto App ID
    # @option opts [String] :otto_refresh_token Otto Refresh Token
    # @option opts [String] :otto_environment Otto Environment
    # @option opts [String] :otto_access_token Otto Access Token
    # @option opts [String] :tiktokshop_app_key TikTok Shop App Key
    # @option opts [String] :tiktokshop_app_secret TikTok Shop App Secret
    # @option opts [String] :tiktokshop_refresh_token TikTok Shop Refresh Token
    # @option opts [String] :tiktokshop_access_token TikTok Shop Access Token
    # @option opts [String] :salla_client_id Salla Client ID
    # @option opts [String] :salla_client_secret Salla Client Secret
    # @option opts [String] :salla_refresh_token Salla Refresh Token
    # @option opts [String] :salla_access_token Salla Access Token
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def account_config_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.account_config_update ...'
      end
      # resource path
      local_var_path = '/account.config.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'replace_parameters'] = opts[:'replace_parameters'] if !opts[:'replace_parameters'].nil?
      query_params[:'new_store_url'] = opts[:'new_store_url'] if !opts[:'new_store_url'].nil?
      query_params[:'new_store_key'] = opts[:'new_store_key'] if !opts[:'new_store_key'].nil?
      query_params[:'bridge_url'] = opts[:'bridge_url'] if !opts[:'bridge_url'].nil?
      query_params[:'store_root'] = opts[:'store_root'] if !opts[:'store_root'].nil?
      query_params[:'db_tables_prefix'] = opts[:'db_tables_prefix'] if !opts[:'db_tables_prefix'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?
      query_params[:'3dcart_private_key'] = opts[:'_3dcart_private_key'] if !opts[:'_3dcart_private_key'].nil?
      query_params[:'3dcart_access_token'] = opts[:'_3dcart_access_token'] if !opts[:'_3dcart_access_token'].nil?
      query_params[:'3dcartapi_api_key'] = opts[:'_3dcartapi_api_key'] if !opts[:'_3dcartapi_api_key'].nil?
      query_params[:'amazon_sp_client_id'] = opts[:'amazon_sp_client_id'] if !opts[:'amazon_sp_client_id'].nil?
      query_params[:'amazon_sp_client_secret'] = opts[:'amazon_sp_client_secret'] if !opts[:'amazon_sp_client_secret'].nil?
      query_params[:'amazon_sp_refresh_token'] = opts[:'amazon_sp_refresh_token'] if !opts[:'amazon_sp_refresh_token'].nil?
      query_params[:'amazon_sp_aws_region'] = opts[:'amazon_sp_aws_region'] if !opts[:'amazon_sp_aws_region'].nil?
      query_params[:'amazon_sp_api_environment'] = opts[:'amazon_sp_api_environment'] if !opts[:'amazon_sp_api_environment'].nil?
      query_params[:'amazon_seller_id'] = opts[:'amazon_seller_id'] if !opts[:'amazon_seller_id'].nil?
      query_params[:'aspdotnetstorefront_api_user'] = opts[:'aspdotnetstorefront_api_user'] if !opts[:'aspdotnetstorefront_api_user'].nil?
      query_params[:'aspdotnetstorefront_api_pass'] = opts[:'aspdotnetstorefront_api_pass'] if !opts[:'aspdotnetstorefront_api_pass'].nil?
      query_params[:'bigcommerceapi_admin_account'] = opts[:'bigcommerceapi_admin_account'] if !opts[:'bigcommerceapi_admin_account'].nil?
      query_params[:'bigcommerceapi_api_path'] = opts[:'bigcommerceapi_api_path'] if !opts[:'bigcommerceapi_api_path'].nil?
      query_params[:'bigcommerceapi_api_key'] = opts[:'bigcommerceapi_api_key'] if !opts[:'bigcommerceapi_api_key'].nil?
      query_params[:'bigcommerceapi_client_id'] = opts[:'bigcommerceapi_client_id'] if !opts[:'bigcommerceapi_client_id'].nil?
      query_params[:'bigcommerceapi_access_token'] = opts[:'bigcommerceapi_access_token'] if !opts[:'bigcommerceapi_access_token'].nil?
      query_params[:'bigcommerceapi_context'] = opts[:'bigcommerceapi_context'] if !opts[:'bigcommerceapi_context'].nil?
      query_params[:'bol_api_key'] = opts[:'bol_api_key'] if !opts[:'bol_api_key'].nil?
      query_params[:'bol_api_secret'] = opts[:'bol_api_secret'] if !opts[:'bol_api_secret'].nil?
      query_params[:'bol_retailer_id'] = opts[:'bol_retailer_id'] if !opts[:'bol_retailer_id'].nil?
      query_params[:'demandware_client_id'] = opts[:'demandware_client_id'] if !opts[:'demandware_client_id'].nil?
      query_params[:'demandware_api_password'] = opts[:'demandware_api_password'] if !opts[:'demandware_api_password'].nil?
      query_params[:'demandware_user_name'] = opts[:'demandware_user_name'] if !opts[:'demandware_user_name'].nil?
      query_params[:'demandware_user_password'] = opts[:'demandware_user_password'] if !opts[:'demandware_user_password'].nil?
      query_params[:'ebay_client_id'] = opts[:'ebay_client_id'] if !opts[:'ebay_client_id'].nil?
      query_params[:'ebay_client_secret'] = opts[:'ebay_client_secret'] if !opts[:'ebay_client_secret'].nil?
      query_params[:'ebay_runame'] = opts[:'ebay_runame'] if !opts[:'ebay_runame'].nil?
      query_params[:'ebay_access_token'] = opts[:'ebay_access_token'] if !opts[:'ebay_access_token'].nil?
      query_params[:'ebay_refresh_token'] = opts[:'ebay_refresh_token'] if !opts[:'ebay_refresh_token'].nil?
      query_params[:'ebay_environment'] = opts[:'ebay_environment'] if !opts[:'ebay_environment'].nil?
      query_params[:'ebay_site_id'] = opts[:'ebay_site_id'] if !opts[:'ebay_site_id'].nil?
      query_params[:'ecwid_acess_token'] = opts[:'ecwid_acess_token'] if !opts[:'ecwid_acess_token'].nil?
      query_params[:'ecwid_store_id'] = opts[:'ecwid_store_id'] if !opts[:'ecwid_store_id'].nil?
      query_params[:'lazada_app_id'] = opts[:'lazada_app_id'] if !opts[:'lazada_app_id'].nil?
      query_params[:'lazada_app_secret'] = opts[:'lazada_app_secret'] if !opts[:'lazada_app_secret'].nil?
      query_params[:'lazada_refresh_token'] = opts[:'lazada_refresh_token'] if !opts[:'lazada_refresh_token'].nil?
      query_params[:'lazada_region'] = opts[:'lazada_region'] if !opts[:'lazada_region'].nil?
      query_params[:'etsy_keystring'] = opts[:'etsy_keystring'] if !opts[:'etsy_keystring'].nil?
      query_params[:'etsy_shared_secret'] = opts[:'etsy_shared_secret'] if !opts[:'etsy_shared_secret'].nil?
      query_params[:'etsy_access_token'] = opts[:'etsy_access_token'] if !opts[:'etsy_access_token'].nil?
      query_params[:'etsy_token_secret'] = opts[:'etsy_token_secret'] if !opts[:'etsy_token_secret'].nil?
      query_params[:'etsy_client_id'] = opts[:'etsy_client_id'] if !opts[:'etsy_client_id'].nil?
      query_params[:'etsy_refresh_token'] = opts[:'etsy_refresh_token'] if !opts[:'etsy_refresh_token'].nil?
      query_params[:'facebook_app_id'] = opts[:'facebook_app_id'] if !opts[:'facebook_app_id'].nil?
      query_params[:'facebook_app_secret'] = opts[:'facebook_app_secret'] if !opts[:'facebook_app_secret'].nil?
      query_params[:'facebook_access_token'] = opts[:'facebook_access_token'] if !opts[:'facebook_access_token'].nil?
      query_params[:'facebook_business_id'] = opts[:'facebook_business_id'] if !opts[:'facebook_business_id'].nil?
      query_params[:'neto_api_key'] = opts[:'neto_api_key'] if !opts[:'neto_api_key'].nil?
      query_params[:'neto_api_username'] = opts[:'neto_api_username'] if !opts[:'neto_api_username'].nil?
      query_params[:'shopline_access_token'] = opts[:'shopline_access_token'] if !opts[:'shopline_access_token'].nil?
      query_params[:'shopline_app_key'] = opts[:'shopline_app_key'] if !opts[:'shopline_app_key'].nil?
      query_params[:'shopline_app_secret'] = opts[:'shopline_app_secret'] if !opts[:'shopline_app_secret'].nil?
      query_params[:'shopline_shared_secret'] = opts[:'shopline_shared_secret'] if !opts[:'shopline_shared_secret'].nil?
      query_params[:'shopify_access_token'] = opts[:'shopify_access_token'] if !opts[:'shopify_access_token'].nil?
      query_params[:'shopify_api_key'] = opts[:'shopify_api_key'] if !opts[:'shopify_api_key'].nil?
      query_params[:'shopify_api_password'] = opts[:'shopify_api_password'] if !opts[:'shopify_api_password'].nil?
      query_params[:'shopify_shared_secret'] = opts[:'shopify_shared_secret'] if !opts[:'shopify_shared_secret'].nil?
      query_params[:'shoplazza_access_token'] = opts[:'shoplazza_access_token'] if !opts[:'shoplazza_access_token'].nil?
      query_params[:'shoplazza_shared_secret'] = opts[:'shoplazza_shared_secret'] if !opts[:'shoplazza_shared_secret'].nil?
      query_params[:'miva_access_token'] = opts[:'miva_access_token'] if !opts[:'miva_access_token'].nil?
      query_params[:'miva_signature'] = opts[:'miva_signature'] if !opts[:'miva_signature'].nil?
      query_params[:'shopware_access_key'] = opts[:'shopware_access_key'] if !opts[:'shopware_access_key'].nil?
      query_params[:'shopware_api_key'] = opts[:'shopware_api_key'] if !opts[:'shopware_api_key'].nil?
      query_params[:'shopware_api_secret'] = opts[:'shopware_api_secret'] if !opts[:'shopware_api_secret'].nil?
      query_params[:'bigcartel_user_name'] = opts[:'bigcartel_user_name'] if !opts[:'bigcartel_user_name'].nil?
      query_params[:'bigcartel_password'] = opts[:'bigcartel_password'] if !opts[:'bigcartel_password'].nil?
      query_params[:'volusion_login'] = opts[:'volusion_login'] if !opts[:'volusion_login'].nil?
      query_params[:'volusion_password'] = opts[:'volusion_password'] if !opts[:'volusion_password'].nil?
      query_params[:'walmart_client_id'] = opts[:'walmart_client_id'] if !opts[:'walmart_client_id'].nil?
      query_params[:'walmart_client_secret'] = opts[:'walmart_client_secret'] if !opts[:'walmart_client_secret'].nil?
      query_params[:'walmart_environment'] = opts[:'walmart_environment'] if !opts[:'walmart_environment'].nil?
      query_params[:'walmart_channel_type'] = opts[:'walmart_channel_type'] if !opts[:'walmart_channel_type'].nil?
      query_params[:'walmart_region'] = opts[:'walmart_region'] if !opts[:'walmart_region'].nil?
      query_params[:'square_client_id'] = opts[:'square_client_id'] if !opts[:'square_client_id'].nil?
      query_params[:'square_client_secret'] = opts[:'square_client_secret'] if !opts[:'square_client_secret'].nil?
      query_params[:'square_refresh_token'] = opts[:'square_refresh_token'] if !opts[:'square_refresh_token'].nil?
      query_params[:'squarespace_api_key'] = opts[:'squarespace_api_key'] if !opts[:'squarespace_api_key'].nil?
      query_params[:'squarespace_client_id'] = opts[:'squarespace_client_id'] if !opts[:'squarespace_client_id'].nil?
      query_params[:'squarespace_client_secret'] = opts[:'squarespace_client_secret'] if !opts[:'squarespace_client_secret'].nil?
      query_params[:'squarespace_access_token'] = opts[:'squarespace_access_token'] if !opts[:'squarespace_access_token'].nil?
      query_params[:'squarespace_refresh_token'] = opts[:'squarespace_refresh_token'] if !opts[:'squarespace_refresh_token'].nil?
      query_params[:'hybris_client_id'] = opts[:'hybris_client_id'] if !opts[:'hybris_client_id'].nil?
      query_params[:'hybris_client_secret'] = opts[:'hybris_client_secret'] if !opts[:'hybris_client_secret'].nil?
      query_params[:'hybris_username'] = opts[:'hybris_username'] if !opts[:'hybris_username'].nil?
      query_params[:'hybris_password'] = opts[:'hybris_password'] if !opts[:'hybris_password'].nil?
      query_params[:'hybris_websites'] = @api_client.build_collection_param(opts[:'hybris_websites'], :multi) if !opts[:'hybris_websites'].nil?
      query_params[:'lightspeed_api_key'] = opts[:'lightspeed_api_key'] if !opts[:'lightspeed_api_key'].nil?
      query_params[:'lightspeed_api_secret'] = opts[:'lightspeed_api_secret'] if !opts[:'lightspeed_api_secret'].nil?
      query_params[:'commercehq_api_key'] = opts[:'commercehq_api_key'] if !opts[:'commercehq_api_key'].nil?
      query_params[:'commercehq_api_password'] = opts[:'commercehq_api_password'] if !opts[:'commercehq_api_password'].nil?
      query_params[:'wc_consumer_key'] = opts[:'wc_consumer_key'] if !opts[:'wc_consumer_key'].nil?
      query_params[:'wc_consumer_secret'] = opts[:'wc_consumer_secret'] if !opts[:'wc_consumer_secret'].nil?
      query_params[:'magento_consumer_key'] = opts[:'magento_consumer_key'] if !opts[:'magento_consumer_key'].nil?
      query_params[:'magento_consumer_secret'] = opts[:'magento_consumer_secret'] if !opts[:'magento_consumer_secret'].nil?
      query_params[:'magento_access_token'] = opts[:'magento_access_token'] if !opts[:'magento_access_token'].nil?
      query_params[:'magento_token_secret'] = opts[:'magento_token_secret'] if !opts[:'magento_token_secret'].nil?
      query_params[:'prestashop_webservice_key'] = opts[:'prestashop_webservice_key'] if !opts[:'prestashop_webservice_key'].nil?
      query_params[:'wix_app_id'] = opts[:'wix_app_id'] if !opts[:'wix_app_id'].nil?
      query_params[:'wix_app_secret_key'] = opts[:'wix_app_secret_key'] if !opts[:'wix_app_secret_key'].nil?
      query_params[:'wix_instance_id'] = opts[:'wix_instance_id'] if !opts[:'wix_instance_id'].nil?
      query_params[:'wix_refresh_token'] = opts[:'wix_refresh_token'] if !opts[:'wix_refresh_token'].nil?
      query_params[:'mercado_libre_app_id'] = opts[:'mercado_libre_app_id'] if !opts[:'mercado_libre_app_id'].nil?
      query_params[:'mercado_libre_app_secret_key'] = opts[:'mercado_libre_app_secret_key'] if !opts[:'mercado_libre_app_secret_key'].nil?
      query_params[:'mercado_libre_refresh_token'] = opts[:'mercado_libre_refresh_token'] if !opts[:'mercado_libre_refresh_token'].nil?
      query_params[:'zid_client_id'] = opts[:'zid_client_id'] if !opts[:'zid_client_id'].nil?
      query_params[:'zid_client_secret'] = opts[:'zid_client_secret'] if !opts[:'zid_client_secret'].nil?
      query_params[:'zid_access_token'] = opts[:'zid_access_token'] if !opts[:'zid_access_token'].nil?
      query_params[:'zid_authorization'] = opts[:'zid_authorization'] if !opts[:'zid_authorization'].nil?
      query_params[:'zid_refresh_token'] = opts[:'zid_refresh_token'] if !opts[:'zid_refresh_token'].nil?
      query_params[:'flipkart_client_id'] = opts[:'flipkart_client_id'] if !opts[:'flipkart_client_id'].nil?
      query_params[:'flipkart_client_secret'] = opts[:'flipkart_client_secret'] if !opts[:'flipkart_client_secret'].nil?
      query_params[:'allegro_client_id'] = opts[:'allegro_client_id'] if !opts[:'allegro_client_id'].nil?
      query_params[:'allegro_client_secret'] = opts[:'allegro_client_secret'] if !opts[:'allegro_client_secret'].nil?
      query_params[:'allegro_access_token'] = opts[:'allegro_access_token'] if !opts[:'allegro_access_token'].nil?
      query_params[:'allegro_refresh_token'] = opts[:'allegro_refresh_token'] if !opts[:'allegro_refresh_token'].nil?
      query_params[:'allegro_environment'] = opts[:'allegro_environment'] if !opts[:'allegro_environment'].nil?
      query_params[:'zoho_client_id'] = opts[:'zoho_client_id'] if !opts[:'zoho_client_id'].nil?
      query_params[:'zoho_client_secret'] = opts[:'zoho_client_secret'] if !opts[:'zoho_client_secret'].nil?
      query_params[:'zoho_refresh_token'] = opts[:'zoho_refresh_token'] if !opts[:'zoho_refresh_token'].nil?
      query_params[:'zoho_region'] = opts[:'zoho_region'] if !opts[:'zoho_region'].nil?
      query_params[:'tiendanube_user_id'] = opts[:'tiendanube_user_id'] if !opts[:'tiendanube_user_id'].nil?
      query_params[:'tiendanube_access_token'] = opts[:'tiendanube_access_token'] if !opts[:'tiendanube_access_token'].nil?
      query_params[:'tiendanube_client_secret'] = opts[:'tiendanube_client_secret'] if !opts[:'tiendanube_client_secret'].nil?
      query_params[:'otto_client_id'] = opts[:'otto_client_id'] if !opts[:'otto_client_id'].nil?
      query_params[:'otto_client_secret'] = opts[:'otto_client_secret'] if !opts[:'otto_client_secret'].nil?
      query_params[:'otto_app_id'] = opts[:'otto_app_id'] if !opts[:'otto_app_id'].nil?
      query_params[:'otto_refresh_token'] = opts[:'otto_refresh_token'] if !opts[:'otto_refresh_token'].nil?
      query_params[:'otto_environment'] = opts[:'otto_environment'] if !opts[:'otto_environment'].nil?
      query_params[:'otto_access_token'] = opts[:'otto_access_token'] if !opts[:'otto_access_token'].nil?
      query_params[:'tiktokshop_app_key'] = opts[:'tiktokshop_app_key'] if !opts[:'tiktokshop_app_key'].nil?
      query_params[:'tiktokshop_app_secret'] = opts[:'tiktokshop_app_secret'] if !opts[:'tiktokshop_app_secret'].nil?
      query_params[:'tiktokshop_refresh_token'] = opts[:'tiktokshop_refresh_token'] if !opts[:'tiktokshop_refresh_token'].nil?
      query_params[:'tiktokshop_access_token'] = opts[:'tiktokshop_access_token'] if !opts[:'tiktokshop_access_token'].nil?
      query_params[:'salla_client_id'] = opts[:'salla_client_id'] if !opts[:'salla_client_id'].nil?
      query_params[:'salla_client_secret'] = opts[:'salla_client_secret'] if !opts[:'salla_client_secret'].nil?
      query_params[:'salla_refresh_token'] = opts[:'salla_refresh_token'] if !opts[:'salla_refresh_token'].nil?
      query_params[:'salla_access_token'] = opts[:'salla_access_token'] if !opts[:'salla_access_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.account_config_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_config_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # account.failed_webhooks
    # If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [AccountFailedWebhooks200Response]
    def account_failed_webhooks(opts = {})
      data, _status_code, _headers = account_failed_webhooks_with_http_info(opts)
      data
    end

    # account.failed_webhooks
    # If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :ids List of сomma-separated webhook ids
    # @return [Array<(AccountFailedWebhooks200Response, Integer, Hash)>] AccountFailedWebhooks200Response data, response status code and response headers
    def account_failed_webhooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.account_failed_webhooks ...'
      end
      # resource path
      local_var_path = '/account.failed_webhooks.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountFailedWebhooks200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.account_failed_webhooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_failed_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # account.supported_platforms
    # Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
    # @param [Hash] opts the optional parameters
    # @return [AccountSupportedPlatforms200Response]
    def account_supported_platforms(opts = {})
      data, _status_code, _headers = account_supported_platforms_with_http_info(opts)
      data
    end

    # account.supported_platforms
    # Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountSupportedPlatforms200Response, Integer, Hash)>] AccountSupportedPlatforms200Response data, response status code and response headers
    def account_supported_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountApi.account_supported_platforms ...'
      end
      # resource path
      local_var_path = '/account.supported_platforms.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountSupportedPlatforms200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountApi.account_supported_platforms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountApi#account_supported_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
