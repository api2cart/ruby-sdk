=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class CartApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # cart.catalog_price_rules.count
    # Get count of cart catalog price rules discounts.
    # @param [Hash] opts the optional parameters
    # @return [CartCatalogPriceRulesCount200Response]
    def cart_catalog_price_rules_count(opts = {})
      data, _status_code, _headers = cart_catalog_price_rules_count_with_http_info(opts)
      data
    end

    # cart.catalog_price_rules.count
    # Get count of cart catalog price rules discounts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartCatalogPriceRulesCount200Response, Integer, Hash)>] CartCatalogPriceRulesCount200Response data, response status code and response headers
    def cart_catalog_price_rules_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_catalog_price_rules_count ...'
      end
      # resource path
      local_var_path = '/cart.catalog_price_rules.count.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartCatalogPriceRulesCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_catalog_price_rules_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_catalog_price_rules_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.catalog_price_rules.list
    # Get cart catalog price rules discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :ids Retrieves  catalog_price_rules by ids
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartCatalogPriceRulesList]
    def cart_catalog_price_rules_list(opts = {})
      data, _status_code, _headers = cart_catalog_price_rules_list_with_http_info(opts)
      data
    end

    # cart.catalog_price_rules.list
    # Get cart catalog price rules discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :ids Retrieves  catalog_price_rules by ids
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartCatalogPriceRulesList, Integer, Hash)>] ModelResponseCartCatalogPriceRulesList data, response status code and response headers
    def cart_catalog_price_rules_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_catalog_price_rules_list ...'
      end
      # resource path
      local_var_path = '/cart.catalog_price_rules.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartCatalogPriceRulesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_catalog_price_rules_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_catalog_price_rules_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.coupon.add
    # Use this method to create a coupon with specified conditions.
    # @param cart_coupon_add [CartCouponAdd] 
    # @param [Hash] opts the optional parameters
    # @return [CartCouponAdd200Response]
    def cart_coupon_add(cart_coupon_add, opts = {})
      data, _status_code, _headers = cart_coupon_add_with_http_info(cart_coupon_add, opts)
      data
    end

    # cart.coupon.add
    # Use this method to create a coupon with specified conditions.
    # @param cart_coupon_add [CartCouponAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartCouponAdd200Response, Integer, Hash)>] CartCouponAdd200Response data, response status code and response headers
    def cart_coupon_add_with_http_info(cart_coupon_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_coupon_add ...'
      end
      # verify the required parameter 'cart_coupon_add' is set
      if @api_client.config.client_side_validation && cart_coupon_add.nil?
        fail ArgumentError, "Missing the required parameter 'cart_coupon_add' when calling CartApi.cart_coupon_add"
      end
      # resource path
      local_var_path = '/cart.coupon.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cart_coupon_add)

      # return_type
      return_type = opts[:debug_return_type] || 'CartCouponAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_coupon_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.coupon.condition.add
    # Use this method to add additional conditions for coupon application.
    # @param coupon_id [String] Coupon Id
    # @param entity [String] Defines condition entity type
    # @param key [String] Defines condition entity attribute key
    # @param operator [String] Defines condition operator
    # @param value [String] Defines condition value, can be comma separated according to the operator.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target Defines condition operator (default to 'coupon_prerequisite')
    # @option opts [Boolean] :include_tax Indicates whether to apply a discount for taxes. (default to false)
    # @option opts [Boolean] :include_shipping Indicates whether to apply a discount for shipping. (default to false)
    # @option opts [String] :store_id Store Id
    # @return [BasketLiveShippingServiceDelete200Response]
    def cart_coupon_condition_add(coupon_id, entity, key, operator, value, opts = {})
      data, _status_code, _headers = cart_coupon_condition_add_with_http_info(coupon_id, entity, key, operator, value, opts)
      data
    end

    # cart.coupon.condition.add
    # Use this method to add additional conditions for coupon application.
    # @param coupon_id [String] Coupon Id
    # @param entity [String] Defines condition entity type
    # @param key [String] Defines condition entity attribute key
    # @param operator [String] Defines condition operator
    # @param value [String] Defines condition value, can be comma separated according to the operator.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target Defines condition operator (default to 'coupon_prerequisite')
    # @option opts [Boolean] :include_tax Indicates whether to apply a discount for taxes. (default to false)
    # @option opts [Boolean] :include_shipping Indicates whether to apply a discount for shipping. (default to false)
    # @option opts [String] :store_id Store Id
    # @return [Array<(BasketLiveShippingServiceDelete200Response, Integer, Hash)>] BasketLiveShippingServiceDelete200Response data, response status code and response headers
    def cart_coupon_condition_add_with_http_info(coupon_id, entity, key, operator, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_coupon_condition_add ...'
      end
      # verify the required parameter 'coupon_id' is set
      if @api_client.config.client_side_validation && coupon_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_id' when calling CartApi.cart_coupon_condition_add"
      end
      # verify the required parameter 'entity' is set
      if @api_client.config.client_side_validation && entity.nil?
        fail ArgumentError, "Missing the required parameter 'entity' when calling CartApi.cart_coupon_condition_add"
      end
      # verify enum value
      allowable_values = ["order", "order_shipping_address", "product", "customer"]
      if @api_client.config.client_side_validation && !allowable_values.include?(entity)
        fail ArgumentError, "invalid value for \"entity\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling CartApi.cart_coupon_condition_add"
      end
      # verify enum value
      allowable_values = ["total", "subtotal", "shipping_total", "total_quantity", "total_weight", "country", "product_id", "variant_id", "category_id", "customer_id", "item_price", "item_total_price", "item_quantity", "carrier_id"]
      if @api_client.config.client_side_validation && !allowable_values.include?(key)
        fail ArgumentError, "invalid value for \"key\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'operator' is set
      if @api_client.config.client_side_validation && operator.nil?
        fail ArgumentError, "Missing the required parameter 'operator' when calling CartApi.cart_coupon_condition_add"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CartApi.cart_coupon_condition_add"
      end
      # resource path
      local_var_path = '/cart.coupon.condition.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'coupon_id'] = coupon_id
      query_params[:'entity'] = entity
      query_params[:'key'] = key
      query_params[:'operator'] = operator
      query_params[:'value'] = value
      query_params[:'target'] = opts[:'target'] if !opts[:'target'].nil?
      query_params[:'include_tax'] = opts[:'include_tax'] if !opts[:'include_tax'].nil?
      query_params[:'include_shipping'] = opts[:'include_shipping'] if !opts[:'include_shipping'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketLiveShippingServiceDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_coupon_condition_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_condition_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.coupon.count
    # This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @return [CartCouponCount200Response]
    def cart_coupon_count(opts = {})
      data, _status_code, _headers = cart_coupon_count_with_http_info(opts)
      data
    end

    # cart.coupon.count
    # This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @return [Array<(CartCouponCount200Response, Integer, Hash)>] CartCouponCount200Response data, response status code and response headers
    def cart_coupon_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_coupon_count ...'
      end
      # resource path
      local_var_path = '/cart.coupon.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'date_start_from'] = opts[:'date_start_from'] if !opts[:'date_start_from'].nil?
      query_params[:'date_start_to'] = opts[:'date_start_to'] if !opts[:'date_start_to'].nil?
      query_params[:'date_end_from'] = opts[:'date_end_from'] if !opts[:'date_end_from'].nil?
      query_params[:'date_end_to'] = opts[:'date_end_to'] if !opts[:'date_end_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartCouponCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_coupon_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.coupon.delete
    # Delete coupon
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def cart_coupon_delete(id, opts = {})
      data, _status_code, _headers = cart_coupon_delete_with_http_info(id, opts)
      data
    end

    # cart.coupon.delete
    # Delete coupon
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def cart_coupon_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_coupon_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartApi.cart_coupon_delete"
      end
      # resource path
      local_var_path = '/cart.coupon.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_coupon_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.coupon.list
    # Get cart coupon discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :coupons_ids Filter coupons by ids
    # @option opts [String] :store_id Filter coupons by store id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :avail Filter coupons by avail status
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,code,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartCouponList]
    def cart_coupon_list(opts = {})
      data, _status_code, _headers = cart_coupon_list_with_http_info(opts)
      data
    end

    # cart.coupon.list
    # Get cart coupon discounts.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :coupons_ids Filter coupons by ids
    # @option opts [String] :store_id Filter coupons by store id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :avail Filter coupons by avail status
    # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
    # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
    # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
    # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,code,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartCouponList, Integer, Hash)>] ModelResponseCartCouponList data, response status code and response headers
    def cart_coupon_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_coupon_list ...'
      end
      # resource path
      local_var_path = '/cart.coupon.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'coupons_ids'] = opts[:'coupons_ids'] if !opts[:'coupons_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'date_start_from'] = opts[:'date_start_from'] if !opts[:'date_start_from'].nil?
      query_params[:'date_start_to'] = opts[:'date_start_to'] if !opts[:'date_start_to'].nil?
      query_params[:'date_end_from'] = opts[:'date_end_from'] if !opts[:'date_end_from'].nil?
      query_params[:'date_end_to'] = opts[:'date_end_to'] if !opts[:'date_end_to'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartCouponList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_coupon_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_coupon_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.delete
    # Remove store from API2Cart
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :delete_bridge Identifies if there is a necessity to delete bridge (default to true)
    # @return [CartDelete200Response]
    def cart_delete(opts = {})
      data, _status_code, _headers = cart_delete_with_http_info(opts)
      data
    end

    # cart.delete
    # Remove store from API2Cart
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :delete_bridge Identifies if there is a necessity to delete bridge (default to true)
    # @return [Array<(CartDelete200Response, Integer, Hash)>] CartDelete200Response data, response status code and response headers
    def cart_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_delete ...'
      end
      # resource path
      local_var_path = '/cart.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'delete_bridge'] = opts[:'delete_bridge'] if !opts[:'delete_bridge'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.giftcard.add
    # Use this method to create a gift card for a specified amount.
    # @param amount [Float] Defines the gift card amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Gift card code
    # @option opts [String] :owner_email Gift card owner email
    # @option opts [String] :recipient_email Gift card recipient email
    # @option opts [String] :recipient_name Gift card recipient name
    # @option opts [String] :owner_name Gift card owner name
    # @return [CartGiftcardAdd200Response]
    def cart_giftcard_add(amount, opts = {})
      data, _status_code, _headers = cart_giftcard_add_with_http_info(amount, opts)
      data
    end

    # cart.giftcard.add
    # Use this method to create a gift card for a specified amount.
    # @param amount [Float] Defines the gift card amount value.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Gift card code
    # @option opts [String] :owner_email Gift card owner email
    # @option opts [String] :recipient_email Gift card recipient email
    # @option opts [String] :recipient_name Gift card recipient name
    # @option opts [String] :owner_name Gift card owner name
    # @return [Array<(CartGiftcardAdd200Response, Integer, Hash)>] CartGiftcardAdd200Response data, response status code and response headers
    def cart_giftcard_add_with_http_info(amount, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_giftcard_add ...'
      end
      # verify the required parameter 'amount' is set
      if @api_client.config.client_side_validation && amount.nil?
        fail ArgumentError, "Missing the required parameter 'amount' when calling CartApi.cart_giftcard_add"
      end
      # resource path
      local_var_path = '/cart.giftcard.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'amount'] = amount
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'owner_email'] = opts[:'owner_email'] if !opts[:'owner_email'].nil?
      query_params[:'recipient_email'] = opts[:'recipient_email'] if !opts[:'recipient_email'].nil?
      query_params[:'recipient_name'] = opts[:'recipient_name'] if !opts[:'recipient_name'].nil?
      query_params[:'owner_name'] = opts[:'owner_name'] if !opts[:'owner_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartGiftcardAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_giftcard_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.giftcard.count
    # Get gift cards count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [CartGiftcardCount200Response]
    def cart_giftcard_count(opts = {})
      data, _status_code, _headers = cart_giftcard_count_with_http_info(opts)
      data
    end

    # cart.giftcard.count
    # Get gift cards count.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(CartGiftcardCount200Response, Integer, Hash)>] CartGiftcardCount200Response data, response status code and response headers
    def cart_giftcard_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_giftcard_count ...'
      end
      # resource path
      local_var_path = '/cart.giftcard.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartGiftcardCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_giftcard_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.giftcard.delete
    # Delete giftcard
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @return [AttributeDelete200Response]
    def cart_giftcard_delete(id, opts = {})
      data, _status_code, _headers = cart_giftcard_delete_with_http_info(id, opts)
      data
    end

    # cart.giftcard.delete
    # Delete giftcard
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def cart_giftcard_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_giftcard_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartApi.cart_giftcard_delete"
      end
      # resource path
      local_var_path = '/cart.giftcard.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_giftcard_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.giftcard.list
    # Get gift cards list.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,code,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartGiftCardList]
    def cart_giftcard_list(opts = {})
      data, _status_code, _headers = cart_giftcard_list_with_http_info(opts)
      data
    end

    # cart.giftcard.list
    # Get gift cards list.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,code,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartGiftCardList, Integer, Hash)>] ModelResponseCartGiftCardList data, response status code and response headers
    def cart_giftcard_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_giftcard_list ...'
      end
      # resource path
      local_var_path = '/cart.giftcard.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartGiftCardList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_giftcard_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_giftcard_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.info
    # This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'store_name,store_url,db_prefix')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [CartInfo200Response]
    def cart_info(opts = {})
      data, _status_code, _headers = cart_info_with_http_info(opts)
      data
    end

    # cart.info
    # This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'store_name,store_url,db_prefix')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(CartInfo200Response, Integer, Hash)>] CartInfo200Response data, response status code and response headers
    def cart_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_info ...'
      end
      # resource path
      local_var_path = '/cart.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.meta_data.list
    # Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
    # @param entity_id [String] Entity Id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :key Key
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'key,value')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartMetaDataList]
    def cart_meta_data_list(entity_id, opts = {})
      data, _status_code, _headers = cart_meta_data_list_with_http_info(entity_id, opts)
      data
    end

    # cart.meta_data.list
    # Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
    # @param entity_id [String] Entity Id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :key Key
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'key,value')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartMetaDataList, Integer, Hash)>] ModelResponseCartMetaDataList data, response status code and response headers
    def cart_meta_data_list_with_http_info(entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_meta_data_list ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling CartApi.cart_meta_data_list"
      end
      # resource path
      local_var_path = '/cart.meta_data.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity_id'] = entity_id
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'key'] = opts[:'key'] if !opts[:'key'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartMetaDataList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_meta_data_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_meta_data_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.meta_data.set
    # Set meta data for a specific entity
    # @param entity_id [String] Entity Id
    # @param key [String] Key
    # @param value [String] Value
    # @param namespace [String] Metafield namespace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [AttributeAdd200Response]
    def cart_meta_data_set(entity_id, key, value, namespace, opts = {})
      data, _status_code, _headers = cart_meta_data_set_with_http_info(entity_id, key, value, namespace, opts)
      data
    end

    # cart.meta_data.set
    # Set meta data for a specific entity
    # @param entity_id [String] Entity Id
    # @param key [String] Key
    # @param value [String] Value
    # @param namespace [String] Metafield namespace
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [Array<(AttributeAdd200Response, Integer, Hash)>] AttributeAdd200Response data, response status code and response headers
    def cart_meta_data_set_with_http_info(entity_id, key, value, namespace, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_meta_data_set ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling CartApi.cart_meta_data_set"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling CartApi.cart_meta_data_set"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling CartApi.cart_meta_data_set"
      end
      # verify the required parameter 'namespace' is set
      if @api_client.config.client_side_validation && namespace.nil?
        fail ArgumentError, "Missing the required parameter 'namespace' when calling CartApi.cart_meta_data_set"
      end
      # resource path
      local_var_path = '/cart.meta_data.set.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity_id'] = entity_id
      query_params[:'key'] = key
      query_params[:'value'] = value
      query_params[:'namespace'] = namespace
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_meta_data_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_meta_data_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.meta_data.unset
    # Unset meta data for a specific entity
    # @param entity_id [String] Entity Id
    # @param key [String] Key
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @return [BasketLiveShippingServiceDelete200Response]
    def cart_meta_data_unset(entity_id, key, id, opts = {})
      data, _status_code, _headers = cart_meta_data_unset_with_http_info(entity_id, key, id, opts)
      data
    end

    # cart.meta_data.unset
    # Unset meta data for a specific entity
    # @param entity_id [String] Entity Id
    # @param key [String] Key
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity Entity (default to 'product')
    # @option opts [String] :store_id Store Id
    # @return [Array<(BasketLiveShippingServiceDelete200Response, Integer, Hash)>] BasketLiveShippingServiceDelete200Response data, response status code and response headers
    def cart_meta_data_unset_with_http_info(entity_id, key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_meta_data_unset ...'
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling CartApi.cart_meta_data_unset"
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling CartApi.cart_meta_data_unset"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartApi.cart_meta_data_unset"
      end
      # resource path
      local_var_path = '/cart.meta_data.unset.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity_id'] = entity_id
      query_params[:'key'] = key
      query_params[:'id'] = id
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketLiveShippingServiceDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_meta_data_unset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_meta_data_unset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.methods
    # Returns a list of supported API methods.
    # @param [Hash] opts the optional parameters
    # @return [CartMethods200Response]
    def cart_methods(opts = {})
      data, _status_code, _headers = cart_methods_with_http_info(opts)
      data
    end

    # cart.methods
    # Returns a list of supported API methods.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartMethods200Response, Integer, Hash)>] CartMethods200Response data, response status code and response headers
    def cart_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_methods ...'
      end
      # resource path
      local_var_path = '/cart.methods.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartMethods200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.plugin.list
    # Get a list of third-party plugins installed on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @return [CartPluginList200Response]
    def cart_plugin_list(opts = {})
      data, _status_code, _headers = cart_plugin_list_with_http_info(opts)
      data
    end

    # cart.plugin.list
    # Get a list of third-party plugins installed on the store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @return [Array<(CartPluginList200Response, Integer, Hash)>] CartPluginList200Response data, response status code and response headers
    def cart_plugin_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_plugin_list ...'
      end
      # resource path
      local_var_path = '/cart.plugin.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartPluginList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_plugin_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_plugin_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.script.add
    # Add new script to the storefront
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The user-friendly script name
    # @option opts [String] :description The user-friendly description
    # @option opts [String] :html An html string containing exactly one &#x60;script&#x60; tag.
    # @option opts [String] :src The URL of the remote script
    # @option opts [String] :load_method The load method to use for the script
    # @option opts [String] :scope The page or pages on the online store where the script should be included (default to 'storefront')
    # @option opts [String] :events Event for run scripts
    # @option opts [String] :store_id Store Id
    # @return [CartScriptAdd200Response]
    def cart_script_add(opts = {})
      data, _status_code, _headers = cart_script_add_with_http_info(opts)
      data
    end

    # cart.script.add
    # Add new script to the storefront
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The user-friendly script name
    # @option opts [String] :description The user-friendly description
    # @option opts [String] :html An html string containing exactly one &#x60;script&#x60; tag.
    # @option opts [String] :src The URL of the remote script
    # @option opts [String] :load_method The load method to use for the script
    # @option opts [String] :scope The page or pages on the online store where the script should be included (default to 'storefront')
    # @option opts [String] :events Event for run scripts
    # @option opts [String] :store_id Store Id
    # @return [Array<(CartScriptAdd200Response, Integer, Hash)>] CartScriptAdd200Response data, response status code and response headers
    def cart_script_add_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_script_add ...'
      end
      # resource path
      local_var_path = '/cart.script.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'html'] = opts[:'html'] if !opts[:'html'].nil?
      query_params[:'src'] = opts[:'src'] if !opts[:'src'].nil?
      query_params[:'load_method'] = opts[:'load_method'] if !opts[:'load_method'].nil?
      query_params[:'scope'] = opts[:'scope'] if !opts[:'scope'].nil?
      query_params[:'events'] = opts[:'events'] if !opts[:'events'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartScriptAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_script_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_script_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.script.delete
    # Remove script from the storefront
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def cart_script_delete(id, opts = {})
      data, _status_code, _headers = cart_script_delete_with_http_info(id, opts)
      data
    end

    # cart.script.delete
    # Remove script from the storefront
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def cart_script_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_script_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CartApi.cart_script_delete"
      end
      # resource path
      local_var_path = '/cart.script.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_script_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_script_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.script.list
    # Get scripts installed to the storefront
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :script_ids Retrieves only scripts with specific ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartScriptList]
    def cart_script_list(opts = {})
      data, _status_code, _headers = cart_script_list_with_http_info(opts)
      data
    end

    # cart.script.list
    # Get scripts installed to the storefront
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :script_ids Retrieves only scripts with specific ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartScriptList, Integer, Hash)>] ModelResponseCartScriptList data, response status code and response headers
    def cart_script_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_script_list ...'
      end
      # resource path
      local_var_path = '/cart.script.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'script_ids'] = opts[:'script_ids'] if !opts[:'script_ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartScriptList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_script_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_script_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.shipping_zones.list
    # Get list of shipping zones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,enabled')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseCartShippingZonesList]
    def cart_shipping_zones_list(opts = {})
      data, _status_code, _headers = cart_shipping_zones_list_with_http_info(opts)
      data
    end

    # cart.shipping_zones.list
    # Get list of shipping zones
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,enabled')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseCartShippingZonesList, Integer, Hash)>] ModelResponseCartShippingZonesList data, response status code and response headers
    def cart_shipping_zones_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_shipping_zones_list ...'
      end
      # resource path
      local_var_path = '/cart.shipping_zones.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCartShippingZonesList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_shipping_zones_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_shipping_zones_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cart.validate
    # This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_version Specify if api2cart should validate cart version (default to false)
    # @return [CartValidate200Response]
    def cart_validate(opts = {})
      data, _status_code, _headers = cart_validate_with_http_info(opts)
      data
    end

    # cart.validate
    # This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :validate_version Specify if api2cart should validate cart version (default to false)
    # @return [Array<(CartValidate200Response, Integer, Hash)>] CartValidate200Response data, response status code and response headers
    def cart_validate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CartApi.cart_validate ...'
      end
      # resource path
      local_var_path = '/cart.validate.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'validate_version'] = opts[:'validate_version'] if !opts[:'validate_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartValidate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CartApi.cart_validate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CartApi#cart_validate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
