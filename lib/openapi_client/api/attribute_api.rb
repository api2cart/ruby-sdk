=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class AttributeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # attribute.add
    # Add new attribute
    # @param type [String] Defines attribute&#39;s type
    # @param name [String] Defines attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :visible Set visibility status (default to false)
    # @option opts [Boolean] :required Defines if the option is required (default to false)
    # @option opts [Integer] :position Attribute&#x60;s position (default to 0)
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :is_global Attribute saving scope (default to 'Store')
    # @option opts [Boolean] :is_searchable Use attribute in Quick Search (default to false)
    # @option opts [String] :is_filterable Use In Layered Navigation (default to 'No')
    # @option opts [Boolean] :is_comparable Comparable on Front-end (default to false)
    # @option opts [Boolean] :is_html_allowed_on_front Allow HTML Tags on Frontend (default to false)
    # @option opts [Boolean] :is_filterable_in_search Use In Search Results Layered Navigation (default to false)
    # @option opts [Boolean] :is_configurable Use To Create Configurable Product (default to false)
    # @option opts [Boolean] :is_visible_in_advanced_search Use in Advanced Search (default to false)
    # @option opts [Boolean] :is_used_for_promo_rules Use for Promo Rule Conditions (default to false)
    # @option opts [Boolean] :used_in_product_listing Used in Product Listing (default to false)
    # @option opts [Boolean] :used_for_sort_by Used for Sorting in Product Listing (default to false)
    # @option opts [String] :apply_to Types of products which can have this attribute (default to 'all_types')
    # @return [AttributeAdd200Response]
    def attribute_add(type, name, opts = {})
      data, _status_code, _headers = attribute_add_with_http_info(type, name, opts)
      data
    end

    # attribute.add
    # Add new attribute
    # @param type [String] Defines attribute&#39;s type
    # @param name [String] Defines attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :visible Set visibility status (default to false)
    # @option opts [Boolean] :required Defines if the option is required (default to false)
    # @option opts [Integer] :position Attribute&#x60;s position (default to 0)
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :is_global Attribute saving scope (default to 'Store')
    # @option opts [Boolean] :is_searchable Use attribute in Quick Search (default to false)
    # @option opts [String] :is_filterable Use In Layered Navigation (default to 'No')
    # @option opts [Boolean] :is_comparable Comparable on Front-end (default to false)
    # @option opts [Boolean] :is_html_allowed_on_front Allow HTML Tags on Frontend (default to false)
    # @option opts [Boolean] :is_filterable_in_search Use In Search Results Layered Navigation (default to false)
    # @option opts [Boolean] :is_configurable Use To Create Configurable Product (default to false)
    # @option opts [Boolean] :is_visible_in_advanced_search Use in Advanced Search (default to false)
    # @option opts [Boolean] :is_used_for_promo_rules Use for Promo Rule Conditions (default to false)
    # @option opts [Boolean] :used_in_product_listing Used in Product Listing (default to false)
    # @option opts [Boolean] :used_for_sort_by Used for Sorting in Product Listing (default to false)
    # @option opts [String] :apply_to Types of products which can have this attribute (default to 'all_types')
    # @return [Array<(AttributeAdd200Response, Integer, Hash)>] AttributeAdd200Response data, response status code and response headers
    def attribute_add_with_http_info(type, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_add ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling AttributeApi.attribute_add"
      end
      # verify enum value
      allowable_values = ["text", "select", "textarea", "date", "price", "multiselect", "boolean"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AttributeApi.attribute_add"
      end
      # resource path
      local_var_path = '/attribute.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'name'] = name
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'is_global'] = opts[:'is_global'] if !opts[:'is_global'].nil?
      query_params[:'is_searchable'] = opts[:'is_searchable'] if !opts[:'is_searchable'].nil?
      query_params[:'is_filterable'] = opts[:'is_filterable'] if !opts[:'is_filterable'].nil?
      query_params[:'is_comparable'] = opts[:'is_comparable'] if !opts[:'is_comparable'].nil?
      query_params[:'is_html_allowed_on_front'] = opts[:'is_html_allowed_on_front'] if !opts[:'is_html_allowed_on_front'].nil?
      query_params[:'is_filterable_in_search'] = opts[:'is_filterable_in_search'] if !opts[:'is_filterable_in_search'].nil?
      query_params[:'is_configurable'] = opts[:'is_configurable'] if !opts[:'is_configurable'].nil?
      query_params[:'is_visible_in_advanced_search'] = opts[:'is_visible_in_advanced_search'] if !opts[:'is_visible_in_advanced_search'].nil?
      query_params[:'is_used_for_promo_rules'] = opts[:'is_used_for_promo_rules'] if !opts[:'is_used_for_promo_rules'].nil?
      query_params[:'used_in_product_listing'] = opts[:'used_in_product_listing'] if !opts[:'used_in_product_listing'].nil?
      query_params[:'used_for_sort_by'] = opts[:'used_for_sort_by'] if !opts[:'used_for_sort_by'].nil?
      query_params[:'apply_to'] = opts[:'apply_to'] if !opts[:'apply_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.assign.group
    # Assign attribute to the group
    # @param id [String] Entity id
    # @param group_id [String] Attribute group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [AttributeAssignGroup200Response]
    def attribute_assign_group(id, group_id, opts = {})
      data, _status_code, _headers = attribute_assign_group_with_http_info(id, group_id, opts)
      data
    end

    # attribute.assign.group
    # Assign attribute to the group
    # @param id [String] Entity id
    # @param group_id [String] Attribute group_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @return [Array<(AttributeAssignGroup200Response, Integer, Hash)>] AttributeAssignGroup200Response data, response status code and response headers
    def attribute_assign_group_with_http_info(id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_assign_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_assign_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AttributeApi.attribute_assign_group"
      end
      # resource path
      local_var_path = '/attribute.assign.group.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'group_id'] = group_id
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAssignGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_assign_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_assign_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.assign.set
    # Assign attribute to the attribute set
    # @param id [String] Entity id
    # @param attribute_set_id [String] Attribute set id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Attribute group_id
    # @return [AttributeAssignGroup200Response]
    def attribute_assign_set(id, attribute_set_id, opts = {})
      data, _status_code, _headers = attribute_assign_set_with_http_info(id, attribute_set_id, opts)
      data
    end

    # attribute.assign.set
    # Assign attribute to the attribute set
    # @param id [String] Entity id
    # @param attribute_set_id [String] Attribute set id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Attribute group_id
    # @return [Array<(AttributeAssignGroup200Response, Integer, Hash)>] AttributeAssignGroup200Response data, response status code and response headers
    def attribute_assign_set_with_http_info(id, attribute_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_assign_set ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_assign_set"
      end
      # verify the required parameter 'attribute_set_id' is set
      if @api_client.config.client_side_validation && attribute_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_set_id' when calling AttributeApi.attribute_assign_set"
      end
      # resource path
      local_var_path = '/attribute.assign.set.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attribute_set_id'] = attribute_set_id
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAssignGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_assign_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_assign_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.attributeset.list
    # Get attribute_set list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseAttributeAttributesetList]
    def attribute_attributeset_list(opts = {})
      data, _status_code, _headers = attribute_attributeset_list_with_http_info(opts)
      data
    end

    # attribute.attributeset.list
    # Get attribute_set list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseAttributeAttributesetList, Integer, Hash)>] ModelResponseAttributeAttributesetList data, response status code and response headers
    def attribute_attributeset_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_attributeset_list ...'
      end
      # resource path
      local_var_path = '/attribute.attributeset.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseAttributeAttributesetList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_attributeset_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_attributeset_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.count
    # Get attributes count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :attribute_set_id Filter items by attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :visible Filter items by visibility status
    # @option opts [Boolean] :required Defines if the option is required
    # @option opts [Boolean] :system True if attribute is system
    # @return [AttributeCount200Response]
    def attribute_count(opts = {})
      data, _status_code, _headers = attribute_count_with_http_info(opts)
      data
    end

    # attribute.count
    # Get attributes count
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [String] :attribute_set_id Filter items by attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :visible Filter items by visibility status
    # @option opts [Boolean] :required Defines if the option is required
    # @option opts [Boolean] :system True if attribute is system
    # @return [Array<(AttributeCount200Response, Integer, Hash)>] AttributeCount200Response data, response status code and response headers
    def attribute_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_count ...'
      end
      # resource path
      local_var_path = '/attribute.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'system'] = opts[:'system'] if !opts[:'system'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.delete
    # Delete attribute from store
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def attribute_delete(id, opts = {})
      data, _status_code, _headers = attribute_delete_with_http_info(id, opts)
      data
    end

    # attribute.delete
    # Delete attribute from store
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def attribute_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_delete"
      end
      # resource path
      local_var_path = '/attribute.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.group.list
    # Get attribute group list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_set_id Attribute set id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseAttributeGroupList]
    def attribute_group_list(opts = {})
      data, _status_code, _headers = attribute_group_list_with_http_info(opts)
      data
    end

    # attribute.group.list
    # Get attribute group list
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_set_id Attribute set id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseAttributeGroupList, Integer, Hash)>] ModelResponseAttributeGroupList data, response status code and response headers
    def attribute_group_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_group_list ...'
      end
      # resource path
      local_var_path = '/attribute.group.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseAttributeGroupList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_group_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_group_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.info
    # Get information about a specific global attribute by its ID.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [AttributeInfo200Response]
    def attribute_info(id, opts = {})
      data, _status_code, _headers = attribute_info_with_http_info(id, opts)
      data
    end

    # attribute.info
    # Get information about a specific global attribute by its ID.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_set_id Attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(AttributeInfo200Response, Integer, Hash)>] AttributeInfo200Response data, response status code and response headers
    def attribute_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_info"
      end
      # resource path
      local_var_path = '/attribute.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.list
    # Get a list of global attributes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_ids Filter attributes by ids
    # @option opts [String] :attribute_set_id Filter items by attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Retrieves attributes on specified language id
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [Boolean] :visible Filter items by visibility status
    # @option opts [Boolean] :required Defines if the option is required
    # @option opts [Boolean] :system True if attribute is system
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,code,type')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseAttributeList]
    def attribute_list(opts = {})
      data, _status_code, _headers = attribute_list_with_http_info(opts)
      data
    end

    # attribute.list
    # Get a list of global attributes.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_ids Filter attributes by ids
    # @option opts [String] :attribute_set_id Filter items by attribute set id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Retrieves attributes on specified language id
    # @option opts [String] :type Defines attribute&#39;s type
    # @option opts [Boolean] :visible Filter items by visibility status
    # @option opts [Boolean] :required Defines if the option is required
    # @option opts [Boolean] :system True if attribute is system
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,code,type')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseAttributeList, Integer, Hash)>] ModelResponseAttributeList data, response status code and response headers
    def attribute_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_list ...'
      end
      # resource path
      local_var_path = '/attribute.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'attribute_ids'] = opts[:'attribute_ids'] if !opts[:'attribute_ids'].nil?
      query_params[:'attribute_set_id'] = opts[:'attribute_set_id'] if !opts[:'attribute_set_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'visible'] = opts[:'visible'] if !opts[:'visible'].nil?
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'system'] = opts[:'system'] if !opts[:'system'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.type.list
    # Get list of supported attributes types
    # @param [Hash] opts the optional parameters
    # @return [AttributeTypeList200Response]
    def attribute_type_list(opts = {})
      data, _status_code, _headers = attribute_type_list_with_http_info(opts)
      data
    end

    # attribute.type.list
    # Get list of supported attributes types
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeTypeList200Response, Integer, Hash)>] AttributeTypeList200Response data, response status code and response headers
    def attribute_type_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_type_list ...'
      end
      # resource path
      local_var_path = '/attribute.type.list.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeTypeList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_type_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_type_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.unassign.group
    # Unassign attribute from group
    # @param id [String] Entity id
    # @param group_id [String] Customer group_id
    # @param [Hash] opts the optional parameters
    # @return [AttributeUnassignGroup200Response]
    def attribute_unassign_group(id, group_id, opts = {})
      data, _status_code, _headers = attribute_unassign_group_with_http_info(id, group_id, opts)
      data
    end

    # attribute.unassign.group
    # Unassign attribute from group
    # @param id [String] Entity id
    # @param group_id [String] Customer group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeUnassignGroup200Response, Integer, Hash)>] AttributeUnassignGroup200Response data, response status code and response headers
    def attribute_unassign_group_with_http_info(id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_unassign_group ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_unassign_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AttributeApi.attribute_unassign_group"
      end
      # resource path
      local_var_path = '/attribute.unassign.group.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'group_id'] = group_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeUnassignGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_unassign_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_unassign_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.unassign.set
    # Unassign attribute from attribute set
    # @param id [String] Entity id
    # @param attribute_set_id [String] Attribute set id
    # @param [Hash] opts the optional parameters
    # @return [AttributeUnassignGroup200Response]
    def attribute_unassign_set(id, attribute_set_id, opts = {})
      data, _status_code, _headers = attribute_unassign_set_with_http_info(id, attribute_set_id, opts)
      data
    end

    # attribute.unassign.set
    # Unassign attribute from attribute set
    # @param id [String] Entity id
    # @param attribute_set_id [String] Attribute set id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeUnassignGroup200Response, Integer, Hash)>] AttributeUnassignGroup200Response data, response status code and response headers
    def attribute_unassign_set_with_http_info(id, attribute_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_unassign_set ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_unassign_set"
      end
      # verify the required parameter 'attribute_set_id' is set
      if @api_client.config.client_side_validation && attribute_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_set_id' when calling AttributeApi.attribute_unassign_set"
      end
      # resource path
      local_var_path = '/attribute.unassign.set.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attribute_set_id'] = attribute_set_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeUnassignGroup200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_unassign_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_unassign_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.update
    # Update attribute data
    # @param id [String] Entity id
    # @param name [String] Defines new attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [AttributeUpdate200Response]
    def attribute_update(id, name, opts = {})
      data, _status_code, _headers = attribute_update_with_http_info(id, name, opts)
      data
    end

    # attribute.update
    # Update attribute data
    # @param id [String] Entity id
    # @param name [String] Defines new attributes&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [Array<(AttributeUpdate200Response, Integer, Hash)>] AttributeUpdate200Response data, response status code and response headers
    def attribute_update_with_http_info(id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_update"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AttributeApi.attribute_update"
      end
      # resource path
      local_var_path = '/attribute.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'name'] = name
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.value.add
    # Add new value to attribute.
    # @param attribute_id [String] Attribute Id
    # @param name [String] Defines attribute value&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :description Defines attribute value&#39;s description
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [AttributeAdd200Response]
    def attribute_value_add(attribute_id, name, opts = {})
      data, _status_code, _headers = attribute_value_add_with_http_info(attribute_id, name, opts)
      data
    end

    # attribute.value.add
    # Add new value to attribute.
    # @param attribute_id [String] Attribute Id
    # @param name [String] Defines attribute value&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code Entity code
    # @option opts [String] :description Defines attribute value&#39;s description
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [Array<(AttributeAdd200Response, Integer, Hash)>] AttributeAdd200Response data, response status code and response headers
    def attribute_value_add_with_http_info(attribute_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_value_add ...'
      end
      # verify the required parameter 'attribute_id' is set
      if @api_client.config.client_side_validation && attribute_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_id' when calling AttributeApi.attribute_value_add"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AttributeApi.attribute_value_add"
      end
      # resource path
      local_var_path = '/attribute.value.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attribute_id'] = attribute_id
      query_params[:'name'] = name
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_value_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_value_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.value.delete
    # Delete attribute value.
    # @param id [String] Entity id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeValueDelete200Response]
    def attribute_value_delete(id, attribute_id, opts = {})
      data, _status_code, _headers = attribute_value_delete_with_http_info(id, attribute_id, opts)
      data
    end

    # attribute.value.delete
    # Delete attribute value.
    # @param id [String] Entity id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeValueDelete200Response, Integer, Hash)>] AttributeValueDelete200Response data, response status code and response headers
    def attribute_value_delete_with_http_info(id, attribute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_value_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_value_delete"
      end
      # verify the required parameter 'attribute_id' is set
      if @api_client.config.client_side_validation && attribute_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_id' when calling AttributeApi.attribute_value_delete"
      end
      # resource path
      local_var_path = '/attribute.value.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attribute_id'] = attribute_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeValueDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_value_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_value_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # attribute.value.update
    # Update attribute value.
    # @param id [String] Defines attribute value&#39;s id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines attribute value&#39;s name
    # @option opts [String] :description Defines new attribute value&#39;s description
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [AttributeUpdate200Response]
    def attribute_value_update(id, attribute_id, opts = {})
      data, _status_code, _headers = attribute_value_update_with_http_info(id, attribute_id, opts)
      data
    end

    # attribute.value.update
    # Update attribute value.
    # @param id [String] Defines attribute value&#39;s id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines attribute value&#39;s name
    # @option opts [String] :description Defines new attribute value&#39;s description
    # @option opts [String] :code Entity code
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [Array<(AttributeUpdate200Response, Integer, Hash)>] AttributeUpdate200Response data, response status code and response headers
    def attribute_value_update_with_http_info(id, attribute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributeApi.attribute_value_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AttributeApi.attribute_value_update"
      end
      # verify the required parameter 'attribute_id' is set
      if @api_client.config.client_side_validation && attribute_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_id' when calling AttributeApi.attribute_value_update"
      end
      # resource path
      local_var_path = '/attribute.value.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'attribute_id'] = attribute_id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AttributeApi.attribute_value_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributeApi#attribute_value_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
