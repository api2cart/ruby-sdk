=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class BasketApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # basket.info
    # Retrieve basket information.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [BasketInfo200Response]
    def basket_info(id, opts = {})
      data, _status_code, _headers = basket_info_with_http_info(id, opts)
      data
    end

    # basket.info
    # Retrieve basket information.
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(BasketInfo200Response, Integer, Hash)>] BasketInfo200Response data, response status code and response headers
    def basket_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BasketApi.basket_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BasketApi.basket_info"
      end
      # resource path
      local_var_path = '/basket.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BasketApi.basket_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BasketApi#basket_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # basket.item.add
    # Add item to basket
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param product_id [String] Defines id of the product which should be added to the basket
    # @param [Hash] opts the optional parameters
    # @option opts [String] :variant_id Defines product&#39;s variants specified by variant id
    # @option opts [Float] :quantity Defines new items quantity (default to 0)
    # @option opts [String] :store_id Store Id
    # @return [BasketItemAdd200Response]
    def basket_item_add(customer_id, product_id, opts = {})
      data, _status_code, _headers = basket_item_add_with_http_info(customer_id, product_id, opts)
      data
    end

    # basket.item.add
    # Add item to basket
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param product_id [String] Defines id of the product which should be added to the basket
    # @param [Hash] opts the optional parameters
    # @option opts [String] :variant_id Defines product&#39;s variants specified by variant id
    # @option opts [Float] :quantity Defines new items quantity (default to 0)
    # @option opts [String] :store_id Store Id
    # @return [Array<(BasketItemAdd200Response, Integer, Hash)>] BasketItemAdd200Response data, response status code and response headers
    def basket_item_add_with_http_info(customer_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BasketApi.basket_item_add ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling BasketApi.basket_item_add"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling BasketApi.basket_item_add"
      end
      # resource path
      local_var_path = '/basket.item.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = customer_id
      query_params[:'product_id'] = product_id
      query_params[:'variant_id'] = opts[:'variant_id'] if !opts[:'variant_id'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketItemAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BasketApi.basket_item_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BasketApi#basket_item_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # basket.live_shipping_service.create
    # Create live shipping rate service.
    # @param name [String] Shipping Service Name
    # @param callback [String] Callback url that returns shipping rates. It should be able to accept POST requests with json data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [BasketLiveShippingServiceCreate200Response]
    def basket_live_shipping_service_create(name, callback, opts = {})
      data, _status_code, _headers = basket_live_shipping_service_create_with_http_info(name, callback, opts)
      data
    end

    # basket.live_shipping_service.create
    # Create live shipping rate service.
    # @param name [String] Shipping Service Name
    # @param callback [String] Callback url that returns shipping rates. It should be able to accept POST requests with json data.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(BasketLiveShippingServiceCreate200Response, Integer, Hash)>] BasketLiveShippingServiceCreate200Response data, response status code and response headers
    def basket_live_shipping_service_create_with_http_info(name, callback, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BasketApi.basket_live_shipping_service_create ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling BasketApi.basket_live_shipping_service_create"
      end
      # verify the required parameter 'callback' is set
      if @api_client.config.client_side_validation && callback.nil?
        fail ArgumentError, "Missing the required parameter 'callback' when calling BasketApi.basket_live_shipping_service_create"
      end
      # resource path
      local_var_path = '/basket.live_shipping_service.create.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'callback'] = callback
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketLiveShippingServiceCreate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BasketApi.basket_live_shipping_service_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BasketApi#basket_live_shipping_service_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # basket.live_shipping_service.delete
    # Delete live shipping rate service.
    # @param id [Integer] Entity id
    # @param [Hash] opts the optional parameters
    # @return [BasketLiveShippingServiceDelete200Response]
    def basket_live_shipping_service_delete(id, opts = {})
      data, _status_code, _headers = basket_live_shipping_service_delete_with_http_info(id, opts)
      data
    end

    # basket.live_shipping_service.delete
    # Delete live shipping rate service.
    # @param id [Integer] Entity id
    # @param [Hash] opts the optional parameters
    # @return [Array<(BasketLiveShippingServiceDelete200Response, Integer, Hash)>] BasketLiveShippingServiceDelete200Response data, response status code and response headers
    def basket_live_shipping_service_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BasketApi.basket_live_shipping_service_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling BasketApi.basket_live_shipping_service_delete"
      end
      # resource path
      local_var_path = '/basket.live_shipping_service.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketLiveShippingServiceDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BasketApi.basket_live_shipping_service_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BasketApi#basket_live_shipping_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # basket.live_shipping_service.list
    # Retrieve a list of live shipping rate services.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @return [BasketLiveShippingServiceList200Response]
    def basket_live_shipping_service_list(opts = {})
      data, _status_code, _headers = basket_live_shipping_service_list_with_http_info(opts)
      data
    end

    # basket.live_shipping_service.list
    # Retrieve a list of live shipping rate services.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @return [Array<(BasketLiveShippingServiceList200Response, Integer, Hash)>] BasketLiveShippingServiceList200Response data, response status code and response headers
    def basket_live_shipping_service_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BasketApi.basket_live_shipping_service_list ...'
      end
      # resource path
      local_var_path = '/basket.live_shipping_service.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BasketLiveShippingServiceList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BasketApi.basket_live_shipping_service_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BasketApi#basket_live_shipping_service_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
