=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class CustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # customer.add
    # Add customer into store.
    # @param customer_add [CustomerAdd] 
    # @param [Hash] opts the optional parameters
    # @return [CustomerAdd200Response]
    def customer_add(customer_add, opts = {})
      data, _status_code, _headers = customer_add_with_http_info(customer_add, opts)
      data
    end

    # customer.add
    # Add customer into store.
    # @param customer_add [CustomerAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerAdd200Response, Integer, Hash)>] CustomerAdd200Response data, response status code and response headers
    def customer_add_with_http_info(customer_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_add ...'
      end
      # verify the required parameter 'customer_add' is set
      if @api_client.config.client_side_validation && customer_add.nil?
        fail ArgumentError, "Missing the required parameter 'customer_add' when calling CustomerApi.customer_add"
      end
      # resource path
      local_var_path = '/customer.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_add)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.address.add
    # Add customer address.
    # @param customer_address_add [CustomerAddressAdd] 
    # @param [Hash] opts the optional parameters
    # @return [AttributeAdd200Response]
    def customer_address_add(customer_address_add, opts = {})
      data, _status_code, _headers = customer_address_add_with_http_info(customer_address_add, opts)
      data
    end

    # customer.address.add
    # Add customer address.
    # @param customer_address_add [CustomerAddressAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeAdd200Response, Integer, Hash)>] AttributeAdd200Response data, response status code and response headers
    def customer_address_add_with_http_info(customer_address_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_address_add ...'
      end
      # verify the required parameter 'customer_address_add' is set
      if @api_client.config.client_side_validation && customer_address_add.nil?
        fail ArgumentError, "Missing the required parameter 'customer_address_add' when calling CustomerApi.customer_address_add"
      end
      # resource path
      local_var_path = '/customer.address.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_address_add)

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_address_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_address_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.attribute.list
    # Get attributes for specific customer
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [ModelResponseCustomerAttributeList]
    def customer_attribute_list(customer_id, opts = {})
      data, _status_code, _headers = customer_attribute_list_with_http_info(customer_id, opts)
      data
    end

    # customer.attribute.list
    # Get attributes for specific customer
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [Array<(ModelResponseCustomerAttributeList, Integer, Hash)>] ModelResponseCustomerAttributeList data, response status code and response headers
    def customer_attribute_list_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_attribute_list ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.customer_attribute_list"
      end
      # resource path
      local_var_path = '/customer.attribute.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = customer_id
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCustomerAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_attribute_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.count
    # Get number of customers from store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Customer group_id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :store_id Counts customer specified by store id
    # @option opts [String] :customer_list_id The numeric ID of the customer list in Demandware.
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts customers that are searched specified by field
    # @option opts [String] :ids Counts customers specified by ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @return [CustomerCount200Response]
    def customer_count(opts = {})
      data, _status_code, _headers = customer_count_with_http_info(opts)
      data
    end

    # customer.count
    # Get number of customers from store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_id Customer group_id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :store_id Counts customer specified by store id
    # @option opts [String] :customer_list_id The numeric ID of the customer list in Demandware.
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts customers that are searched specified by field
    # @option opts [String] :ids Counts customers specified by ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @return [Array<(CustomerCount200Response, Integer, Hash)>] CustomerCount200Response data, response status code and response headers
    def customer_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_count ...'
      end
      # resource path
      local_var_path = '/customer.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'customer_list_id'] = opts[:'customer_list_id'] if !opts[:'customer_list_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.delete
    # Delete customer from store.
    # @param id [String] Identifies customer specified by the id
    # @param [Hash] opts the optional parameters
    # @return [CustomerDelete200Response]
    def customer_delete(id, opts = {})
      data, _status_code, _headers = customer_delete_with_http_info(id, opts)
      data
    end

    # customer.delete
    # Delete customer from store.
    # @param id [String] Identifies customer specified by the id
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomerDelete200Response, Integer, Hash)>] CustomerDelete200Response data, response status code and response headers
    def customer_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_delete"
      end
      # resource path
      local_var_path = '/customer.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.find
    # Find customers in store.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'email')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @return [CustomerFind200Response]
    def customer_find(find_value, opts = {})
      data, _status_code, _headers = customer_find_with_http_info(find_value, opts)
      data
    end

    # customer.find
    # Find customers in store.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'email')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @return [Array<(CustomerFind200Response, Integer, Hash)>] CustomerFind200Response data, response status code and response headers
    def customer_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_find ...'
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling CustomerApi.customer_find"
      end
      # resource path
      local_var_path = '/customer.find.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerFind200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_find",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.group.add
    # Create customer group.
    # @param name [String] Customer group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Assign customer group to the stores that is specified by comma-separated stores&#39; id
    # @return [CustomerGroupAdd200Response]
    def customer_group_add(name, opts = {})
      data, _status_code, _headers = customer_group_add_with_http_info(name, opts)
      data
    end

    # customer.group.add
    # Create customer group.
    # @param name [String] Customer group name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Assign customer group to the stores that is specified by comma-separated stores&#39; id
    # @return [Array<(CustomerGroupAdd200Response, Integer, Hash)>] CustomerGroupAdd200Response data, response status code and response headers
    def customer_group_add_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_group_add ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CustomerApi.customer_group_add"
      end
      # resource path
      local_var_path = '/customer.group.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'stores_ids'] = opts[:'stores_ids'] if !opts[:'stores_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerGroupAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_group_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_group_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.group.list
    # Get list of customers groups.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :group_ids Groups that will be assigned to a customer
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,additional_fields')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [ModelResponseCustomerGroupList]
    def customer_group_list(opts = {})
      data, _status_code, _headers = customer_group_list_with_http_info(opts)
      data
    end

    # customer.group.list
    # Get list of customers groups.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :group_ids Groups that will be assigned to a customer
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,additional_fields')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [Array<(ModelResponseCustomerGroupList, Integer, Hash)>] ModelResponseCustomerGroupList data, response status code and response headers
    def customer_group_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_group_list ...'
      end
      # resource path
      local_var_path = '/customer.group.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'disable_cache'] = opts[:'disable_cache'] if !opts[:'disable_cache'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'group_ids'] = opts[:'group_ids'] if !opts[:'group_ids'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCustomerGroupList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_group_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_group_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.info
    # Get customers' details from store.
    # @param id [String] Retrieves customer&#39;s info specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,email,first_name,last_name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves customer info specified by store id
    # @return [CustomerInfo200Response]
    def customer_info(id, opts = {})
      data, _status_code, _headers = customer_info_with_http_info(id, opts)
      data
    end

    # customer.info
    # Get customers&#39; details from store.
    # @param id [String] Retrieves customer&#39;s info specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,email,first_name,last_name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves customer info specified by store id
    # @return [Array<(CustomerInfo200Response, Integer, Hash)>] CustomerInfo200Response data, response status code and response headers
    def customer_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CustomerApi.customer_info"
      end
      # resource path
      local_var_path = '/customer.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.list
    # Get list of customers from store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,email,first_name,last_name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :group_id Customer group_id
    # @option opts [String] :store_id Retrieves customers specified by store id
    # @option opts [String] :customer_list_id The numeric ID of the customer list in Demandware.
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Customer search that is specified by field
    # @option opts [String] :sort_by Set field to sort by (default to 'created_time')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :ids Retrieves customers specified by ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @return [ModelResponseCustomerList]
    def customer_list(opts = {})
      data, _status_code, _headers = customer_list_with_http_info(opts)
      data
    end

    # customer.list
    # Get list of customers from store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,email,first_name,last_name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :group_id Customer group_id
    # @option opts [String] :store_id Retrieves customers specified by store id
    # @option opts [String] :customer_list_id The numeric ID of the customer list in Demandware.
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Customer search that is specified by field
    # @option opts [String] :sort_by Set field to sort by (default to 'created_time')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :ids Retrieves customers specified by ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @return [Array<(ModelResponseCustomerList, Integer, Hash)>] ModelResponseCustomerList data, response status code and response headers
    def customer_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_list ...'
      end
      # resource path
      local_var_path = '/customer.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'group_id'] = opts[:'group_id'] if !opts[:'group_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'customer_list_id'] = opts[:'customer_list_id'] if !opts[:'customer_list_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCustomerList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.update
    # Update information of customer in store.
    # @param customer_update [CustomerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def customer_update(customer_update, opts = {})
      data, _status_code, _headers = customer_update_with_http_info(customer_update, opts)
      data
    end

    # customer.update
    # Update information of customer in store.
    # @param customer_update [CustomerUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def customer_update_with_http_info(customer_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_update ...'
      end
      # verify the required parameter 'customer_update' is set
      if @api_client.config.client_side_validation && customer_update.nil?
        fail ArgumentError, "Missing the required parameter 'customer_update' when calling CustomerApi.customer_update"
      end
      # resource path
      local_var_path = '/customer.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(customer_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # customer.wishlist.list
    # Get a Wish List of customer from the store.
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Entity id
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [ModelResponseCustomerWishlistList]
    def customer_wishlist_list(customer_id, opts = {})
      data, _status_code, _headers = customer_wishlist_list_with_http_info(customer_id, opts)
      data
    end

    # customer.wishlist.list
    # Get a Wish List of customer from the store.
    # @param customer_id [String] Retrieves orders specified by customer id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Entity id
    # @option opts [String] :store_id Store Id
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve (default to '{return_code,return_message,pagination,result}')
    # @return [Array<(ModelResponseCustomerWishlistList, Integer, Hash)>] ModelResponseCustomerWishlistList data, response status code and response headers
    def customer_wishlist_list_with_http_info(customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CustomerApi.customer_wishlist_list ...'
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling CustomerApi.customer_wishlist_list"
      end
      # resource path
      local_var_path = '/customer.wishlist.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'customer_id'] = customer_id
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCustomerWishlistList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CustomerApi.customer_wishlist_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CustomerApi#customer_wishlist_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
