=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class BridgeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # bridge.delete
    # Delete bridge from the store.
    # @param [Hash] opts the optional parameters
    # @return [AttributeValueDelete200Response]
    def bridge_delete(opts = {})
      data, _status_code, _headers = bridge_delete_with_http_info(opts)
      data
    end

    # bridge.delete
    # Delete bridge from the store.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeValueDelete200Response, Integer, Hash)>] AttributeValueDelete200Response data, response status code and response headers
    def bridge_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeApi.bridge_delete ...'
      end
      # resource path
      local_var_path = '/bridge.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeValueDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BridgeApi.bridge_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeApi#bridge_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # bridge.download
    # Download bridge for store.</br>Please note that the method would not work if you call it from Swagger UI.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :whitelabel Identifies if there is a necessity to download whitelabel bridge. (default to false)
    # @return [File]
    def bridge_download(opts = {})
      data, _status_code, _headers = bridge_download_with_http_info(opts)
      data
    end

    # bridge.download
    # Download bridge for store.&lt;/br&gt;Please note that the method would not work if you call it from Swagger UI.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :whitelabel Identifies if there is a necessity to download whitelabel bridge. (default to false)
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def bridge_download_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeApi.bridge_download ...'
      end
      # resource path
      local_var_path = '/bridge.download.file'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'whitelabel'] = opts[:'whitelabel'] if !opts[:'whitelabel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BridgeApi.bridge_download",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeApi#bridge_download\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # bridge.update
    # Update bridge in the store.
    # @param [Hash] opts the optional parameters
    # @return [AttributeUpdate200Response]
    def bridge_update(opts = {})
      data, _status_code, _headers = bridge_update_with_http_info(opts)
      data
    end

    # bridge.update
    # Update bridge in the store.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeUpdate200Response, Integer, Hash)>] AttributeUpdate200Response data, response status code and response headers
    def bridge_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BridgeApi.bridge_update ...'
      end
      # resource path
      local_var_path = '/bridge.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"BridgeApi.bridge_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BridgeApi#bridge_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
