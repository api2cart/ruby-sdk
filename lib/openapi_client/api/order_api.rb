=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # order.abandoned.list
    # Get list of orders that were left by customers before completing the order.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :skip_empty_email Filter empty emails (default to false)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'customer,totals,items')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseOrderAbandonedList]
    def order_abandoned_list(opts = {})
      data, _status_code, _headers = order_abandoned_list_with_http_info(opts)
      data
    end

    # order.abandoned.list
    # Get list of orders that were left by customers before completing the order.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :skip_empty_email Filter empty emails (default to false)
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'customer,totals,items')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseOrderAbandonedList, Integer, Hash)>] ModelResponseOrderAbandonedList data, response status code and response headers
    def order_abandoned_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_abandoned_list ...'
      end
      # resource path
      local_var_path = '/order.abandoned.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'skip_empty_email'] = opts[:'skip_empty_email'] if !opts[:'skip_empty_email'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderAbandonedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_abandoned_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_abandoned_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.add
    # Add a new order to the cart.
    # @param order_add [OrderAdd] 
    # @param [Hash] opts the optional parameters
    # @return [OrderAdd200Response]
    def order_add(order_add, opts = {})
      data, _status_code, _headers = order_add_with_http_info(order_add, opts)
      data
    end

    # order.add
    # Add a new order to the cart.
    # @param order_add [OrderAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderAdd200Response, Integer, Hash)>] OrderAdd200Response data, response status code and response headers
    def order_add_with_http_info(order_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_add ...'
      end
      # verify the required parameter 'order_add' is set
      if @api_client.config.client_side_validation && order_add.nil?
        fail ArgumentError, "Missing the required parameter 'order_add' when calling OrderApi.order_add"
      end
      # resource path
      local_var_path = '/order.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_add)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.count
    # Count orders in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_ids Counts orders specified by order ids
    # @option opts [String] :ids Counts orders specified by ids
    # @option opts [String] :customer_id Counts orders quantity specified by customer id
    # @option opts [String] :store_id Counts orders quantity specified by store id
    # @option opts [String] :customer_email Counts orders quantity specified by customer email
    # @option opts [String] :order_status Counts orders quantity specified by order status
    # @option opts [Array<String>] :order_status_ids Retrieves orders specified by order statuses
    # @option opts [String] :ebay_order_status Counts orders quantity specified by order status
    # @option opts [String] :financial_status Counts orders quantity specified by financial status
    # @option opts [Array<String>] :financial_status_ids Retrieves orders count specified by financial status ids
    # @option opts [String] :fulfillment_channel Retrieves order with a fulfillment channel
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :delivery_method Retrieves order with delivery method
    # @option opts [String] :tags Order tags
    # @option opts [String] :ship_node_type Retrieves order with ship node type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @return [OrderCount200Response]
    def order_count(opts = {})
      data, _status_code, _headers = order_count_with_http_info(opts)
      data
    end

    # order.count
    # Count orders in store
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_ids Counts orders specified by order ids
    # @option opts [String] :ids Counts orders specified by ids
    # @option opts [String] :customer_id Counts orders quantity specified by customer id
    # @option opts [String] :store_id Counts orders quantity specified by store id
    # @option opts [String] :customer_email Counts orders quantity specified by customer email
    # @option opts [String] :order_status Counts orders quantity specified by order status
    # @option opts [Array<String>] :order_status_ids Retrieves orders specified by order statuses
    # @option opts [String] :ebay_order_status Counts orders quantity specified by order status
    # @option opts [String] :financial_status Counts orders quantity specified by financial status
    # @option opts [Array<String>] :financial_status_ids Retrieves orders count specified by financial status ids
    # @option opts [String] :fulfillment_channel Retrieves order with a fulfillment channel
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :delivery_method Retrieves order with delivery method
    # @option opts [String] :tags Order tags
    # @option opts [String] :ship_node_type Retrieves order with ship node type
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @return [Array<(OrderCount200Response, Integer, Hash)>] OrderCount200Response data, response status code and response headers
    def order_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_count ...'
      end
      # resource path
      local_var_path = '/order.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'order_status_ids'] = @api_client.build_collection_param(opts[:'order_status_ids'], :multi) if !opts[:'order_status_ids'].nil?
      query_params[:'ebay_order_status'] = opts[:'ebay_order_status'] if !opts[:'ebay_order_status'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'financial_status_ids'] = @api_client.build_collection_param(opts[:'financial_status_ids'], :multi) if !opts[:'financial_status_ids'].nil?
      query_params[:'fulfillment_channel'] = opts[:'fulfillment_channel'] if !opts[:'fulfillment_channel'].nil?
      query_params[:'fulfillment_status'] = opts[:'fulfillment_status'] if !opts[:'fulfillment_status'].nil?
      query_params[:'shipping_method'] = opts[:'shipping_method'] if !opts[:'shipping_method'].nil?
      query_params[:'delivery_method'] = opts[:'delivery_method'] if !opts[:'delivery_method'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'ship_node_type'] = opts[:'ship_node_type'] if !opts[:'ship_node_type'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.financial_status.list
    # Retrieve list of financial statuses
    # @param [Hash] opts the optional parameters
    # @return [OrderFinancialStatusList200Response]
    def order_financial_status_list(opts = {})
      data, _status_code, _headers = order_financial_status_list_with_http_info(opts)
      data
    end

    # order.financial_status.list
    # Retrieve list of financial statuses
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderFinancialStatusList200Response, Integer, Hash)>] OrderFinancialStatusList200Response data, response status code and response headers
    def order_financial_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_financial_status_list ...'
      end
      # resource path
      local_var_path = '/order.financial_status.list.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderFinancialStatusList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_financial_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_financial_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.find
    # This method is deprecated and won't be supported in the future. Please use \"order.list\" instead.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [OrderFind200Response]
    def order_find(opts = {})
      data, _status_code, _headers = order_find_with_http_info(opts)
      data
    end

    # order.find
    # This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(OrderFind200Response, Integer, Hash)>] OrderFind200Response data, response status code and response headers
    def order_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_find ...'
      end
      # resource path
      local_var_path = '/order.find.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderFind200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_find",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.fulfillment_status.list
    # Retrieve list of fulfillment statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Available statuses for the specified action.
    # @return [OrderFulfillmentStatusList200Response]
    def order_fulfillment_status_list(opts = {})
      data, _status_code, _headers = order_fulfillment_status_list_with_http_info(opts)
      data
    end

    # order.fulfillment_status.list
    # Retrieve list of fulfillment statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :action Available statuses for the specified action.
    # @return [Array<(OrderFulfillmentStatusList200Response, Integer, Hash)>] OrderFulfillmentStatusList200Response data, response status code and response headers
    def order_fulfillment_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_fulfillment_status_list ...'
      end
      # resource path
      local_var_path = '/order.fulfillment_status.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderFulfillmentStatusList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_fulfillment_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_fulfillment_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.info
    # Info about a specific order by ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves order info specified by id
    # @option opts [String] :order_id Retrieves order’s info specified by order id
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [Boolean] :enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [OrderInfo200Response]
    def order_info(opts = {})
      data, _status_code, _headers = order_info_with_http_info(opts)
      data
    end

    # order.info
    # Info about a specific order by ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id Retrieves order info specified by id
    # @option opts [String] :order_id Retrieves order’s info specified by order id
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [Boolean] :enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [Array<(OrderInfo200Response, Integer, Hash)>] OrderInfo200Response data, response status code and response headers
    def order_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_info ...'
      end
      # resource path
      local_var_path = '/order.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'order_id'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'enable_cache'] = opts[:'enable_cache'] if !opts[:'enable_cache'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.list
    # Get list of orders from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :ids Retrieves orders specified by ids
    # @option opts [String] :order_ids Retrieves orders specified by order ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :store_id Store Id
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :basket_id Retrieves order’s info specified by basket id.
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :phone Filter orders by customer&#39;s phone number
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Array<String>] :order_status_ids Retrieves orders specified by order statuses
    # @option opts [String] :ebay_order_status Retrieves orders specified by order status
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [Array<String>] :financial_status_ids Retrieves orders specified by financial status ids
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :return_status Retrieves orders specified by return status
    # @option opts [String] :fulfillment_channel Retrieves order with a fulfillment channel
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :skip_order_ids Skipped orders by ids
    # @option opts [Boolean] :is_deleted Filter deleted orders
    # @option opts [String] :shipping_country_iso3 Retrieve entities according to shipping country
    # @option opts [String] :delivery_method Retrieves order with delivery method
    # @option opts [String] :ship_node_type Retrieves order with ship node type
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :tags Order tags
    # @option opts [String] :sort_by Set field to sort by (default to 'order_id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [Boolean] :enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [ModelResponseOrderList]
    def order_list(opts = {})
      data, _status_code, _headers = order_list_with_http_info(opts)
      data
    end

    # order.list
    # Get list of orders from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :ids Retrieves orders specified by ids
    # @option opts [String] :order_ids Retrieves orders specified by order ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :store_id Store Id
    # @option opts [String] :customer_id Retrieves orders specified by customer id
    # @option opts [String] :customer_email Retrieves orders specified by customer email
    # @option opts [String] :basket_id Retrieves order’s info specified by basket id.
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :phone Filter orders by customer&#39;s phone number
    # @option opts [String] :order_status Retrieves orders specified by order status
    # @option opts [Array<String>] :order_status_ids Retrieves orders specified by order statuses
    # @option opts [String] :ebay_order_status Retrieves orders specified by order status
    # @option opts [String] :financial_status Retrieves orders specified by financial status
    # @option opts [Array<String>] :financial_status_ids Retrieves orders specified by financial status ids
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :return_status Retrieves orders specified by return status
    # @option opts [String] :fulfillment_channel Retrieves order with a fulfillment channel
    # @option opts [String] :shipping_method Retrieve entities according to shipping method
    # @option opts [String] :skip_order_ids Skipped orders by ids
    # @option opts [Boolean] :is_deleted Filter deleted orders
    # @option opts [String] :shipping_country_iso3 Retrieve entities according to shipping country
    # @option opts [String] :delivery_method Retrieves order with delivery method
    # @option opts [String] :ship_node_type Retrieves order with ship node type
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :tags Order tags
    # @option opts [String] :sort_by Set field to sort by (default to 'order_id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'order_id,customer,totals,address,items,bundles,status')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [Boolean] :enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [Array<(ModelResponseOrderList, Integer, Hash)>] ModelResponseOrderList data, response status code and response headers
    def order_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_list ...'
      end
      # resource path
      local_var_path = '/order.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'order_ids'] = opts[:'order_ids'] if !opts[:'order_ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?
      query_params[:'customer_email'] = opts[:'customer_email'] if !opts[:'customer_email'].nil?
      query_params[:'basket_id'] = opts[:'basket_id'] if !opts[:'basket_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'phone'] = opts[:'phone'] if !opts[:'phone'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'order_status_ids'] = @api_client.build_collection_param(opts[:'order_status_ids'], :multi) if !opts[:'order_status_ids'].nil?
      query_params[:'ebay_order_status'] = opts[:'ebay_order_status'] if !opts[:'ebay_order_status'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'financial_status_ids'] = @api_client.build_collection_param(opts[:'financial_status_ids'], :multi) if !opts[:'financial_status_ids'].nil?
      query_params[:'fulfillment_status'] = opts[:'fulfillment_status'] if !opts[:'fulfillment_status'].nil?
      query_params[:'return_status'] = opts[:'return_status'] if !opts[:'return_status'].nil?
      query_params[:'fulfillment_channel'] = opts[:'fulfillment_channel'] if !opts[:'fulfillment_channel'].nil?
      query_params[:'shipping_method'] = opts[:'shipping_method'] if !opts[:'shipping_method'].nil?
      query_params[:'skip_order_ids'] = opts[:'skip_order_ids'] if !opts[:'skip_order_ids'].nil?
      query_params[:'is_deleted'] = opts[:'is_deleted'] if !opts[:'is_deleted'].nil?
      query_params[:'shipping_country_iso3'] = opts[:'shipping_country_iso3'] if !opts[:'shipping_country_iso3'].nil?
      query_params[:'delivery_method'] = opts[:'delivery_method'] if !opts[:'delivery_method'].nil?
      query_params[:'ship_node_type'] = opts[:'ship_node_type'] if !opts[:'ship_node_type'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'enable_cache'] = opts[:'enable_cache'] if !opts[:'enable_cache'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.preestimate_shipping.list
    # Retrieve list of order preestimated shipping methods
    # @param order_preestimate_shipping_list [OrderPreestimateShippingList] 
    # @param [Hash] opts the optional parameters
    # @return [ModelResponseOrderPreestimateShippingList]
    def order_preestimate_shipping_list(order_preestimate_shipping_list, opts = {})
      data, _status_code, _headers = order_preestimate_shipping_list_with_http_info(order_preestimate_shipping_list, opts)
      data
    end

    # order.preestimate_shipping.list
    # Retrieve list of order preestimated shipping methods
    # @param order_preestimate_shipping_list [OrderPreestimateShippingList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModelResponseOrderPreestimateShippingList, Integer, Hash)>] ModelResponseOrderPreestimateShippingList data, response status code and response headers
    def order_preestimate_shipping_list_with_http_info(order_preestimate_shipping_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_preestimate_shipping_list ...'
      end
      # verify the required parameter 'order_preestimate_shipping_list' is set
      if @api_client.config.client_side_validation && order_preestimate_shipping_list.nil?
        fail ArgumentError, "Missing the required parameter 'order_preestimate_shipping_list' when calling OrderApi.order_preestimate_shipping_list"
      end
      # resource path
      local_var_path = '/order.preestimate_shipping.list.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_preestimate_shipping_list)

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderPreestimateShippingList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_preestimate_shipping_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_preestimate_shipping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.refund.add
    # Add a refund to the order.
    # @param order_refund_add [OrderRefundAdd] 
    # @param [Hash] opts the optional parameters
    # @return [OrderRefundAdd200Response]
    def order_refund_add(order_refund_add, opts = {})
      data, _status_code, _headers = order_refund_add_with_http_info(order_refund_add, opts)
      data
    end

    # order.refund.add
    # Add a refund to the order.
    # @param order_refund_add [OrderRefundAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderRefundAdd200Response, Integer, Hash)>] OrderRefundAdd200Response data, response status code and response headers
    def order_refund_add_with_http_info(order_refund_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_refund_add ...'
      end
      # verify the required parameter 'order_refund_add' is set
      if @api_client.config.client_side_validation && order_refund_add.nil?
        fail ArgumentError, "Missing the required parameter 'order_refund_add' when calling OrderApi.order_refund_add"
      end
      # resource path
      local_var_path = '/order.refund.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_refund_add)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderRefundAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_refund_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_refund_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.return.add
    # Create new return request.
    # @param order_return_add [OrderReturnAdd] 
    # @param [Hash] opts the optional parameters
    # @return [OrderReturnAdd200Response]
    def order_return_add(order_return_add, opts = {})
      data, _status_code, _headers = order_return_add_with_http_info(order_return_add, opts)
      data
    end

    # order.return.add
    # Create new return request.
    # @param order_return_add [OrderReturnAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderReturnAdd200Response, Integer, Hash)>] OrderReturnAdd200Response data, response status code and response headers
    def order_return_add_with_http_info(order_return_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_return_add ...'
      end
      # verify the required parameter 'order_return_add' is set
      if @api_client.config.client_side_validation && order_return_add.nil?
        fail ArgumentError, "Missing the required parameter 'order_return_add' when calling OrderApi.order_return_add"
      end
      # resource path
      local_var_path = '/order.return.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_return_add)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderReturnAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_return_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_return_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.return.delete
    # Delete return.
    # @param return_id [String] Return ID
    # @param order_id [String] Defines the order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeValueDelete200Response]
    def order_return_delete(return_id, order_id, opts = {})
      data, _status_code, _headers = order_return_delete_with_http_info(return_id, order_id, opts)
      data
    end

    # order.return.delete
    # Delete return.
    # @param return_id [String] Return ID
    # @param order_id [String] Defines the order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeValueDelete200Response, Integer, Hash)>] AttributeValueDelete200Response data, response status code and response headers
    def order_return_delete_with_http_info(return_id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_return_delete ...'
      end
      # verify the required parameter 'return_id' is set
      if @api_client.config.client_side_validation && return_id.nil?
        fail ArgumentError, "Missing the required parameter 'return_id' when calling OrderApi.order_return_delete"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_return_delete"
      end
      # resource path
      local_var_path = '/order.return.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'return_id'] = return_id
      query_params[:'order_id'] = order_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeValueDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_return_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_return_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.return.update
    # Update order's shipment information.
    # @param order_return_update [OrderReturnUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def order_return_update(order_return_update, opts = {})
      data, _status_code, _headers = order_return_update_with_http_info(order_return_update, opts)
      data
    end

    # order.return.update
    # Update order&#39;s shipment information.
    # @param order_return_update [OrderReturnUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def order_return_update_with_http_info(order_return_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_return_update ...'
      end
      # verify the required parameter 'order_return_update' is set
      if @api_client.config.client_side_validation && order_return_update.nil?
        fail ArgumentError, "Missing the required parameter 'order_return_update' when calling OrderApi.order_return_update"
      end
      # resource path
      local_var_path = '/order.return.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_return_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_return_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_return_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.add
    # Add a shipment to the order.
    # @param order_shipment_add [OrderShipmentAdd] 
    # @param [Hash] opts the optional parameters
    # @return [OrderShipmentAdd200Response]
    def order_shipment_add(order_shipment_add, opts = {})
      data, _status_code, _headers = order_shipment_add_with_http_info(order_shipment_add, opts)
      data
    end

    # order.shipment.add
    # Add a shipment to the order.
    # @param order_shipment_add [OrderShipmentAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderShipmentAdd200Response, Integer, Hash)>] OrderShipmentAdd200Response data, response status code and response headers
    def order_shipment_add_with_http_info(order_shipment_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_add ...'
      end
      # verify the required parameter 'order_shipment_add' is set
      if @api_client.config.client_side_validation && order_shipment_add.nil?
        fail ArgumentError, "Missing the required parameter 'order_shipment_add' when calling OrderApi.order_shipment_add"
      end
      # resource path
      local_var_path = '/order.shipment.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_shipment_add)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderShipmentAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.add.batch
    # Add a shipments to the orders.
    # @param order_shipment_add_batch [OrderShipmentAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def order_shipment_add_batch(order_shipment_add_batch, opts = {})
      data, _status_code, _headers = order_shipment_add_batch_with_http_info(order_shipment_add_batch, opts)
      data
    end

    # order.shipment.add.batch
    # Add a shipments to the orders.
    # @param order_shipment_add_batch [OrderShipmentAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def order_shipment_add_batch_with_http_info(order_shipment_add_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_add_batch ...'
      end
      # verify the required parameter 'order_shipment_add_batch' is set
      if @api_client.config.client_side_validation && order_shipment_add_batch.nil?
        fail ArgumentError, "Missing the required parameter 'order_shipment_add_batch' when calling OrderApi.order_shipment_add_batch"
      end
      # resource path
      local_var_path = '/order.shipment.add.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_shipment_add_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_add_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_add_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.delete
    # Delete order's shipment.
    # @param shipment_id [String] Shipment id indicates the number of delivery
    # @param order_id [String] Defines the order for which the shipment will be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [OrderShipmentDelete200Response]
    def order_shipment_delete(shipment_id, order_id, opts = {})
      data, _status_code, _headers = order_shipment_delete_with_http_info(shipment_id, order_id, opts)
      data
    end

    # order.shipment.delete
    # Delete order&#39;s shipment.
    # @param shipment_id [String] Shipment id indicates the number of delivery
    # @param order_id [String] Defines the order for which the shipment will be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(OrderShipmentDelete200Response, Integer, Hash)>] OrderShipmentDelete200Response data, response status code and response headers
    def order_shipment_delete_with_http_info(shipment_id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_delete ...'
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling OrderApi.order_shipment_delete"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_shipment_delete"
      end
      # resource path
      local_var_path = '/order.shipment.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'shipment_id'] = shipment_id
      query_params[:'order_id'] = order_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderShipmentDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.info
    # Get information of shipment.
    # @param id [String] Entity id
    # @param order_id [String] Defines the order id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,items,tracking_numbers')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [OrderShipmentInfo200Response]
    def order_shipment_info(id, order_id, opts = {})
      data, _status_code, _headers = order_shipment_info_with_http_info(id, order_id, opts)
      data
    end

    # order.shipment.info
    # Get information of shipment.
    # @param id [String] Entity id
    # @param order_id [String] Defines the order id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,items,tracking_numbers')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(OrderShipmentInfo200Response, Integer, Hash)>] OrderShipmentInfo200Response data, response status code and response headers
    def order_shipment_info_with_http_info(id, order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.order_shipment_info"
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_shipment_info"
      end
      # resource path
      local_var_path = '/order.shipment.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'order_id'] = order_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderShipmentInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.list
    # Get list of shipments by orders.
    # @param order_id [String] Retrieves shipments specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,items,tracking_numbers')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseOrderShipmentList]
    def order_shipment_list(order_id, opts = {})
      data, _status_code, _headers = order_shipment_list_with_http_info(order_id, opts)
      data
    end

    # order.shipment.list
    # Get list of shipments by orders.
    # @param order_id [String] Retrieves shipments specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,items,tracking_numbers')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseOrderShipmentList, Integer, Hash)>] ModelResponseOrderShipmentList data, response status code and response headers
    def order_shipment_list_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_list ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_shipment_list"
      end
      # resource path
      local_var_path = '/order.shipment.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_id'] = order_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderShipmentList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.tracking.add
    # Add order shipment's tracking info.
    # @param order_shipment_tracking_add [OrderShipmentTrackingAdd] 
    # @param [Hash] opts the optional parameters
    # @return [OrderShipmentTrackingAdd200Response]
    def order_shipment_tracking_add(order_shipment_tracking_add, opts = {})
      data, _status_code, _headers = order_shipment_tracking_add_with_http_info(order_shipment_tracking_add, opts)
      data
    end

    # order.shipment.tracking.add
    # Add order shipment&#39;s tracking info.
    # @param order_shipment_tracking_add [OrderShipmentTrackingAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderShipmentTrackingAdd200Response, Integer, Hash)>] OrderShipmentTrackingAdd200Response data, response status code and response headers
    def order_shipment_tracking_add_with_http_info(order_shipment_tracking_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_tracking_add ...'
      end
      # verify the required parameter 'order_shipment_tracking_add' is set
      if @api_client.config.client_side_validation && order_shipment_tracking_add.nil?
        fail ArgumentError, "Missing the required parameter 'order_shipment_tracking_add' when calling OrderApi.order_shipment_tracking_add"
      end
      # resource path
      local_var_path = '/order.shipment.tracking.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_shipment_tracking_add)

      # return_type
      return_type = opts[:debug_return_type] || 'OrderShipmentTrackingAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_tracking_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_tracking_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.shipment.update
    # Update order's shipment information.
    # @param order_shipment_update [OrderShipmentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def order_shipment_update(order_shipment_update, opts = {})
      data, _status_code, _headers = order_shipment_update_with_http_info(order_shipment_update, opts)
      data
    end

    # order.shipment.update
    # Update order&#39;s shipment information.
    # @param order_shipment_update [OrderShipmentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def order_shipment_update_with_http_info(order_shipment_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_shipment_update ...'
      end
      # verify the required parameter 'order_shipment_update' is set
      if @api_client.config.client_side_validation && order_shipment_update.nil?
        fail ArgumentError, "Missing the required parameter 'order_shipment_update' when calling OrderApi.order_shipment_update"
      end
      # resource path
      local_var_path = '/order.shipment.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(order_shipment_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_shipment_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_shipment_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.status.list
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :action Available statuses for the specified action.
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [ModelResponseOrderStatusList]
    def order_status_list(opts = {})
      data, _status_code, _headers = order_status_list_with_http_info(opts)
      data
    end

    # order.status.list
    # Retrieve list of statuses
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :action Available statuses for the specified action.
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [Array<(ModelResponseOrderStatusList, Integer, Hash)>] ModelResponseOrderStatusList data, response status code and response headers
    def order_status_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_status_list ...'
      end
      # resource path
      local_var_path = '/order.status.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'action'] = opts[:'action'] if !opts[:'action'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderStatusList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_status_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_status_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.transaction.list
    # Retrieve list of order transaction
    # @param order_ids [String] Retrieves order transactions specified by order ids
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,amount,description')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseOrderTransactionList]
    def order_transaction_list(order_ids, opts = {})
      data, _status_code, _headers = order_transaction_list_with_http_info(order_ids, opts)
      data
    end

    # order.transaction.list
    # Retrieve list of order transaction
    # @param order_ids [String] Retrieves order transactions specified by order ids
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Store Id
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,order_id,amount,description')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseOrderTransactionList, Integer, Hash)>] ModelResponseOrderTransactionList data, response status code and response headers
    def order_transaction_list_with_http_info(order_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_transaction_list ...'
      end
      # verify the required parameter 'order_ids' is set
      if @api_client.config.client_side_validation && order_ids.nil?
        fail ArgumentError, "Missing the required parameter 'order_ids' when calling OrderApi.order_transaction_list"
      end
      # resource path
      local_var_path = '/order.transaction.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_ids'] = order_ids
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseOrderTransactionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_transaction_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_transaction_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # order.update
    # Update existing order.
    # @param order_id [String] Defines the orders specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :order_status Defines new order&#39;s status
    # @option opts [String] :financial_status Update order financial status to specified
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :cancellation_reason Defines the cancellation reason when the order will be canceled
    # @option opts [String] :order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;
    # @option opts [String] :comment Specifies order comment
    # @option opts [String] :admin_comment Specifies admin&#39;s order comment
    # @option opts [String] :admin_private_comment Specifies private admin&#39;s order comment
    # @option opts [String] :invoice_admin_comment Specifies admin&#39;s order invoice comment
    # @option opts [String] :date_modified Specifies order&#39;s  modification date
    # @option opts [String] :date_finished Specifies order&#39;s  finished date
    # @option opts [Boolean] :send_notifications Send notifications to customer after order was created (default to false)
    # @option opts [Boolean] :create_invoice Determines whether an invoice should be created if it has not already been created
    # @option opts [String] :origin The source of the order
    # @return [AccountConfigUpdate200Response]
    def order_update(order_id, opts = {})
      data, _status_code, _headers = order_update_with_http_info(order_id, opts)
      data
    end

    # order.update
    # Update existing order.
    # @param order_id [String] Defines the orders specified by order id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Defines store id where the order should be found
    # @option opts [String] :order_status Defines new order&#39;s status
    # @option opts [String] :financial_status Update order financial status to specified
    # @option opts [String] :fulfillment_status Create order with fulfillment status
    # @option opts [String] :cancellation_reason Defines the cancellation reason when the order will be canceled
    # @option opts [String] :order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;
    # @option opts [String] :comment Specifies order comment
    # @option opts [String] :admin_comment Specifies admin&#39;s order comment
    # @option opts [String] :admin_private_comment Specifies private admin&#39;s order comment
    # @option opts [String] :invoice_admin_comment Specifies admin&#39;s order invoice comment
    # @option opts [String] :date_modified Specifies order&#39;s  modification date
    # @option opts [String] :date_finished Specifies order&#39;s  finished date
    # @option opts [Boolean] :send_notifications Send notifications to customer after order was created (default to false)
    # @option opts [Boolean] :create_invoice Determines whether an invoice should be created if it has not already been created
    # @option opts [String] :origin The source of the order
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def order_update_with_http_info(order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_update ...'
      end
      # verify the required parameter 'order_id' is set
      if @api_client.config.client_side_validation && order_id.nil?
        fail ArgumentError, "Missing the required parameter 'order_id' when calling OrderApi.order_update"
      end
      # resource path
      local_var_path = '/order.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'order_id'] = order_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'order_status'] = opts[:'order_status'] if !opts[:'order_status'].nil?
      query_params[:'financial_status'] = opts[:'financial_status'] if !opts[:'financial_status'].nil?
      query_params[:'fulfillment_status'] = opts[:'fulfillment_status'] if !opts[:'fulfillment_status'].nil?
      query_params[:'cancellation_reason'] = opts[:'cancellation_reason'] if !opts[:'cancellation_reason'].nil?
      query_params[:'order_payment_method'] = opts[:'order_payment_method'] if !opts[:'order_payment_method'].nil?
      query_params[:'comment'] = opts[:'comment'] if !opts[:'comment'].nil?
      query_params[:'admin_comment'] = opts[:'admin_comment'] if !opts[:'admin_comment'].nil?
      query_params[:'admin_private_comment'] = opts[:'admin_private_comment'] if !opts[:'admin_private_comment'].nil?
      query_params[:'invoice_admin_comment'] = opts[:'invoice_admin_comment'] if !opts[:'invoice_admin_comment'].nil?
      query_params[:'date_modified'] = opts[:'date_modified'] if !opts[:'date_modified'].nil?
      query_params[:'date_finished'] = opts[:'date_finished'] if !opts[:'date_finished'].nil?
      query_params[:'send_notifications'] = opts[:'send_notifications'] if !opts[:'send_notifications'].nil?
      query_params[:'create_invoice'] = opts[:'create_invoice'] if !opts[:'create_invoice'].nil?
      query_params[:'origin'] = opts[:'origin'] if !opts[:'origin'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"OrderApi.order_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
