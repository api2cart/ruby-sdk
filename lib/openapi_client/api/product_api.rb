=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class ProductApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # product.add
    # Add new product to store.
    # @param product_add [ProductAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductAdd200Response]
    def product_add(product_add, opts = {})
      data, _status_code, _headers = product_add_with_http_info(product_add, opts)
      data
    end

    # product.add
    # Add new product to store.
    # @param product_add [ProductAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductAdd200Response, Integer, Hash)>] ProductAdd200Response data, response status code and response headers
    def product_add_with_http_info(product_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_add ...'
      end
      # verify the required parameter 'product_add' is set
      if @api_client.config.client_side_validation && product_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_add' when calling ProductApi.product_add"
      end
      # resource path
      local_var_path = '/product.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.add.batch
    # Add new products to the store.
    # @param product_add_batch [ProductAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_add_batch(product_add_batch, opts = {})
      data, _status_code, _headers = product_add_batch_with_http_info(product_add_batch, opts)
      data
    end

    # product.add.batch
    # Add new products to the store.
    # @param product_add_batch [ProductAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_add_batch_with_http_info(product_add_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_add_batch ...'
      end
      # verify the required parameter 'product_add_batch' is set
      if @api_client.config.client_side_validation && product_add_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_add_batch' when calling ProductApi.product_add_batch"
      end
      # resource path
      local_var_path = '/product.add.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_add_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_add_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_add_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.attribute.list
    # Get list of attributes and values.
    # @param product_id [String] Retrieves attributes specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Retrieves info for specified attribute_id
    # @option opts [String] :variant_id Defines product&#39;s variants specified by variant id
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
    # @option opts [String] :lang_id Retrieves attributes specified by language id
    # @option opts [String] :store_id Retrieves attributes specified by store id
    # @option opts [String] :sort_by Set field to sort by (default to 'attribute_id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'attribute_id,name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [ModelResponseProductAttributeList]
    def product_attribute_list(product_id, opts = {})
      data, _status_code, _headers = product_attribute_list_with_http_info(product_id, opts)
      data
    end

    # product.attribute.list
    # Get list of attributes and values.
    # @param product_id [String] Retrieves attributes specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Retrieves info for specified attribute_id
    # @option opts [String] :variant_id Defines product&#39;s variants specified by variant id
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
    # @option opts [String] :lang_id Retrieves attributes specified by language id
    # @option opts [String] :store_id Retrieves attributes specified by store id
    # @option opts [String] :sort_by Set field to sort by (default to 'attribute_id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'attribute_id,name')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @return [Array<(ModelResponseProductAttributeList, Integer, Hash)>] ModelResponseProductAttributeList data, response status code and response headers
    def product_attribute_list_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_attribute_list ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_list"
      end
      # resource path
      local_var_path = '/product.attribute.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'attribute_id'] = opts[:'attribute_id'] if !opts[:'attribute_id'].nil?
      query_params[:'variant_id'] = opts[:'variant_id'] if !opts[:'variant_id'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'set_name'] = opts[:'set_name'] if !opts[:'set_name'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductAttributeList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_attribute_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.attribute.value.set
    # Set attribute value to product.
    # @param product_id [String] Defines product id where the attribute should be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Filter by attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :attribute_name Define attribute name
    # @option opts [String] :value Define attribute value
    # @option opts [Integer] :value_id Define attribute value id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [ProductAttributeValueSet200Response]
    def product_attribute_value_set(product_id, opts = {})
      data, _status_code, _headers = product_attribute_value_set_with_http_info(product_id, opts)
      data
    end

    # product.attribute.value.set
    # Set attribute value to product.
    # @param product_id [String] Defines product id where the attribute should be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :attribute_id Filter by attribute_id
    # @option opts [String] :attribute_group_id Filter by attribute_group_id
    # @option opts [String] :attribute_name Define attribute name
    # @option opts [String] :value Define attribute value
    # @option opts [Integer] :value_id Define attribute value id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [Array<(ProductAttributeValueSet200Response, Integer, Hash)>] ProductAttributeValueSet200Response data, response status code and response headers
    def product_attribute_value_set_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_attribute_value_set ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_value_set"
      end
      # resource path
      local_var_path = '/product.attribute.value.set.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'attribute_id'] = opts[:'attribute_id'] if !opts[:'attribute_id'].nil?
      query_params[:'attribute_group_id'] = opts[:'attribute_group_id'] if !opts[:'attribute_group_id'].nil?
      query_params[:'attribute_name'] = opts[:'attribute_name'] if !opts[:'attribute_name'].nil?
      query_params[:'value'] = opts[:'value'] if !opts[:'value'].nil?
      query_params[:'value_id'] = opts[:'value_id'] if !opts[:'value_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductAttributeValueSet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_attribute_value_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_value_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.attribute.value.unset
    # Removes attribute value for a product.
    # @param product_id [String] Product id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [Boolean] :include_default Boolean, whether or not to unset default value of the attribute, if applicable (default to false)
    # @option opts [Boolean] :reindex Is reindex required (default to true)
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [ProductAttributeValueUnset200Response]
    def product_attribute_value_unset(product_id, attribute_id, opts = {})
      data, _status_code, _headers = product_attribute_value_unset_with_http_info(product_id, attribute_id, opts)
      data
    end

    # product.attribute.value.unset
    # Removes attribute value for a product.
    # @param product_id [String] Product id
    # @param attribute_id [String] Attribute Id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [Boolean] :include_default Boolean, whether or not to unset default value of the attribute, if applicable (default to false)
    # @option opts [Boolean] :reindex Is reindex required (default to true)
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [Array<(ProductAttributeValueUnset200Response, Integer, Hash)>] ProductAttributeValueUnset200Response data, response status code and response headers
    def product_attribute_value_unset_with_http_info(product_id, attribute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_attribute_value_unset ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_attribute_value_unset"
      end
      # verify the required parameter 'attribute_id' is set
      if @api_client.config.client_side_validation && attribute_id.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_id' when calling ProductApi.product_attribute_value_unset"
      end
      # resource path
      local_var_path = '/product.attribute.value.unset.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'attribute_id'] = attribute_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'include_default'] = opts[:'include_default'] if !opts[:'include_default'].nil?
      query_params[:'reindex'] = opts[:'reindex'] if !opts[:'reindex'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductAttributeValueUnset200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_attribute_value_unset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_attribute_value_unset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.brand.list
    # Get list of brands from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,short_description,active,url')
    # @option opts [String] :brand_ids Retrieves brands specified by brand ids
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves product brands specified by category id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :parent_id Retrieves brands specified by parent id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_value Entity search that is specified by some value
    # @return [ModelResponseProductBrandList]
    def product_brand_list(opts = {})
      data, _status_code, _headers = product_brand_list_with_http_info(opts)
      data
    end

    # product.brand.list
    # Get list of brands from your store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,short_description,active,url')
    # @option opts [String] :brand_ids Retrieves brands specified by brand ids
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves product brands specified by category id
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :parent_id Retrieves brands specified by parent id
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_value Entity search that is specified by some value
    # @return [Array<(ModelResponseProductBrandList, Integer, Hash)>] ModelResponseProductBrandList data, response status code and response headers
    def product_brand_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_brand_list ...'
      end
      # resource path
      local_var_path = '/product.brand.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'brand_ids'] = opts[:'brand_ids'] if !opts[:'brand_ids'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductBrandList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_brand_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_brand_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.child_item.find
    # Search product child item (bundled item or configurable product variant) in store catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @return [ProductChildItemFind200Response]
    def product_child_item_find(opts = {})
      data, _status_code, _headers = product_child_item_find_with_http_info(opts)
      data
    end

    # product.child_item.find
    # Search product child item (bundled item or configurable product variant) in store catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @return [Array<(ProductChildItemFind200Response, Integer, Hash)>] ProductChildItemFind200Response data, response status code and response headers
    def product_child_item_find_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_child_item_find ...'
      end
      # resource path
      local_var_path = '/product.child_item.find.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductChildItemFind200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_child_item_find",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.child_item.info
    # Get child for specific product.
    # @param product_id [String] Filter by parent product id
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [ProductChildItemInfo200Response]
    def product_child_item_info(product_id, id, opts = {})
      data, _status_code, _headers = product_child_item_info_with_http_info(product_id, id, opts)
      data
    end

    # product.child_item.info
    # Get child for specific product.
    # @param product_id [String] Filter by parent product id
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [Array<(ProductChildItemInfo200Response, Integer, Hash)>] ProductChildItemInfo200Response data, response status code and response headers
    def product_child_item_info_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_child_item_info ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_child_item_info"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_child_item_info"
      end
      # resource path
      local_var_path = '/product.child_item.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductChildItemInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_child_item_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.child_item.list
    # Get a list of a product's child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_id Filter by parent product id
    # @option opts [String] :product_ids Filter by parent product ids
    # @option opts [String] :sku Filter by products variant&#39;s sku
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Child products search that is specified by field
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @return [ModelResponseProductChildItemList]
    def product_child_item_list(opts = {})
      data, _status_code, _headers = product_child_item_list_with_http_info(opts)
      data
    end

    # product.child_item.list
    # Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'force_all')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_id Filter by parent product id
    # @option opts [String] :product_ids Filter by parent product ids
    # @option opts [String] :sku Filter by products variant&#39;s sku
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Child products search that is specified by field
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @return [Array<(ModelResponseProductChildItemList, Integer, Hash)>] ModelResponseProductChildItemList data, response status code and response headers
    def product_child_item_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_child_item_list ...'
      end
      # resource path
      local_var_path = '/product.child_item.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?
      query_params[:'return_global'] = opts[:'return_global'] if !opts[:'return_global'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductChildItemList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_child_item_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_child_item_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.count
    # Count products in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_id Counts products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Counts products specified by store id
    # @option opts [String] :lang_id Counts products specified by language id
    # @option opts [String] :product_ids Counts products specified by product ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [String] :brand_name Retrieves brands specified by brand name
    # @option opts [Array<String>] :product_attributes Defines product attributes
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :type Defines products&#39;s type
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts products that are searched specified by field
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @option opts [String] :categories_ids Defines product add that is specified by comma-separated categories id
    # @return [ProductCount200Response]
    def product_count(opts = {})
      data, _status_code, _headers = product_count_with_http_info(opts)
      data
    end

    # product.count
    # Count products in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :category_id Counts products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Counts products specified by store id
    # @option opts [String] :lang_id Counts products specified by language id
    # @option opts [String] :product_ids Counts products specified by product ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [String] :brand_name Retrieves brands specified by brand name
    # @option opts [Array<String>] :product_attributes Defines product attributes
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :type Defines products&#39;s type
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts products that are searched specified by field
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @option opts [String] :categories_ids Defines product add that is specified by comma-separated categories id
    # @return [Array<(ProductCount200Response, Integer, Hash)>] ProductCount200Response data, response status code and response headers
    def product_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_count ...'
      end
      # resource path
      local_var_path = '/product.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'avail_view'] = opts[:'avail_view'] if !opts[:'avail_view'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'brand_name'] = opts[:'brand_name'] if !opts[:'brand_name'].nil?
      query_params[:'product_attributes'] = @api_client.build_collection_param(opts[:'product_attributes'], :multi) if !opts[:'product_attributes'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?
      query_params[:'return_global'] = opts[:'return_global'] if !opts[:'return_global'].nil?
      query_params[:'categories_ids'] = opts[:'categories_ids'] if !opts[:'categories_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.currency.add
    # Add currency and/or set default in store
    # @param iso3 [String] Specifies standardized currency code
    # @param rate [Float] Defines the numerical identifier against to the major currency
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines currency&#39;s name
    # @option opts [Boolean] :avail Specifies whether the currency is available (default to true)
    # @option opts [String] :symbol_left Defines the symbol that is located before the currency
    # @option opts [String] :symbol_right Defines the symbol that is located after the currency
    # @option opts [Boolean] :default Specifies currency&#39;s default meaning (default to false)
    # @return [ProductCurrencyAdd200Response]
    def product_currency_add(iso3, rate, opts = {})
      data, _status_code, _headers = product_currency_add_with_http_info(iso3, rate, opts)
      data
    end

    # product.currency.add
    # Add currency and/or set default in store
    # @param iso3 [String] Specifies standardized currency code
    # @param rate [Float] Defines the numerical identifier against to the major currency
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines currency&#39;s name
    # @option opts [Boolean] :avail Specifies whether the currency is available (default to true)
    # @option opts [String] :symbol_left Defines the symbol that is located before the currency
    # @option opts [String] :symbol_right Defines the symbol that is located after the currency
    # @option opts [Boolean] :default Specifies currency&#39;s default meaning (default to false)
    # @return [Array<(ProductCurrencyAdd200Response, Integer, Hash)>] ProductCurrencyAdd200Response data, response status code and response headers
    def product_currency_add_with_http_info(iso3, rate, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_currency_add ...'
      end
      # verify the required parameter 'iso3' is set
      if @api_client.config.client_side_validation && iso3.nil?
        fail ArgumentError, "Missing the required parameter 'iso3' when calling ProductApi.product_currency_add"
      end
      # verify the required parameter 'rate' is set
      if @api_client.config.client_side_validation && rate.nil?
        fail ArgumentError, "Missing the required parameter 'rate' when calling ProductApi.product_currency_add"
      end
      # resource path
      local_var_path = '/product.currency.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'iso3'] = iso3
      query_params[:'rate'] = rate
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'symbol_left'] = opts[:'symbol_left'] if !opts[:'symbol_left'].nil?
      query_params[:'symbol_right'] = opts[:'symbol_right'] if !opts[:'symbol_right'].nil?
      query_params[:'default'] = opts[:'default'] if !opts[:'default'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductCurrencyAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_currency_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_currency_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.currency.list
    # Get list of currencies
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'name,iso3,default,avail')
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [Boolean] :default Specifies the set of default/not default currencies
    # @option opts [Boolean] :avail Specifies the set of available/not available currencies
    # @return [ModelResponseProductCurrencyList]
    def product_currency_list(opts = {})
      data, _status_code, _headers = product_currency_list_with_http_info(opts)
      data
    end

    # product.currency.list
    # Get list of currencies
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'name,iso3,default,avail')
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [Boolean] :default Specifies the set of default/not default currencies
    # @option opts [Boolean] :avail Specifies the set of available/not available currencies
    # @return [Array<(ModelResponseProductCurrencyList, Integer, Hash)>] ModelResponseProductCurrencyList data, response status code and response headers
    def product_currency_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_currency_list ...'
      end
      # resource path
      local_var_path = '/product.currency.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'default'] = opts[:'default'] if !opts[:'default'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductCurrencyList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_currency_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_currency_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.delete
    # Product delete
    # @param id [String] Product id that will be removed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [CustomerDelete200Response]
    def product_delete(id, opts = {})
      data, _status_code, _headers = product_delete_with_http_info(id, opts)
      data
    end

    # product.delete
    # Product delete
    # @param id [String] Product id that will be removed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(CustomerDelete200Response, Integer, Hash)>] CustomerDelete200Response data, response status code and response headers
    def product_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_delete"
      end
      # resource path
      local_var_path = '/product.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CustomerDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.delete.batch
    # Remove product from the store.
    # @param product_delete_batch [ProductDeleteBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_delete_batch(product_delete_batch, opts = {})
      data, _status_code, _headers = product_delete_batch_with_http_info(product_delete_batch, opts)
      data
    end

    # product.delete.batch
    # Remove product from the store.
    # @param product_delete_batch [ProductDeleteBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_delete_batch_with_http_info(product_delete_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_delete_batch ...'
      end
      # verify the required parameter 'product_delete_batch' is set
      if @api_client.config.client_side_validation && product_delete_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_delete_batch' when calling ProductApi.product_delete_batch"
      end
      # resource path
      local_var_path = '/product.delete.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_delete_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_delete_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_delete_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.fields
    # Retrieve all available fields for product item in store.
    # @param [Hash] opts the optional parameters
    # @return [CartConfigUpdate200Response]
    def product_fields(opts = {})
      data, _status_code, _headers = product_fields_with_http_info(opts)
      data
    end

    # product.fields
    # Retrieve all available fields for product item in store.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartConfigUpdate200Response, Integer, Hash)>] CartConfigUpdate200Response data, response status code and response headers
    def product_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_fields ...'
      end
      # resource path
      local_var_path = '/product.fields.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_fields",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.find
    # Search product in store catalog. \"Apple\" is specified here by default.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'name')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found (default to 'product')
    # @option opts [String] :lang_id Search products specified by language id
    # @option opts [String] :store_id Store Id
    # @return [ProductFind200Response]
    def product_find(find_value, opts = {})
      data, _status_code, _headers = product_find_with_http_info(find_value, opts)
      data
    end

    # product.find
    # Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'name')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found (default to 'product')
    # @option opts [String] :lang_id Search products specified by language id
    # @option opts [String] :store_id Store Id
    # @return [Array<(ProductFind200Response, Integer, Hash)>] ProductFind200Response data, response status code and response headers
    def product_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_find ...'
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling ProductApi.product_find"
      end
      # resource path
      local_var_path = '/product.find.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'find_what'] = opts[:'find_what'] if !opts[:'find_what'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductFind200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_find",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.image.add
    # Add image to product
    # @param product_image_add [ProductImageAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductImageAdd200Response]
    def product_image_add(product_image_add, opts = {})
      data, _status_code, _headers = product_image_add_with_http_info(product_image_add, opts)
      data
    end

    # product.image.add
    # Add image to product
    # @param product_image_add [ProductImageAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductImageAdd200Response, Integer, Hash)>] ProductImageAdd200Response data, response status code and response headers
    def product_image_add_with_http_info(product_image_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_image_add ...'
      end
      # verify the required parameter 'product_image_add' is set
      if @api_client.config.client_side_validation && product_image_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_image_add' when calling ProductApi.product_image_add"
      end
      # resource path
      local_var_path = '/product.image.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_image_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductImageAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_image_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.image.delete
    # Delete image
    # @param product_id [String] Defines product id where the image should be deleted
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_image_delete(product_id, id, opts = {})
      data, _status_code, _headers = product_image_delete_with_http_info(product_id, id, opts)
      data
    end

    # product.image.delete
    # Delete image
    # @param product_id [String] Defines product id where the image should be deleted
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_image_delete_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_image_delete ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_image_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_image_delete"
      end
      # resource path
      local_var_path = '/product.image.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_image_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.image.update
    # Update details of image
    # @param product_id [String] Defines product id where the image should be updated
    # @param id [String] Defines image update specified by image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :variant_ids Defines product&#39;s variants ids
    # @option opts [String] :image_name Defines image&#39;s name
    # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list (default to 'additional')
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :hidden Define is hide image
    # @return [ProductImageUpdate200Response]
    def product_image_update(product_id, id, opts = {})
      data, _status_code, _headers = product_image_update_with_http_info(product_id, id, opts)
      data
    end

    # product.image.update
    # Update details of image
    # @param product_id [String] Defines product id where the image should be updated
    # @param id [String] Defines image update specified by image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :variant_ids Defines product&#39;s variants ids
    # @option opts [String] :image_name Defines image&#39;s name
    # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list (default to 'additional')
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [Integer] :position Defines image’s position in the list
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @option opts [Boolean] :hidden Define is hide image
    # @return [Array<(ProductImageUpdate200Response, Integer, Hash)>] ProductImageUpdate200Response data, response status code and response headers
    def product_image_update_with_http_info(product_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_image_update ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_image_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_image_update"
      end
      # resource path
      local_var_path = '/product.image.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'id'] = id
      query_params[:'variant_ids'] = opts[:'variant_ids'] if !opts[:'variant_ids'].nil?
      query_params[:'image_name'] = opts[:'image_name'] if !opts[:'image_name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'hidden'] = opts[:'hidden'] if !opts[:'hidden'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductImageUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_image_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_image_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.info
    # Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
    # @param id [String] Retrieves product&#39;s info specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price,categories_ids')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves product info specified by store id
    # @option opts [String] :lang_id Retrieves product info specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [ProductInfo200Response]
    def product_info(id, opts = {})
      data, _status_code, _headers = product_info_with_http_info(id, opts)
      data
    end

    # product.info
    # Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
    # @param id [String] Retrieves product&#39;s info specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price,categories_ids')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves product info specified by store id
    # @option opts [String] :lang_id Retrieves product info specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @return [Array<(ProductInfo200Response, Integer, Hash)>] ProductInfo200Response data, response status code and response headers
    def product_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_info"
      end
      # resource path
      local_var_path = '/product.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.list
    # Get list of products from your store. Returns 10 products by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price,categories_ids')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Retrieves products specified by store id
    # @option opts [String] :lang_id Retrieves products specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_ids Retrieves products specified by product ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [String] :sort_by Set field to sort by (default to 'id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :sku Filter by product&#39;s sku
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @option opts [String] :brand_name Retrieves brands specified by brand name
    # @option opts [Array<String>] :product_attributes Defines product attributes
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :type Defines products&#39;s type
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Product search that is specified by field
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @option opts [String] :categories_ids Retrieves products specified by categories ids
    # @return [ModelResponseProductList]
    def product_list(opts = {})
      data, _status_code, _headers = product_list_with_http_info(opts)
      data
    end

    # product.list
    # Get list of products from your store. Returns 10 products by default.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price,categories_ids')
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :category_id Retrieves products specified by category id
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
    # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
    # @option opts [String] :store_id Retrieves products specified by store id
    # @option opts [String] :lang_id Retrieves products specified by language id
    # @option opts [String] :currency_id Currency Id
    # @option opts [String] :product_ids Retrieves products specified by product ids
    # @option opts [String] :since_id Retrieve entities starting from the specified id.
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [String] :sort_by Set field to sort by (default to 'id')
    # @option opts [String] :sort_direction Set sorting direction (default to 'asc')
    # @option opts [String] :sku Filter by product&#39;s sku
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @option opts [String] :brand_name Retrieves brands specified by brand name
    # @option opts [Array<String>] :product_attributes Defines product attributes
    # @option opts [String] :status Defines product&#39;s status
    # @option opts [String] :type Defines products&#39;s type
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Product search that is specified by field
    # @option opts [Boolean] :use_latest_api_version Use the latest platform API version (default to false)
    # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned. (default to false)
    # @option opts [String] :categories_ids Retrieves products specified by categories ids
    # @return [Array<(ModelResponseProductList, Integer, Hash)>] ModelResponseProductList data, response status code and response headers
    def product_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_list ...'
      end
      # resource path
      local_var_path = '/product.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'avail_view'] = opts[:'avail_view'] if !opts[:'avail_view'].nil?
      query_params[:'avail_sale'] = opts[:'avail_sale'] if !opts[:'avail_sale'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'currency_id'] = opts[:'currency_id'] if !opts[:'currency_id'].nil?
      query_params[:'product_ids'] = opts[:'product_ids'] if !opts[:'product_ids'].nil?
      query_params[:'since_id'] = opts[:'since_id'] if !opts[:'since_id'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sort_direction'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'disable_cache'] = opts[:'disable_cache'] if !opts[:'disable_cache'].nil?
      query_params[:'brand_name'] = opts[:'brand_name'] if !opts[:'brand_name'].nil?
      query_params[:'product_attributes'] = @api_client.build_collection_param(opts[:'product_attributes'], :multi) if !opts[:'product_attributes'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'use_latest_api_version'] = opts[:'use_latest_api_version'] if !opts[:'use_latest_api_version'].nil?
      query_params[:'return_global'] = opts[:'return_global'] if !opts[:'return_global'].nil?
      query_params[:'categories_ids'] = opts[:'categories_ids'] if !opts[:'categories_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.manufacturer.add
    # Add manufacturer to store and assign to product
    # @param product_id [String] Defines products specified by product id
    # @param manufacturer [String] Defines product’s manufacturer&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [ProductManufacturerAdd200Response]
    def product_manufacturer_add(product_id, manufacturer, opts = {})
      data, _status_code, _headers = product_manufacturer_add_with_http_info(product_id, manufacturer, opts)
      data
    end

    # product.manufacturer.add
    # Add manufacturer to store and assign to product
    # @param product_id [String] Defines products specified by product id
    # @param manufacturer [String] Defines product’s manufacturer&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(ProductManufacturerAdd200Response, Integer, Hash)>] ProductManufacturerAdd200Response data, response status code and response headers
    def product_manufacturer_add_with_http_info(product_id, manufacturer, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_manufacturer_add ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_manufacturer_add"
      end
      # verify the required parameter 'manufacturer' is set
      if @api_client.config.client_side_validation && manufacturer.nil?
        fail ArgumentError, "Missing the required parameter 'manufacturer' when calling ProductApi.product_manufacturer_add"
      end
      # resource path
      local_var_path = '/product.manufacturer.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'manufacturer'] = manufacturer
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductManufacturerAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_manufacturer_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_manufacturer_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.add
    # Add product option from store.
    # @param product_option_add [ProductOptionAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductOptionAdd200Response]
    def product_option_add(product_option_add, opts = {})
      data, _status_code, _headers = product_option_add_with_http_info(product_option_add, opts)
      data
    end

    # product.option.add
    # Add product option from store.
    # @param product_option_add [ProductOptionAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductOptionAdd200Response, Integer, Hash)>] ProductOptionAdd200Response data, response status code and response headers
    def product_option_add_with_http_info(product_option_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_add ...'
      end
      # verify the required parameter 'product_option_add' is set
      if @api_client.config.client_side_validation && product_option_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_option_add' when calling ProductApi.product_option_add"
      end
      # resource path
      local_var_path = '/product.option.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_option_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductOptionAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.assign
    # Assign option from product.
    # @param product_id [String] Defines product id where the option should be assigned
    # @param option_id [String] Defines option id which has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :required Defines if the option is required (default to false)
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :option_values Defines option values that has to be assigned
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [ProductOptionAssign200Response]
    def product_option_assign(product_id, option_id, opts = {})
      data, _status_code, _headers = product_option_assign_with_http_info(product_id, option_id, opts)
      data
    end

    # product.option.assign
    # Assign option from product.
    # @param product_id [String] Defines product id where the option should be assigned
    # @param option_id [String] Defines option id which has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :required Defines if the option is required (default to false)
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :option_values Defines option values that has to be assigned
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [Array<(ProductOptionAssign200Response, Integer, Hash)>] ProductOptionAssign200Response data, response status code and response headers
    def product_option_assign_with_http_info(product_id, option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_assign ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_assign"
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_assign"
      end
      # resource path
      local_var_path = '/product.option.assign.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'option_id'] = option_id
      query_params[:'required'] = opts[:'required'] if !opts[:'required'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'option_values'] = opts[:'option_values'] if !opts[:'option_values'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductOptionAssign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.delete
    # Product option delete.
    # @param option_id [String] Defines option id that should be deleted
    # @param product_id [String] Defines product id where the option should be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_option_delete(option_id, product_id, opts = {})
      data, _status_code, _headers = product_option_delete_with_http_info(option_id, product_id, opts)
      data
    end

    # product.option.delete
    # Product option delete.
    # @param option_id [String] Defines option id that should be deleted
    # @param product_id [String] Defines product id where the option should be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_option_delete_with_http_info(option_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_delete ...'
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_delete"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_delete"
      end
      # resource path
      local_var_path = '/product.option.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'option_id'] = option_id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.list
    # Get list of options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :product_id Retrieves products&#39; options specified by product id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [ModelResponseProductOptionList]
    def product_option_list(opts = {})
      data, _status_code, _headers = product_option_list_with_http_info(opts)
      data
    end

    # product.option.list
    # Get list of options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :product_id Retrieves products&#39; options specified by product id
    # @option opts [String] :lang_id Language id
    # @option opts [String] :store_id Store Id
    # @return [Array<(ModelResponseProductOptionList, Integer, Hash)>] ModelResponseProductOptionList data, response status code and response headers
    def product_option_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_list ...'
      end
      # resource path
      local_var_path = '/product.option.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductOptionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.value.add
    # Add product option item from option.
    # @param product_id [String] Defines product id where the option value should be added
    # @param option_id [String] Defines option id where the value has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option_value Defines option value that has to be added
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :display_value Defines the value that will be displayed for the option value
    # @option opts [Boolean] :is_default Defines as a default
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [ProductOptionValueAdd200Response]
    def product_option_value_add(product_id, option_id, opts = {})
      data, _status_code, _headers = product_option_value_add_with_http_info(product_id, option_id, opts)
      data
    end

    # product.option.value.add
    # Add product option item from option.
    # @param product_id [String] Defines product id where the option value should be added
    # @param option_id [String] Defines option id where the value has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option_value Defines option value that has to be added
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :display_value Defines the value that will be displayed for the option value
    # @option opts [Boolean] :is_default Defines as a default
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [Array<(ProductOptionValueAdd200Response, Integer, Hash)>] ProductOptionValueAdd200Response data, response status code and response headers
    def product_option_value_add_with_http_info(product_id, option_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_value_add ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_value_add"
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_value_add"
      end
      # resource path
      local_var_path = '/product.option.value.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'option_id'] = option_id
      query_params[:'option_value'] = opts[:'option_value'] if !opts[:'option_value'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'display_value'] = opts[:'display_value'] if !opts[:'display_value'].nil?
      query_params[:'is_default'] = opts[:'is_default'] if !opts[:'is_default'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductOptionValueAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_value_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.value.assign
    # Assign product option item from product.
    # @param product_option_id [Integer] Defines product&#39;s option id where the value has to be assigned
    # @param option_value_id [String] Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [ProductOptionValueAssign200Response]
    def product_option_value_assign(product_option_id, option_value_id, opts = {})
      data, _status_code, _headers = product_option_value_assign_with_http_info(product_option_id, option_value_id, opts)
      data
    end

    # product.option.value.assign
    # Assign product option item from product.
    # @param product_option_id [Integer] Defines product&#39;s option id where the value has to be assigned
    # @param option_value_id [String] Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [Array<(ProductOptionValueAssign200Response, Integer, Hash)>] ProductOptionValueAssign200Response data, response status code and response headers
    def product_option_value_assign_with_http_info(product_option_id, option_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_value_assign ...'
      end
      # verify the required parameter 'product_option_id' is set
      if @api_client.config.client_side_validation && product_option_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_option_id' when calling ProductApi.product_option_value_assign"
      end
      # verify the required parameter 'option_value_id' is set
      if @api_client.config.client_side_validation && option_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_value_id' when calling ProductApi.product_option_value_assign"
      end
      # resource path
      local_var_path = '/product.option.value.assign.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_option_id'] = product_option_id
      query_params[:'option_value_id'] = option_value_id
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductOptionValueAssign200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_value_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.value.delete
    # Product option value delete.
    # @param option_id [String] Defines option id where the value should be deleted
    # @param option_value_id [String] Defines option value id that should be deleted
    # @param product_id [String] Defines product id where the option value should be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_option_value_delete(option_id, option_value_id, product_id, opts = {})
      data, _status_code, _headers = product_option_value_delete_with_http_info(option_id, option_value_id, product_id, opts)
      data
    end

    # product.option.value.delete
    # Product option value delete.
    # @param option_id [String] Defines option id where the value should be deleted
    # @param option_value_id [String] Defines option value id that should be deleted
    # @param product_id [String] Defines product id where the option value should be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_option_value_delete_with_http_info(option_id, option_value_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_value_delete ...'
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_value_delete"
      end
      # verify the required parameter 'option_value_id' is set
      if @api_client.config.client_side_validation && option_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_value_id' when calling ProductApi.product_option_value_delete"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_value_delete"
      end
      # resource path
      local_var_path = '/product.option.value.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'option_id'] = option_id
      query_params[:'option_value_id'] = option_value_id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_value_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.option.value.update
    # Update product option item from option.
    # @param product_id [String] Defines product id where the option value should be updated
    # @param option_id [String] Defines option id where the value has to be updated
    # @param option_value_id [String] Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option_value Defines option value that has to be added
    # @option opts [Float] :price Defines new product option price
    # @option opts [Float] :quantity Defines new products&#39; options quantity
    # @option opts [String] :display_value Defines the value that will be displayed for the option value
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [AccountConfigUpdate200Response]
    def product_option_value_update(product_id, option_id, option_value_id, opts = {})
      data, _status_code, _headers = product_option_value_update_with_http_info(product_id, option_id, option_value_id, opts)
      data
    end

    # product.option.value.update
    # Update product option item from option.
    # @param product_id [String] Defines product id where the option value should be updated
    # @param option_id [String] Defines option id where the value has to be updated
    # @param option_value_id [String] Defines value id that has to be assigned
    # @param [Hash] opts the optional parameters
    # @option opts [String] :option_value Defines option value that has to be added
    # @option opts [Float] :price Defines new product option price
    # @option opts [Float] :quantity Defines new products&#39; options quantity
    # @option opts [String] :display_value Defines the value that will be displayed for the option value
    # @option opts [Boolean] :clear_cache Is cache clear required (default to true)
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_option_value_update_with_http_info(product_id, option_id, option_value_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_option_value_update ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_option_value_update"
      end
      # verify the required parameter 'option_id' is set
      if @api_client.config.client_side_validation && option_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_id' when calling ProductApi.product_option_value_update"
      end
      # verify the required parameter 'option_value_id' is set
      if @api_client.config.client_side_validation && option_value_id.nil?
        fail ArgumentError, "Missing the required parameter 'option_value_id' when calling ProductApi.product_option_value_update"
      end
      # resource path
      local_var_path = '/product.option.value.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'option_id'] = option_id
      query_params[:'option_value_id'] = option_value_id
      query_params[:'option_value'] = opts[:'option_value'] if !opts[:'option_value'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?
      query_params[:'quantity'] = opts[:'quantity'] if !opts[:'quantity'].nil?
      query_params[:'display_value'] = opts[:'display_value'] if !opts[:'display_value'].nil?
      query_params[:'clear_cache'] = opts[:'clear_cache'] if !opts[:'clear_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_option_value_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_option_value_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.price.add
    # Add some prices to the product.
    # @param product_price_add [ProductPriceAdd] 
    # @param [Hash] opts the optional parameters
    # @return [CartValidate200Response]
    def product_price_add(product_price_add, opts = {})
      data, _status_code, _headers = product_price_add_with_http_info(product_price_add, opts)
      data
    end

    # product.price.add
    # Add some prices to the product.
    # @param product_price_add [ProductPriceAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartValidate200Response, Integer, Hash)>] CartValidate200Response data, response status code and response headers
    def product_price_add_with_http_info(product_price_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_price_add ...'
      end
      # verify the required parameter 'product_price_add' is set
      if @api_client.config.client_side_validation && product_price_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_price_add' when calling ProductApi.product_price_add"
      end
      # resource path
      local_var_path = '/product.price.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_price_add)

      # return_type
      return_type = opts[:debug_return_type] || 'CartValidate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_price_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.price.delete
    # Delete some prices of the product
    # @param product_id [String] Defines the product where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines product&#39;s group prices
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_price_delete(product_id, opts = {})
      data, _status_code, _headers = product_price_delete_with_http_info(product_id, opts)
      data
    end

    # product.price.delete
    # Delete some prices of the product
    # @param product_id [String] Defines the product where the price has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :group_prices Defines product&#39;s group prices
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_price_delete_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_price_delete ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_price_delete"
      end
      # resource path
      local_var_path = '/product.price.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'group_prices'] = opts[:'group_prices'] if !opts[:'group_prices'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_price_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.price.update
    # Update some prices of the product.
    # @param product_price_update [ProductPriceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def product_price_update(product_price_update, opts = {})
      data, _status_code, _headers = product_price_update_with_http_info(product_price_update, opts)
      data
    end

    # product.price.update
    # Update some prices of the product.
    # @param product_price_update [ProductPriceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_price_update_with_http_info(product_price_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_price_update ...'
      end
      # verify the required parameter 'product_price_update' is set
      if @api_client.config.client_side_validation && product_price_update.nil?
        fail ArgumentError, "Missing the required parameter 'product_price_update' when calling ProductApi.product_price_update"
      end
      # resource path
      local_var_path = '/product.price.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_price_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_price_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_price_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.review.list
    # Get reviews of a specific product.
    # @param product_id [String] Product id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :ids Retrieves reviews specified by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [ModelResponseProductReviewList]
    def product_review_list(product_id, opts = {})
      data, _status_code, _headers = product_review_list_with_http_info(product_id, opts)
      data
    end

    # product.review.list
    # Get reviews of a specific product.
    # @param product_id [String] Product id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :ids Retrieves reviews specified by ids
    # @option opts [String] :store_id Store Id
    # @option opts [String] :status Defines status
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,customer_id,email,message,status,product_id,nick_name,summary,rating,ratings,status,created_time')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @return [Array<(ModelResponseProductReviewList, Integer, Hash)>] ModelResponseProductReviewList data, response status code and response headers
    def product_review_list_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_review_list ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_review_list"
      end
      # resource path
      local_var_path = '/product.review.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'ids'] = opts[:'ids'] if !opts[:'ids'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseProductReviewList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_review_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_review_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.store.assign
    # Assign product to store
    # @param product_id [String] Defines id of the product which should be assigned to a store
    # @param store_id [String] Defines id of the store product should be assigned to
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def product_store_assign(product_id, store_id, opts = {})
      data, _status_code, _headers = product_store_assign_with_http_info(product_id, store_id, opts)
      data
    end

    # product.store.assign
    # Assign product to store
    # @param product_id [String] Defines id of the product which should be assigned to a store
    # @param store_id [String] Defines id of the store product should be assigned to
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_store_assign_with_http_info(product_id, store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_store_assign ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_store_assign"
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling ProductApi.product_store_assign"
      end
      # resource path
      local_var_path = '/product.store.assign.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = store_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_store_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_store_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.tax.add
    # Add tax class and tax rate to store and assign to product.
    # @param product_tax_add [ProductTaxAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductTaxAdd200Response]
    def product_tax_add(product_tax_add, opts = {})
      data, _status_code, _headers = product_tax_add_with_http_info(product_tax_add, opts)
      data
    end

    # product.tax.add
    # Add tax class and tax rate to store and assign to product.
    # @param product_tax_add [ProductTaxAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductTaxAdd200Response, Integer, Hash)>] ProductTaxAdd200Response data, response status code and response headers
    def product_tax_add_with_http_info(product_tax_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_tax_add ...'
      end
      # verify the required parameter 'product_tax_add' is set
      if @api_client.config.client_side_validation && product_tax_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_tax_add' when calling ProductApi.product_tax_add"
      end
      # resource path
      local_var_path = '/product.tax.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_tax_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductTaxAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_tax_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_tax_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.update
    # This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
    # @param product_update [ProductUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def product_update(product_update, opts = {})
      data, _status_code, _headers = product_update_with_http_info(product_update, opts)
      data
    end

    # product.update
    # This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
    # @param product_update [ProductUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_update_with_http_info(product_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_update ...'
      end
      # verify the required parameter 'product_update' is set
      if @api_client.config.client_side_validation && product_update.nil?
        fail ArgumentError, "Missing the required parameter 'product_update' when calling ProductApi.product_update"
      end
      # resource path
      local_var_path = '/product.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.update.batch
    # Update products on the store.
    # @param product_update_batch [ProductUpdateBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_update_batch(product_update_batch, opts = {})
      data, _status_code, _headers = product_update_batch_with_http_info(product_update_batch, opts)
      data
    end

    # product.update.batch
    # Update products on the store.
    # @param product_update_batch [ProductUpdateBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_update_batch_with_http_info(product_update_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_update_batch ...'
      end
      # verify the required parameter 'product_update_batch' is set
      if @api_client.config.client_side_validation && product_update_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_update_batch' when calling ProductApi.product_update_batch"
      end
      # resource path
      local_var_path = '/product.update.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_update_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_update_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_update_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.add
    # Add variant to product.
    # @param product_variant_add [ProductVariantAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductVariantAdd200Response]
    def product_variant_add(product_variant_add, opts = {})
      data, _status_code, _headers = product_variant_add_with_http_info(product_variant_add, opts)
      data
    end

    # product.variant.add
    # Add variant to product.
    # @param product_variant_add [ProductVariantAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductVariantAdd200Response, Integer, Hash)>] ProductVariantAdd200Response data, response status code and response headers
    def product_variant_add_with_http_info(product_variant_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_add ...'
      end
      # verify the required parameter 'product_variant_add' is set
      if @api_client.config.client_side_validation && product_variant_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_add' when calling ProductApi.product_variant_add"
      end
      # resource path
      local_var_path = '/product.variant.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductVariantAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.add.batch
    # Add new product variants to the store.
    # @param product_variant_add_batch [ProductVariantAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_variant_add_batch(product_variant_add_batch, opts = {})
      data, _status_code, _headers = product_variant_add_batch_with_http_info(product_variant_add_batch, opts)
      data
    end

    # product.variant.add.batch
    # Add new product variants to the store.
    # @param product_variant_add_batch [ProductVariantAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_variant_add_batch_with_http_info(product_variant_add_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_add_batch ...'
      end
      # verify the required parameter 'product_variant_add_batch' is set
      if @api_client.config.client_side_validation && product_variant_add_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_add_batch' when calling ProductApi.product_variant_add_batch"
      end
      # resource path
      local_var_path = '/product.variant.add.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_add_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_add_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_add_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.count
    # Get count variants.
    # @param product_id [String] Retrieves products&#39; variants specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Counts products’ variants specified by category id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [ProductVariantCount200Response]
    def product_variant_count(product_id, opts = {})
      data, _status_code, _headers = product_variant_count_with_http_info(product_id, opts)
      data
    end

    # product.variant.count
    # Get count variants.
    # @param product_id [String] Retrieves products&#39; variants specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Counts products’ variants specified by category id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [Array<(ProductVariantCount200Response, Integer, Hash)>] ProductVariantCount200Response data, response status code and response headers
    def product_variant_count_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_count ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_count"
      end
      # resource path
      local_var_path = '/product.variant.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductVariantCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.delete
    # Delete variant.
    # @param id [String] Defines variant removal, specified by variant id
    # @param product_id [String] Defines product&#39;s id where the variant has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeValueDelete200Response]
    def product_variant_delete(id, product_id, opts = {})
      data, _status_code, _headers = product_variant_delete_with_http_info(id, product_id, opts)
      data
    end

    # product.variant.delete
    # Delete variant.
    # @param id [String] Defines variant removal, specified by variant id
    # @param product_id [String] Defines product&#39;s id where the variant has to be deleted
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeValueDelete200Response, Integer, Hash)>] AttributeValueDelete200Response data, response status code and response headers
    def product_variant_delete_with_http_info(id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_delete"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_delete"
      end
      # resource path
      local_var_path = '/product.variant.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeValueDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.delete.batch
    # Remove product variants from the store.
    # @param product_variant_delete_batch [ProductVariantDeleteBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_variant_delete_batch(product_variant_delete_batch, opts = {})
      data, _status_code, _headers = product_variant_delete_batch_with_http_info(product_variant_delete_batch, opts)
      data
    end

    # product.variant.delete.batch
    # Remove product variants from the store.
    # @param product_variant_delete_batch [ProductVariantDeleteBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_variant_delete_batch_with_http_info(product_variant_delete_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_delete_batch ...'
      end
      # verify the required parameter 'product_variant_delete_batch' is set
      if @api_client.config.client_side_validation && product_variant_delete_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_delete_batch' when calling ProductApi.product_variant_delete_batch"
      end
      # resource path
      local_var_path = '/product.variant.delete.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_delete_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_delete_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_delete_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.image.add
    # Add image to product
    # @param product_variant_image_add [ProductVariantImageAdd] 
    # @param [Hash] opts the optional parameters
    # @return [ProductVariantImageAdd200Response]
    def product_variant_image_add(product_variant_image_add, opts = {})
      data, _status_code, _headers = product_variant_image_add_with_http_info(product_variant_image_add, opts)
      data
    end

    # product.variant.image.add
    # Add image to product
    # @param product_variant_image_add [ProductVariantImageAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductVariantImageAdd200Response, Integer, Hash)>] ProductVariantImageAdd200Response data, response status code and response headers
    def product_variant_image_add_with_http_info(product_variant_image_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_image_add ...'
      end
      # verify the required parameter 'product_variant_image_add' is set
      if @api_client.config.client_side_validation && product_variant_image_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_image_add' when calling ProductApi.product_variant_image_add"
      end
      # resource path
      local_var_path = '/product.variant.image.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_image_add)

      # return_type
      return_type = opts[:debug_return_type] || 'ProductVariantImageAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_image_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.image.delete
    # Delete  image to product
    # @param product_id [String] Defines product id where the variant image should be deleted
    # @param product_variant_id [String] Defines product&#39;s variants specified by variant id
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_variant_image_delete(product_id, product_variant_id, id, opts = {})
      data, _status_code, _headers = product_variant_image_delete_with_http_info(product_id, product_variant_id, id, opts)
      data
    end

    # product.variant.image.delete
    # Delete  image to product
    # @param product_id [String] Defines product id where the variant image should be deleted
    # @param product_variant_id [String] Defines product&#39;s variants specified by variant id
    # @param id [String] Entity id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_variant_image_delete_with_http_info(product_id, product_variant_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_image_delete ...'
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_image_delete"
      end
      # verify the required parameter 'product_variant_id' is set
      if @api_client.config.client_side_validation && product_variant_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_id' when calling ProductApi.product_variant_image_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_image_delete"
      end
      # resource path
      local_var_path = '/product.variant.image.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'product_id'] = product_id
      query_params[:'product_variant_id'] = product_variant_id
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_image_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_image_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.info
    # Get variant info. This method is deprecated, and its development is stopped. Please use \"product.child_item.info\" instead.
    # @param id [String] Retrieves variant&#39;s info specified by variant id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves variant info specified by store id
    # @return [ProductInfo200Response]
    def product_variant_info(id, opts = {})
      data, _status_code, _headers = product_variant_info_with_http_info(id, opts)
      data
    end

    # product.variant.info
    # Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
    # @param id [String] Retrieves variant&#39;s info specified by variant id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :store_id Retrieves variant info specified by store id
    # @return [Array<(ProductInfo200Response, Integer, Hash)>] ProductInfo200Response data, response status code and response headers
    def product_variant_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_info"
      end
      # resource path
      local_var_path = '/product.variant.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.list
    # Get a list of variants. This method is deprecated, and its development is stopped. Please use \"product.child_item.list\" instead.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Retrieves products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [ProductVariantList200Response]
    def product_variant_list(opts = {})
      data, _status_code, _headers = product_variant_list_with_http_info(opts)
      data
    end

    # product.variant.list
    # Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,name,description,price')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :category_id Retrieves products’ variants specified by category id
    # @option opts [String] :product_id Retrieves products&#39; variants specified by product id
    # @option opts [String] :store_id Retrieves variants specified by store id
    # @return [Array<(ProductVariantList200Response, Integer, Hash)>] ProductVariantList200Response data, response status code and response headers
    def product_variant_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_list ...'
      end
      # resource path
      local_var_path = '/product.variant.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'category_id'] = opts[:'category_id'] if !opts[:'category_id'].nil?
      query_params[:'product_id'] = opts[:'product_id'] if !opts[:'product_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductVariantList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.price.add
    # Add some prices to the product variant.
    # @param product_variant_price_add [ProductVariantPriceAdd] 
    # @param [Hash] opts the optional parameters
    # @return [CartValidate200Response]
    def product_variant_price_add(product_variant_price_add, opts = {})
      data, _status_code, _headers = product_variant_price_add_with_http_info(product_variant_price_add, opts)
      data
    end

    # product.variant.price.add
    # Add some prices to the product variant.
    # @param product_variant_price_add [ProductVariantPriceAdd] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CartValidate200Response, Integer, Hash)>] CartValidate200Response data, response status code and response headers
    def product_variant_price_add_with_http_info(product_variant_price_add, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_price_add ...'
      end
      # verify the required parameter 'product_variant_price_add' is set
      if @api_client.config.client_side_validation && product_variant_price_add.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_price_add' when calling ProductApi.product_variant_price_add"
      end
      # resource path
      local_var_path = '/product.variant.price.add.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_price_add)

      # return_type
      return_type = opts[:debug_return_type] || 'CartValidate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_price_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.price.delete
    # Delete some prices of the product variant.
    # @param id [String] Defines the variant where the price has to be deleted
    # @param product_id [String] Product id
    # @param group_prices [String] Defines variants&#39;s group prices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def product_variant_price_delete(id, product_id, group_prices, opts = {})
      data, _status_code, _headers = product_variant_price_delete_with_http_info(id, product_id, group_prices, opts)
      data
    end

    # product.variant.price.delete
    # Delete some prices of the product variant.
    # @param id [String] Defines the variant where the price has to be deleted
    # @param product_id [String] Product id
    # @param group_prices [String] Defines variants&#39;s group prices
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def product_variant_price_delete_with_http_info(id, product_id, group_prices, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_price_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ProductApi.product_variant_price_delete"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductApi.product_variant_price_delete"
      end
      # verify the required parameter 'group_prices' is set
      if @api_client.config.client_side_validation && group_prices.nil?
        fail ArgumentError, "Missing the required parameter 'group_prices' when calling ProductApi.product_variant_price_delete"
      end
      # resource path
      local_var_path = '/product.variant.price.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'product_id'] = product_id
      query_params[:'group_prices'] = group_prices
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_price_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.price.update
    # Update some prices of the product variant.
    # @param product_variant_price_update [ProductVariantPriceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def product_variant_price_update(product_variant_price_update, opts = {})
      data, _status_code, _headers = product_variant_price_update_with_http_info(product_variant_price_update, opts)
      data
    end

    # product.variant.price.update
    # Update some prices of the product variant.
    # @param product_variant_price_update [ProductVariantPriceUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_variant_price_update_with_http_info(product_variant_price_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_price_update ...'
      end
      # verify the required parameter 'product_variant_price_update' is set
      if @api_client.config.client_side_validation && product_variant_price_update.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_price_update' when calling ProductApi.product_variant_price_update"
      end
      # resource path
      local_var_path = '/product.variant.price.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_price_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_price_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_price_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.update
    # Update variant.
    # @param product_variant_update [ProductVariantUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [AccountConfigUpdate200Response]
    def product_variant_update(product_variant_update, opts = {})
      data, _status_code, _headers = product_variant_update_with_http_info(product_variant_update, opts)
      data
    end

    # product.variant.update
    # Update variant.
    # @param product_variant_update [ProductVariantUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def product_variant_update_with_http_info(product_variant_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_update ...'
      end
      # verify the required parameter 'product_variant_update' is set
      if @api_client.config.client_side_validation && product_variant_update.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_update' when calling ProductApi.product_variant_update"
      end
      # resource path
      local_var_path = '/product.variant.update.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_update)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # product.variant.update.batch
    # Update products variants on the store.
    # @param product_variant_update_batch [ProductVariantUpdateBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def product_variant_update_batch(product_variant_update_batch, opts = {})
      data, _status_code, _headers = product_variant_update_batch_with_http_info(product_variant_update_batch, opts)
      data
    end

    # product.variant.update.batch
    # Update products variants on the store.
    # @param product_variant_update_batch [ProductVariantUpdateBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def product_variant_update_batch_with_http_info(product_variant_update_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProductApi.product_variant_update_batch ...'
      end
      # verify the required parameter 'product_variant_update_batch' is set
      if @api_client.config.client_side_validation && product_variant_update_batch.nil?
        fail ArgumentError, "Missing the required parameter 'product_variant_update_batch' when calling ProductApi.product_variant_update_batch"
      end
      # resource path
      local_var_path = '/product.variant.update.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(product_variant_update_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"ProductApi.product_variant_update_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductApi#product_variant_update_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
