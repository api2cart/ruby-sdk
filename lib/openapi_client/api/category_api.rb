=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module OpenapiClient
  class CategoryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # category.add
    # Add new category in store
    # @param name [String] Defines category&#39;s name that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Defines category&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :parent_id Adds categories specified by parent id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :created_time Entity&#39;s date creation
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Create category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [String] :lang_id Language id
    # @return [CategoryAdd200Response]
    def category_add(name, opts = {})
      data, _status_code, _headers = category_add_with_http_info(name, opts)
      data
    end

    # category.add
    # Add new category in store
    # @param name [String] Defines category&#39;s name that has to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Defines category&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :parent_id Adds categories specified by parent id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :created_time Entity&#39;s date creation
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [Integer] :sort_order Sort number in the list (default to 0)
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Create category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [String] :lang_id Language id
    # @return [Array<(CategoryAdd200Response, Integer, Hash)>] CategoryAdd200Response data, response status code and response headers
    def category_add_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_add ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling CategoryApi.category_add"
      end
      # resource path
      local_var_path = '/category.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'short_description'] = opts[:'short_description'] if !opts[:'short_description'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'created_time'] = opts[:'created_time'] if !opts[:'created_time'].nil?
      query_params[:'modified_time'] = opts[:'modified_time'] if !opts[:'modified_time'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'seo_url'] = opts[:'seo_url'] if !opts[:'seo_url'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'stores_ids'] = opts[:'stores_ids'] if !opts[:'stores_ids'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.add.batch
    # Add new categories to the store.
    # @param category_add_batch [CategoryAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [CategoryAddBatch200Response]
    def category_add_batch(category_add_batch, opts = {})
      data, _status_code, _headers = category_add_batch_with_http_info(category_add_batch, opts)
      data
    end

    # category.add.batch
    # Add new categories to the store.
    # @param category_add_batch [CategoryAddBatch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CategoryAddBatch200Response, Integer, Hash)>] CategoryAddBatch200Response data, response status code and response headers
    def category_add_batch_with_http_info(category_add_batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_add_batch ...'
      end
      # verify the required parameter 'category_add_batch' is set
      if @api_client.config.client_side_validation && category_add_batch.nil?
        fail ArgumentError, "Missing the required parameter 'category_add_batch' when calling CategoryApi.category_add_batch"
      end
      # resource path
      local_var_path = '/category.add.batch.json'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(category_add_batch)

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryAddBatch200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_add_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_add_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.assign
    # Assign category to product
    # @param category_id [String] Defines category assign, specified by category id
    # @param product_id [String] Defines category assign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [CartConfigUpdate200Response]
    def category_assign(category_id, product_id, opts = {})
      data, _status_code, _headers = category_assign_with_http_info(category_id, product_id, opts)
      data
    end

    # category.assign
    # Assign category to product
    # @param category_id [String] Defines category assign, specified by category id
    # @param product_id [String] Defines category assign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(CartConfigUpdate200Response, Integer, Hash)>] CartConfigUpdate200Response data, response status code and response headers
    def category_assign_with_http_info(category_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_assign ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_assign"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling CategoryApi.category_assign"
      end
      # resource path
      local_var_path = '/category.assign.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category_id'] = category_id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.count
    # Count categories in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Counts categories specified by parent id
    # @option opts [String] :store_id Counts category specified by store id
    # @option opts [String] :lang_id Counts category specified by language id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_type A categorization for the product
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts categories that are searched specified by field
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [CategoryCount200Response]
    def category_count(opts = {})
      data, _status_code, _headers = category_count_with_http_info(opts)
      data
    end

    # category.count
    # Count categories in store.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :parent_id Counts categories specified by parent id
    # @option opts [String] :store_id Counts category specified by store id
    # @option opts [String] :lang_id Counts category specified by language id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :product_type A categorization for the product
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Counts categories that are searched specified by field
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [Array<(CategoryCount200Response, Integer, Hash)>] CategoryCount200Response data, response status code and response headers
    def category_count_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_count ...'
      end
      # resource path
      local_var_path = '/category.count.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'product_type'] = opts[:'product_type'] if !opts[:'product_type'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryCount200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_count",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.delete
    # Delete category in store
    # @param id [String] Defines category removal, specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [CategoryDelete200Response]
    def category_delete(id, opts = {})
      data, _status_code, _headers = category_delete_with_http_info(id, opts)
      data
    end

    # category.delete
    # Delete category in store
    # @param id [String] Defines category removal, specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(CategoryDelete200Response, Integer, Hash)>] CategoryDelete200Response data, response status code and response headers
    def category_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_delete"
      end
      # resource path
      local_var_path = '/category.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.find
    # Search category in store. \"Laptop\" is specified here by default.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'name')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [CategoryFind200Response]
    def category_find(find_value, opts = {})
      data, _status_code, _headers = category_find_with_http_info(find_value, opts)
      data
    end

    # category.find
    # Search category in store. \&quot;Laptop\&quot; is specified here by default.
    # @param find_value [String] Entity search that is specified by some value
    # @param [Hash] opts the optional parameters
    # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields (default to 'name')
    # @option opts [String] :find_params Entity search that is specified by comma-separated parameters (default to 'whole_words')
    # @option opts [String] :store_id Store Id
    # @option opts [String] :lang_id Language id
    # @return [Array<(CategoryFind200Response, Integer, Hash)>] CategoryFind200Response data, response status code and response headers
    def category_find_with_http_info(find_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_find ...'
      end
      # verify the required parameter 'find_value' is set
      if @api_client.config.client_side_validation && find_value.nil?
        fail ArgumentError, "Missing the required parameter 'find_value' when calling CategoryApi.category_find"
      end
      # resource path
      local_var_path = '/category.find.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'find_value'] = find_value
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'find_params'] = opts[:'find_params'] if !opts[:'find_params'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryFind200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_find",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_find\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.image.add
    # Add image to category
    # @param category_id [String] Defines category id where the image should be added
    # @param image_name [String] Defines image&#39;s name
    # @param url [String] Defines URL of the image that has to be added
    # @param type [String] Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list (default to 0)
    # @return [CategoryImageAdd200Response]
    def category_image_add(category_id, image_name, url, type, opts = {})
      data, _status_code, _headers = category_image_add_with_http_info(category_id, image_name, url, type, opts)
      data
    end

    # category.image.add
    # Add image to category
    # @param category_id [String] Defines category id where the image should be added
    # @param image_name [String] Defines image&#39;s name
    # @param url [String] Defines URL of the image that has to be added
    # @param type [String] Defines image&#39;s types that are specified by comma-separated list
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @option opts [String] :label Defines alternative text that has to be attached to the picture
    # @option opts [String] :mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
    # @option opts [Integer] :position Defines image’s position in the list (default to 0)
    # @return [Array<(CategoryImageAdd200Response, Integer, Hash)>] CategoryImageAdd200Response data, response status code and response headers
    def category_image_add_with_http_info(category_id, image_name, url, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_image_add ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'image_name' is set
      if @api_client.config.client_side_validation && image_name.nil?
        fail ArgumentError, "Missing the required parameter 'image_name' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling CategoryApi.category_image_add"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling CategoryApi.category_image_add"
      end
      # verify enum value
      allowable_values = ["base", "thumbnail"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/category.image.add.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category_id'] = category_id
      query_params[:'image_name'] = image_name
      query_params[:'url'] = url
      query_params[:'type'] = type
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'mime'] = opts[:'mime'] if !opts[:'mime'].nil?
      query_params[:'position'] = opts[:'position'] if !opts[:'position'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryImageAdd200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_image_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_image_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.image.delete
    # Delete image
    # @param category_id [String] Defines category id where the image should be deleted
    # @param image_id [String] Define image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [AttributeDelete200Response]
    def category_image_delete(category_id, image_id, opts = {})
      data, _status_code, _headers = category_image_delete_with_http_info(category_id, image_id, opts)
      data
    end

    # category.image.delete
    # Delete image
    # @param category_id [String] Defines category id where the image should be deleted
    # @param image_id [String] Define image id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(AttributeDelete200Response, Integer, Hash)>] AttributeDelete200Response data, response status code and response headers
    def category_image_delete_with_http_info(category_id, image_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_image_delete ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_image_delete"
      end
      # verify the required parameter 'image_id' is set
      if @api_client.config.client_side_validation && image_id.nil?
        fail ArgumentError, "Missing the required parameter 'image_id' when calling CategoryApi.category_image_delete"
      end
      # resource path
      local_var_path = '/category.image.delete.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category_id'] = category_id
      query_params[:'image_id'] = image_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_image_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_image_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.info
    # Get category info about category ID*** or specify other category ID.
    # @param id [String] Retrieves category&#39;s info specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Retrieves category info  specified by store id
    # @option opts [String] :lang_id Retrieves category info  specified by language id
    # @option opts [String] :schema_type The name of the requirements set for the provided schema.
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,parent_id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [CategoryInfo200Response]
    def category_info(id, opts = {})
      data, _status_code, _headers = category_info_with_http_info(id, opts)
      data
    end

    # category.info
    # Get category info about category ID*** or specify other category ID.
    # @param id [String] Retrieves category&#39;s info specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Retrieves category info  specified by store id
    # @option opts [String] :lang_id Retrieves category info  specified by language id
    # @option opts [String] :schema_type The name of the requirements set for the provided schema.
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,parent_id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @return [Array<(CategoryInfo200Response, Integer, Hash)>] CategoryInfo200Response data, response status code and response headers
    def category_info_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_info ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_info"
      end
      # resource path
      local_var_path = '/category.info.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'schema_type'] = opts[:'schema_type'] if !opts[:'schema_type'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CategoryInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.list
    # Get list of categories from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Retrieves categories specified by store id
    # @option opts [String] :lang_id Retrieves categorys specified by language id
    # @option opts [String] :parent_id Retrieves categories specified by parent id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :product_type A categorization for the product
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Category search that is specified by field
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,parent_id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @return [ModelResponseCategoryList]
    def category_list(opts = {})
      data, _status_code, _headers = category_list_with_http_info(opts)
      data
    end

    # category.list
    # Get list of categories from store.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :start This parameter sets the number from which you want to get entities (default to 0)
    # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (default to 10)
    # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
    # @option opts [String] :store_id Retrieves categories specified by store id
    # @option opts [String] :lang_id Retrieves categorys specified by language id
    # @option opts [String] :parent_id Retrieves categories specified by parent id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status (default to true)
    # @option opts [String] :product_type A categorization for the product
    # @option opts [String] :created_from Retrieve entities from their creation date
    # @option opts [String] :created_to Retrieve entities to their creation date
    # @option opts [String] :modified_from Retrieve entities from their modification date
    # @option opts [String] :modified_to Retrieve entities to their modification date
    # @option opts [String] :find_value Entity search that is specified by some value
    # @option opts [String] :find_where Category search that is specified by field
    # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
    # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve (default to 'id,parent_id,name,description')
    # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
    # @option opts [String] :report_request_id Report request id
    # @option opts [Boolean] :disable_report_cache Disable report cache for current request (default to false)
    # @option opts [Boolean] :disable_cache Disable cache for current request (default to false)
    # @return [Array<(ModelResponseCategoryList, Integer, Hash)>] ModelResponseCategoryList data, response status code and response headers
    def category_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_list ...'
      end
      # resource path
      local_var_path = '/category.list.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page_cursor'] = opts[:'page_cursor'] if !opts[:'page_cursor'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'product_type'] = opts[:'product_type'] if !opts[:'product_type'].nil?
      query_params[:'created_from'] = opts[:'created_from'] if !opts[:'created_from'].nil?
      query_params[:'created_to'] = opts[:'created_to'] if !opts[:'created_to'].nil?
      query_params[:'modified_from'] = opts[:'modified_from'] if !opts[:'modified_from'].nil?
      query_params[:'modified_to'] = opts[:'modified_to'] if !opts[:'modified_to'].nil?
      query_params[:'find_value'] = opts[:'find_value'] if !opts[:'find_value'].nil?
      query_params[:'find_where'] = opts[:'find_where'] if !opts[:'find_where'].nil?
      query_params[:'response_fields'] = opts[:'response_fields'] if !opts[:'response_fields'].nil?
      query_params[:'params'] = opts[:'params'] if !opts[:'params'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?
      query_params[:'report_request_id'] = opts[:'report_request_id'] if !opts[:'report_request_id'].nil?
      query_params[:'disable_report_cache'] = opts[:'disable_report_cache'] if !opts[:'disable_report_cache'].nil?
      query_params[:'disable_cache'] = opts[:'disable_cache'] if !opts[:'disable_cache'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ModelResponseCategoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.unassign
    # Unassign category to product
    # @param category_id [String] Defines category unassign, specified by category id
    # @param product_id [String] Defines category unassign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [CartConfigUpdate200Response]
    def category_unassign(category_id, product_id, opts = {})
      data, _status_code, _headers = category_unassign_with_http_info(category_id, product_id, opts)
      data
    end

    # category.unassign
    # Unassign category to product
    # @param category_id [String] Defines category unassign, specified by category id
    # @param product_id [String] Defines category unassign to the product, specified by product id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id Store Id
    # @return [Array<(CartConfigUpdate200Response, Integer, Hash)>] CartConfigUpdate200Response data, response status code and response headers
    def category_unassign_with_http_info(category_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_unassign ...'
      end
      # verify the required parameter 'category_id' is set
      if @api_client.config.client_side_validation && category_id.nil?
        fail ArgumentError, "Missing the required parameter 'category_id' when calling CategoryApi.category_unassign"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling CategoryApi.category_unassign"
      end
      # resource path
      local_var_path = '/category.unassign.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'category_id'] = category_id
      query_params[:'product_id'] = product_id
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CartConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_unassign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_unassign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # category.update
    # Update category in store
    # @param id [String] Defines category update specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines new category’s name
    # @option opts [String] :description Defines new category&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :parent_id Defines new parent category id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Update category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [String] :lang_id Language id
    # @return [AccountConfigUpdate200Response]
    def category_update(id, opts = {})
      data, _status_code, _headers = category_update_with_http_info(id, opts)
      data
    end

    # category.update
    # Update category in store
    # @param id [String] Defines category update specified by category id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Defines new category’s name
    # @option opts [String] :description Defines new category&#39;s description
    # @option opts [String] :short_description Defines short description
    # @option opts [String] :parent_id Defines new parent category id
    # @option opts [Boolean] :avail Defines category&#39;s visibility status
    # @option opts [Integer] :sort_order Sort number in the list
    # @option opts [String] :modified_time Entity&#39;s date modification
    # @option opts [String] :meta_title Defines unique meta title for each entity
    # @option opts [String] :meta_description Defines unique meta description of a entity
    # @option opts [String] :meta_keywords Defines unique meta keywords for each entity
    # @option opts [String] :seo_url Defines unique category&#39;s URL for SEO
    # @option opts [String] :store_id Store Id
    # @option opts [String] :stores_ids Update category in the stores that is specified by comma-separated stores&#39; id
    # @option opts [String] :lang_id Language id
    # @return [Array<(AccountConfigUpdate200Response, Integer, Hash)>] AccountConfigUpdate200Response data, response status code and response headers
    def category_update_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CategoryApi.category_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CategoryApi.category_update"
      end
      # resource path
      local_var_path = '/category.update.json'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'short_description'] = opts[:'short_description'] if !opts[:'short_description'].nil?
      query_params[:'parent_id'] = opts[:'parent_id'] if !opts[:'parent_id'].nil?
      query_params[:'avail'] = opts[:'avail'] if !opts[:'avail'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'modified_time'] = opts[:'modified_time'] if !opts[:'modified_time'].nil?
      query_params[:'meta_title'] = opts[:'meta_title'] if !opts[:'meta_title'].nil?
      query_params[:'meta_description'] = opts[:'meta_description'] if !opts[:'meta_description'].nil?
      query_params[:'meta_keywords'] = opts[:'meta_keywords'] if !opts[:'meta_keywords'].nil?
      query_params[:'seo_url'] = opts[:'seo_url'] if !opts[:'seo_url'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'stores_ids'] = opts[:'stores_ids'] if !opts[:'stores_ids'].nil?
      query_params[:'lang_id'] = opts[:'lang_id'] if !opts[:'lang_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountConfigUpdate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['StoreKeyAuth', 'ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"CategoryApi.category_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CategoryApi#category_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
