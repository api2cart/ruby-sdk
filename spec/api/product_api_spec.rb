=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ProductApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ProductApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ProductApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ProductApi' do
    it 'should create an instance of ProductApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ProductApi)
    end
  end

  # unit tests for product_add
  # product.add
  # Add new product to store.
  # @param product_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductAdd200Response]
  describe 'product_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_add_batch
  # product.add.batch
  # Add new products to the store.
  # @param product_add_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_add_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_attribute_list
  # product.attribute.list
  # Get list of attributes and values.
  # @param product_id Retrieves attributes specified by product id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :attribute_id Retrieves info for specified attribute_id
  # @option opts [String] :variant_id Defines product&#39;s variants specified by variant id
  # @option opts [String] :attribute_group_id Filter by attribute_group_id
  # @option opts [String] :lang_id Retrieves attributes specified by language id
  # @option opts [String] :store_id Retrieves attributes specified by store id
  # @option opts [String] :set_name Retrieves attributes specified by set_name in Magento
  # @option opts [String] :sort_by Set field to sort by
  # @option opts [String] :sort_direction Set sorting direction
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductAttributeList]
  describe 'product_attribute_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_attribute_value_set
  # product.attribute.value.set
  # Set attribute value to product.
  # @param product_id Defines product id where the attribute should be added
  # @param [Hash] opts the optional parameters
  # @option opts [String] :attribute_id Filter by attribute_id
  # @option opts [String] :attribute_group_id Filter by attribute_group_id
  # @option opts [String] :attribute_name Define attribute name
  # @option opts [String] :value Define attribute value
  # @option opts [Integer] :value_id Define attribute value id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :store_id Store Id
  # @return [ProductAttributeValueSet200Response]
  describe 'product_attribute_value_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_attribute_value_unset
  # product.attribute.value.unset
  # Removes attribute value for a product.
  # @param product_id Product id
  # @param attribute_id Attribute Id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @option opts [Boolean] :include_default Boolean, whether or not to unset default value of the attribute, if applicable
  # @option opts [Boolean] :reindex Is reindex required
  # @option opts [Boolean] :clear_cache Is cache clear required
  # @return [ProductAttributeValueUnset200Response]
  describe 'product_attribute_value_unset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_brand_list
  # product.brand.list
  # Get list of brands from your store.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :brand_ids Retrieves brands specified by brand ids
  # @option opts [String] :category_id Retrieves product brands specified by category id
  # @option opts [String] :parent_id Retrieves brands specified by parent id
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
  # @option opts [String] :find_value Entity search that is specified by some value
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductBrandList]
  describe 'product_brand_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_child_item_find
  # product.child_item.find
  # Search product child item (bundled item or configurable product variant) in store catalog.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :find_value Entity search that is specified by some value
  # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
  # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
  # @option opts [String] :store_id Store Id
  # @return [ProductChildItemFind200Response]
  describe 'product_child_item_find test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_child_item_info
  # product.child_item.info
  # Get child for specific product.
  # @param product_id Filter by parent product id
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [Boolean] :use_latest_api_version Use the latest platform API version
  # @return [ProductChildItemInfo200Response]
  describe 'product_child_item_info test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_child_item_list
  # product.child_item.list
  # Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :product_id Filter by parent product id
  # @option opts [String] :product_ids Filter by parent product ids
  # @option opts [String] :sku Filter by products variant&#39;s sku
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :find_value Entity search that is specified by some value
  # @option opts [String] :find_where Child products search that is specified by field
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :report_request_id Report request id
  # @option opts [Boolean] :disable_report_cache Disable report cache for current request
  # @option opts [Boolean] :use_latest_api_version Use the latest platform API version
  # @return [ModelResponseProductChildItemList]
  describe 'product_child_item_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_count
  # product.count
  # Count products in store.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :product_ids Counts products specified by product ids
  # @option opts [String] :since_id Retrieve entities starting from the specified id.
  # @option opts [String] :categories_ids Defines product add that is specified by comma-separated categories id
  # @option opts [String] :category_id Counts products specified by category id
  # @option opts [String] :store_id Counts products specified by store id
  # @option opts [String] :lang_id Counts products specified by language id
  # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
  # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :brand_name Retrieves brands specified by brand name
  # @option opts [Array<String>] :product_attributes Defines product attributes
  # @option opts [String] :status Defines product&#39;s status
  # @option opts [String] :type Defines products&#39;s type
  # @option opts [String] :visible Filter items by visibility status
  # @option opts [String] :find_value Entity search that is specified by some value
  # @option opts [String] :find_where Counts products that are searched specified by field
  # @option opts [String] :report_request_id Report request id
  # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
  # @option opts [Boolean] :disable_report_cache Disable report cache for current request
  # @option opts [Boolean] :use_latest_api_version Use the latest platform API version
  # @return [ProductCount200Response]
  describe 'product_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_currency_add
  # product.currency.add
  # Add currency and/or set default in store
  # @param iso3 Specifies standardized currency code
  # @param rate Defines the numerical identifier against to the major currency
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Defines currency&#39;s name
  # @option opts [Boolean] :avail Specifies whether the currency is available
  # @option opts [String] :symbol_left Defines the symbol that is located before the currency
  # @option opts [String] :symbol_right Defines the symbol that is located after the currency
  # @option opts [Boolean] :default Specifies currency&#39;s default meaning
  # @return [ProductCurrencyAdd200Response]
  describe 'product_currency_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_currency_list
  # product.currency.list
  # Get list of currencies
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [Boolean] :default Specifies the set of default/not default currencies
  # @option opts [Boolean] :avail Specifies the set of available/not available currencies
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductCurrencyList]
  describe 'product_currency_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_delete
  # product.delete
  # Product delete
  # @param id Product id that will be removed
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [CustomerDelete200Response]
  describe 'product_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_delete_batch
  # product.delete.batch
  # Remove product from the store.
  # @param product_delete_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_delete_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_find
  # product.find
  # Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
  # @param find_value Entity search that is specified by some value
  # @param [Hash] opts the optional parameters
  # @option opts [String] :find_where Entity search that is specified by the comma-separated unique fields
  # @option opts [String] :find_params Entity search that is specified by comma-separated parameters
  # @option opts [String] :find_what Parameter&#39;s value specifies the entity that has to be found
  # @option opts [String] :lang_id Search products specified by language id
  # @option opts [String] :store_id Store Id
  # @return [ProductFind200Response]
  describe 'product_find test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_image_add
  # product.image.add
  # Add image to product
  # @param product_image_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductImageAdd200Response]
  describe 'product_image_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_image_delete
  # product.image.delete
  # Delete image
  # @param product_id Defines product id where the image should be deleted
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_image_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_image_update
  # product.image.update
  # Update details of image
  # @param product_id Defines product id where the image should be updated
  # @param id Defines image update specified by image id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :variant_ids Defines product&#39;s variants ids
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :image_name Defines image&#39;s name
  # @option opts [String] :type Defines image&#39;s types that are specified by comma-separated list
  # @option opts [String] :label Defines alternative text that has to be attached to the picture
  # @option opts [Integer] :position Defines image’s position in the list
  # @option opts [Boolean] :hidden Define is hide image
  # @return [ProductImageUpdate200Response]
  describe 'product_image_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_info
  # product.info
  # Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
  # @param id Retrieves product&#39;s info specified by product id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Retrieves product info specified by store id
  # @option opts [String] :lang_id Retrieves product info specified by language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :report_request_id Report request id
  # @option opts [Boolean] :disable_report_cache Disable report cache for current request
  # @option opts [Boolean] :use_latest_api_version Use the latest platform API version
  # @return [ProductInfo200Response]
  describe 'product_info test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_list
  # product.list
  # Get list of products from your store. Returns 10 products by default.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :product_ids Retrieves products specified by product ids
  # @option opts [String] :since_id Retrieve entities starting from the specified id.
  # @option opts [String] :categories_ids Retrieves products specified by categories ids
  # @option opts [String] :category_id Retrieves products specified by category id
  # @option opts [String] :store_id Retrieves products specified by store id
  # @option opts [String] :lang_id Retrieves products specified by language id
  # @option opts [String] :currency_id Currency Id
  # @option opts [Boolean] :avail_view Specifies the set of visible/invisible products
  # @option opts [Boolean] :avail_sale Specifies the set of available/not available products for sale
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :sku Filter by product&#39;s sku
  # @option opts [String] :brand_name Retrieves brands specified by brand name
  # @option opts [Array<String>] :product_attributes Defines product attributes
  # @option opts [String] :status Defines product&#39;s status
  # @option opts [String] :type Defines products&#39;s type
  # @option opts [String] :visible Filter items by visibility status
  # @option opts [String] :find_value Entity search that is specified by some value
  # @option opts [String] :find_where Product search that is specified by field
  # @option opts [Boolean] :return_global Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @option opts [String] :sort_by Set field to sort by
  # @option opts [String] :sort_direction Set sorting direction
  # @option opts [String] :report_request_id Report request id
  # @option opts [Boolean] :disable_cache Disable cache for current request
  # @option opts [Boolean] :disable_report_cache Disable report cache for current request
  # @option opts [Boolean] :use_latest_api_version Use the latest platform API version
  # @option opts [String] :product_type A categorization for the product
  # @return [ModelResponseProductList]
  describe 'product_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_manufacturer_add
  # product.manufacturer.add
  # Add manufacturer to store and assign to product
  # @param product_id Defines products specified by product id
  # @param manufacturer Defines product’s manufacturer&#39;s name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [ProductManufacturerAdd200Response]
  describe 'product_manufacturer_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_add
  # product.option.add
  # Add product option from store.
  # @param product_option_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductOptionAdd200Response]
  describe 'product_option_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_assign
  # product.option.assign
  # Assign option from product.
  # @param product_id Defines product id where the option should be assigned
  # @param option_id Defines option id which has to be assigned
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :required Defines if the option is required
  # @option opts [Integer] :sort_order Sort number in the list
  # @option opts [String] :option_values Defines option values that has to be assigned
  # @option opts [Boolean] :clear_cache Is cache clear required
  # @return [ProductOptionAssign200Response]
  describe 'product_option_assign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_delete
  # product.option.delete
  # Product option delete.
  # @param option_id Defines option id that should be deleted
  # @param product_id Defines product id where the option should be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_option_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_list
  # product.option.list
  # Get list of options.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :product_id Retrieves products&#39; options specified by product id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :store_id Store Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductOptionList]
  describe 'product_option_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_value_add
  # product.option.value.add
  # Add product option item from option.
  # @param product_id Defines product id where the option value should be added
  # @param option_id Defines option id where the value has to be added
  # @param [Hash] opts the optional parameters
  # @option opts [String] :option_value Defines option value that has to be added
  # @option opts [Integer] :sort_order Sort number in the list
  # @option opts [String] :display_value Defines the value that will be displayed for the option value
  # @option opts [Boolean] :is_default Defines as a default
  # @option opts [Boolean] :clear_cache Is cache clear required
  # @return [ProductOptionValueAdd200Response]
  describe 'product_option_value_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_value_assign
  # product.option.value.assign
  # Assign product option item from product.
  # @param product_option_id Defines product&#39;s option id where the value has to be assigned
  # @param option_value_id Defines value id that has to be assigned
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :clear_cache Is cache clear required
  # @return [ProductOptionValueAssign200Response]
  describe 'product_option_value_assign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_value_delete
  # product.option.value.delete
  # Product option value delete.
  # @param option_id Defines option id where the value should be deleted
  # @param option_value_id Defines option value id that should be deleted
  # @param product_id Defines product id where the option value should be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_option_value_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_option_value_update
  # product.option.value.update
  # Update product option item from option.
  # @param product_id Defines product id where the option value should be updated
  # @param option_id Defines option id where the value has to be updated
  # @param option_value_id Defines value id that has to be assigned
  # @param [Hash] opts the optional parameters
  # @option opts [String] :option_value Defines option value that has to be added
  # @option opts [Float] :price Defines new product option price
  # @option opts [Float] :quantity Defines new products&#39; options quantity
  # @option opts [String] :display_value Defines the value that will be displayed for the option value
  # @option opts [Boolean] :clear_cache Is cache clear required
  # @return [AccountConfigUpdate200Response]
  describe 'product_option_value_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_price_add
  # product.price.add
  # Add some prices to the product.
  # @param product_price_add 
  # @param [Hash] opts the optional parameters
  # @return [CartValidate200Response]
  describe 'product_price_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_price_delete
  # product.price.delete
  # Delete some prices of the product
  # @param product_id Defines the product where the price has to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :group_prices Defines product&#39;s group prices
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_price_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_price_update
  # product.price.update
  # Update some prices of the product.
  # @param product_price_update 
  # @param [Hash] opts the optional parameters
  # @return [AccountConfigUpdate200Response]
  describe 'product_price_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_review_list
  # product.review.list
  # Get reviews of a specific product.
  # @param product_id Product id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :ids Retrieves reviews specified by ids
  # @option opts [String] :store_id Store Id
  # @option opts [String] :status Defines status
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseProductReviewList]
  describe 'product_review_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_store_assign
  # product.store.assign
  # Assign product to store
  # @param product_id Defines id of the product which should be assigned to a store
  # @param store_id Defines id of the store product should be assigned to
  # @param [Hash] opts the optional parameters
  # @return [AccountConfigUpdate200Response]
  describe 'product_store_assign test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_tax_add
  # product.tax.add
  # Add tax class and tax rate to store and assign to product.
  # @param product_tax_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductTaxAdd200Response]
  describe 'product_tax_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_update
  # product.update
  # This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
  # @param product_update 
  # @param [Hash] opts the optional parameters
  # @return [AccountConfigUpdate200Response]
  describe 'product_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_update_batch
  # product.update.batch
  # Update products on the store.
  # @param product_update_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_update_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_add
  # product.variant.add
  # Add variant to product.
  # @param product_variant_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductVariantAdd200Response]
  describe 'product_variant_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_add_batch
  # product.variant.add.batch
  # Add new product variants to the store.
  # @param product_variant_add_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_variant_add_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_delete
  # product.variant.delete
  # Delete variant.
  # @param id Defines variant removal, specified by variant id
  # @param product_id Defines product&#39;s id where the variant has to be deleted
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeValueDelete200Response]
  describe 'product_variant_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_delete_batch
  # product.variant.delete.batch
  # Remove product variants from the store.
  # @param product_variant_delete_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_variant_delete_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_image_add
  # product.variant.image.add
  # Add image to product
  # @param product_variant_image_add 
  # @param [Hash] opts the optional parameters
  # @return [ProductVariantImageAdd200Response]
  describe 'product_variant_image_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_image_delete
  # product.variant.image.delete
  # Delete  image to product
  # @param product_id Defines product id where the variant image should be deleted
  # @param product_variant_id Defines product&#39;s variants specified by variant id
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_variant_image_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_price_add
  # product.variant.price.add
  # Add some prices to the product variant.
  # @param product_variant_price_add 
  # @param [Hash] opts the optional parameters
  # @return [CartValidate200Response]
  describe 'product_variant_price_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_price_delete
  # product.variant.price.delete
  # Delete some prices of the product variant.
  # @param id Defines the variant where the price has to be deleted
  # @param product_id Product id
  # @param group_prices Defines variants&#39;s group prices
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'product_variant_price_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_price_update
  # product.variant.price.update
  # Update some prices of the product variant.
  # @param product_variant_price_update 
  # @param [Hash] opts the optional parameters
  # @return [AccountConfigUpdate200Response]
  describe 'product_variant_price_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_update
  # product.variant.update
  # Update variant.
  # @param product_variant_update 
  # @param [Hash] opts the optional parameters
  # @return [AccountConfigUpdate200Response]
  describe 'product_variant_update test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for product_variant_update_batch
  # product.variant.update.batch
  # Update products variants on the store.
  # @param product_variant_update_batch 
  # @param [Hash] opts the optional parameters
  # @return [CategoryAddBatch200Response]
  describe 'product_variant_update_batch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
