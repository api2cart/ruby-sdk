=begin
#API2Cart OpenAPI

#API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::CartApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CartApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::CartApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CartApi' do
    it 'should create an instance of CartApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::CartApi)
    end
  end

  # unit tests for cart_catalog_price_rules_count
  # cart.catalog_price_rules.count
  # Get count of cart catalog price rules discounts.
  # @param [Hash] opts the optional parameters
  # @return [CartCatalogPriceRulesCount200Response]
  describe 'cart_catalog_price_rules_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_catalog_price_rules_list
  # cart.catalog_price_rules.list
  # Get cart catalog price rules discounts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :ids Retrieves  catalog_price_rules by ids
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartCatalogPriceRulesList]
  describe 'cart_catalog_price_rules_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_coupon_add
  # cart.coupon.add
  # Use this method to create a coupon with specified conditions.
  # @param cart_coupon_add 
  # @param [Hash] opts the optional parameters
  # @return [CartCouponAdd200Response]
  describe 'cart_coupon_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_coupon_condition_add
  # cart.coupon.condition.add
  # Use this method to add additional conditions for coupon application.
  # @param coupon_id Coupon Id
  # @param entity Defines condition entity type
  # @param key Defines condition entity attribute key
  # @param operator Defines condition operator
  # @param value Defines condition value, can be comma separated according to the operator.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :target Defines condition operator
  # @option opts [Boolean] :include_tax Indicates whether to apply a discount for taxes.
  # @option opts [Boolean] :include_shipping Indicates whether to apply a discount for shipping.
  # @option opts [String] :store_id Store Id
  # @return [BasketLiveShippingServiceDelete200Response]
  describe 'cart_coupon_condition_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_coupon_count
  # cart.coupon.count
  # This method allows you to get the number of coupons. On some platforms, you can filter the coupons by the date they were active.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @option opts [Boolean] :avail Defines category&#39;s visibility status
  # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
  # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
  # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
  # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
  # @return [CartCouponCount200Response]
  describe 'cart_coupon_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_coupon_delete
  # cart.coupon.delete
  # Delete coupon
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'cart_coupon_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_coupon_list
  # cart.coupon.list
  # Get cart coupon discounts.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :coupons_ids Filter coupons by ids
  # @option opts [String] :store_id Filter coupons by store id
  # @option opts [String] :lang_id Language id
  # @option opts [Boolean] :avail Filter coupons by avail status
  # @option opts [String] :status Defines coupon&#39;s status
  # @option opts [String] :date_start_from Filter entity by date_start (greater or equal)
  # @option opts [String] :date_start_to Filter entity by date_start (less or equal)
  # @option opts [String] :date_end_from Filter entity by date_end (greater or equal)
  # @option opts [String] :date_end_to Filter entity by date_end (less or equal)
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartCouponList]
  describe 'cart_coupon_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_delete
  # cart.delete
  # Remove store from API2Cart
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :delete_bridge Identifies if there is a necessity to delete bridge
  # @return [CartDelete200Response]
  describe 'cart_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_giftcard_add
  # cart.giftcard.add
  # Use this method to create a gift card for a specified amount.
  # @param amount Defines the gift card amount value.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :code Gift card code
  # @option opts [String] :owner_email Gift card owner email
  # @option opts [String] :recipient_email Gift card recipient email
  # @option opts [String] :recipient_name Gift card recipient name
  # @option opts [String] :owner_name Gift card owner name
  # @return [CartGiftcardAdd200Response]
  describe 'cart_giftcard_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_giftcard_count
  # cart.giftcard.count
  # Get gift cards count.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [CartGiftcardCount200Response]
  describe 'cart_giftcard_count test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_giftcard_delete
  # cart.giftcard.delete
  # Delete giftcard
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @return [AttributeDelete200Response]
  describe 'cart_giftcard_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_giftcard_list
  # cart.giftcard.list
  # Get gift cards list.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :store_id Store Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartGiftCardList]
  describe 'cart_giftcard_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_info
  # cart.info
  # This method allows you to get various information about the store, including a list of stores (in the case of a multistore configuration), a list of supported languages, currencies, carriers, warehouses, and many other information. This information contains data that is relatively stable and rarely changes, so API2Cart can cache certain data to reduce the load on the store and speed up the execution of the request. We also recommend that you cache the response of this method on your side to save requests. If you need to clear the cache for a specific store, then use the cart.validate method.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [CartInfo200Response]
  describe 'cart_info test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_meta_data_list
  # cart.meta_data.list
  # Using this method, you can get a list of metadata for various entities (products, options, customers, orders). Usually this is data created by third-party plugins.
  # @param entity_id Entity Id
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :entity Entity
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @option opts [String] :key Key
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartMetaDataList]
  describe 'cart_meta_data_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_meta_data_set
  # cart.meta_data.set
  # Set meta data for a specific entity
  # @param entity_id Entity Id
  # @param key Key
  # @param value Value
  # @param namespace Metafield namespace
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity Entity
  # @option opts [String] :store_id Store Id
  # @option opts [String] :lang_id Language id
  # @return [AttributeAdd200Response]
  describe 'cart_meta_data_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_meta_data_unset
  # cart.meta_data.unset
  # Unset meta data for a specific entity
  # @param entity_id Entity Id
  # @param key Key
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity Entity
  # @option opts [String] :store_id Store Id
  # @return [BasketLiveShippingServiceDelete200Response]
  describe 'cart_meta_data_unset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_methods
  # cart.methods
  # Returns a list of supported API methods.
  # @param [Hash] opts the optional parameters
  # @return [CartMethods200Response]
  describe 'cart_methods test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_plugin_list
  # cart.plugin.list
  # Get a list of third-party plugins installed on the store.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :store_id Store Id
  # @return [CartPluginList200Response]
  describe 'cart_plugin_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_script_add
  # cart.script.add
  # Add new script to the storefront
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name The user-friendly script name
  # @option opts [String] :description The user-friendly description
  # @option opts [String] :html An html string containing exactly one &#x60;script&#x60; tag.
  # @option opts [String] :src The URL of the remote script
  # @option opts [String] :load_method The load method to use for the script
  # @option opts [String] :scope The page or pages on the online store where the script should be included
  # @option opts [String] :events Event for run scripts
  # @option opts [String] :store_id Store Id
  # @return [CartScriptAdd200Response]
  describe 'cart_script_add test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_script_delete
  # cart.script.delete
  # Remove script from the storefront
  # @param id Entity id
  # @param [Hash] opts the optional parameters
  # @option opts [String] :store_id Store Id
  # @return [AttributeDelete200Response]
  describe 'cart_script_delete test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_script_list
  # cart.script.list
  # Get scripts installed to the storefront
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  # @option opts [String] :script_ids Retrieves only scripts with specific ids
  # @option opts [String] :store_id Store Id
  # @option opts [String] :created_from Retrieve entities from their creation date
  # @option opts [String] :created_to Retrieve entities to their creation date
  # @option opts [String] :modified_from Retrieve entities from their modification date
  # @option opts [String] :modified_to Retrieve entities to their modification date
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartScriptList]
  describe 'cart_script_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_shipping_zones_list
  # cart.shipping_zones.list
  # Get list of shipping zones
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :start This parameter sets the number from which you want to get entities
  # @option opts [Integer] :count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
  # @option opts [String] :store_id Store Id
  # @option opts [String] :response_fields Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :params Set this parameter in order to choose which entity fields you want to retrieve
  # @option opts [String] :exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  # @return [ModelResponseCartShippingZonesList]
  describe 'cart_shipping_zones_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for cart_validate
  # cart.validate
  # This method clears the cache in API2Cart for a particular store and checks whether the connection to the store is available. Use this method if there have been any changes in the settings on the storе, for example, if a new plugin has been installed or removed.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :validate_version Specify if api2cart should validate cart version
  # @return [CartValidate200Response]
  describe 'cart_validate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
